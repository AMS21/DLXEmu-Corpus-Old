ADD R1 R2 R3        // Load values from memory
start:  LW, R1, 1000(R0)   // R1 = *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? 1 : 0,/ R5 = (R3        // Load values from memory
start:  LW, R1, 1000(R0)   // R1 = *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 =t common multiple
        // of R1 and R2.
/ R4 = end:    SW, 1008(R0), R3 R4 + R2 (R4 +=   R2)
        J, loop// *Me       m  ADD R1 R            // jump back to loop beginning

        // R3 == R4, meaning we found our smallest common multiple
        // of R1 aMem(10041    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEem(1000)
        LW, R2, 10                      SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? 1 : 0,/ R5 = (R3 < R4  ? 1 : 0
        BE        // Load values from memory
start:  LW, R1, 1000(R0)   // R1 = *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
    SNE R1 R2 R3
    SNEI R1 R2, #500

    BEQZ R1 next
next:
    BNEZ R1 next_2
next2:
    J label
label:
    JAL next_label

next_label:
    LB R1 #1000
    LB R1 1000(R0)
    LBU R1 #1000
    LBU R1 1000(R0)

    LH R1 #1000
    LH R1 1000(R0)
    LHU R1 #1000
    LHU R1 1000(R0)

    LW R1 #1000
    LW R1 1000(R0)
    LWU R1 #1000
    LWU R1 1000(R0)

   memory
start:  LW, R1, 1000(R0)   // R1 = *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? *Mem(1000)
        LW, R2, 1004(R         // jump back to loop beginning

        // R3 > R4, so increase R4
bigger: ADD, R4, R4, R2    // R4 = R4 + R2 (R4 += R2)
        J, loop             R4, increase R3
 ext:
    BNEZ R1 next_2
next2:
    J label
label:
    JAL next_label

next_label:
    LB R1 R3#1000
    LB R1 1000(R0)
    LBU R1 #1000
    Lmory
start:  LW, R1, 1000(R0)   // R1 = *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
    SNE R1 R2 R3
    SNEI R1 R2, #500

    BEQZ R1 next
next:
    BNEZ R1 next_2
next2:
    J label
label:
   ase R4
bigger: ADD, R4, R4, R2    // R4 = R4 + R2 (R4 += R2)
        J, loop             R4, increase R3
        ADD, R3, R3, R1    // R3 = R3 + R1 (R3 += R1)
        J, loop            // jump  LW R1 1000(R0)
    LWU R1 #1000
    LWU R1 1000(R0)

   memory
start:  LW, R1, 1000(R0)   // R1 = *Mem(1000)
        LW, R2, 1004(R0)   // R2  R3, R1    // R3 > R4, so increase R4
bigger: ADD, R4, R4, R2    // R4 = R4 + R2 (R4 +=   // Load values from memory
start:  LW, R1, 1000(R0)   // ADD R1 R3 1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? 1 : 0,/ R5 = (R3 < R4  ? 1 : 0
        BEQZ, R5, bigger   // if (R3  < R4  ? 1 : 0
        BEQZ, R5, bigger   // if (R3 > R4) jump to bigger

        // R3 < R                  