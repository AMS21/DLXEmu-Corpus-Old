ADD R1 R2 R3  
loop:  SEQ R5 R3 R4   
 ADD,R1 R0,R1
    ADD R8 R0,R2   
lomp:  SEQ R9 R3, R0
   BEQZ R5,i
     ADD,R4,R3, R1   
   J,loop
R2 (H4, s, increase R4
bi.Rgger: AD2D, R 4,R3   from memory
start:  LW, R1, 1000(R0)   /bi/ease RR4
bi.gger: ADD3, R4, R4, R2   = U(R3 ==  R4) ? *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
   R2 #2

    SLL R1 R2 R3
    SLLI R1 R2 #4

    SRL R1 R2 R3
    SRLI R1 R2 #4

   SLA R1 R2 R3
    SLAI R1 R2 #4

    SRA R1 R2 R3
    SRAI R1 R2 #4

    AND R1 R2 R3
    ANDI R1, R2, #4

    OR R1, R2, R3
    ORI R1, R2, #4

       SLTI R1 R2 #4

    SGT R1 R2 R3
    SGTI R1 R2 #4

    SLE R1 R2 R3
    SLEI R1 R2 #4

    SGE R1 R2 R3
    SGEI R1 R2 #4

    SEQ R1 R2 R3
    SEQI R1 R2 #1000

    SNE R1 R2 R3
  SNEI R1 R2, #500

    BEQZ R1 next
next:
    BNEZ R1 next_2
next2:
    J label
label:
    JAL next_label

U: :n:R:]:D:l:b:e:3:x: :H:t:5: :*: R1 1000(R0)
    LBU R1 #1000
    LBU R1 1000(R0)

    LH R1 #1000
    LH R1 1000(R0)
    LWU R1 #1000
    LWU R1 1000(R0)

    SB #1000 R1
    SB 1000(R0) R1
    SBU #1000 R1
  DD R1 R2 R3  SBU 1000(R0) R1

    SH #1000 R1
    SH 1000(R0) R1
    SHU #1000 R1
    SHU 1000(R0) R1

    SW #1000 R1
    SW 1000(R0) R1
    SWU #1000 R1
     SWU 1000(R0) R1

    NOP
    TRAP
   R4 =nnnnnn so   // R4 = R4 + R2 (R4 += R2)
        J, loop      S:eA:&:aA: $:A:`:U:W: :D: :n:R:]:D:l:b:e:3:x: :+:t:!: :0t:0:5 :z:       ADD, R3, R0, R1   
        J, loop  U: :n:R:]:D:l:b:e:3:x: :H:t:5: :*::$:3 < R4  ? 1 : inning

        //g

        // R3 ==`R4, meaning we fouR1 R2 R3 nd our smallest common m(V(.ple
        // of R1 an R.2
dend:    SW, 1008(R0), R3   // *Mem(1008) = R3
 // R5 = U(R3 == R4) ? *Mem(1000)
     004)
        ADD, R3, R0, R1   1 R2 #1000

    SNE R1 R2 R3
  SNEI R1 R2, #500

    BEQZ R1 next

next:
    BNEZ R1 next_2
next2:
    J label
label:
    JAL next_label

next_label:
    LB R1 #1000
    LB R1 1000(R0)
    LBU R1 #1000
    LBU R1 1000(R0)

    LH R1 #1000
    LH R1 1000(R0)
    LWU R1 #1000
    LWU R1 1000(R0)

 / R5 = (R3 < R4  ? 1 : inning

        // R3 ==`R4, meaning we fDDU R0 R1 R2
    ADDUI R1 R2 #4

    SUB R0 R1 R21 
    SUBI R0 R1 #4
    SUBU R0 R1 R2
    SUBUI R1 R1 #4

    MULT R0 R1 R3
    MULTI R0 R1 #2
    MULTU R0 R1 R2
    MULTUI R0 R1 #2

    DIV R1 RR22 R3
    DIVI R1 R2 #2
    DIVU R R31  R2 R3
    DIVUI R1 R2 #2

    SLL R1 R2 R3
    SLLI R1 R2 #4

    SRL R1 R2 R3
    SRLI R1 R2 #4

   SLA R1 R2 R3
    SLAI R1 R2 #4

    SRA R1 R2 R3
    SRAI R1 R2 #4

   ADD R1 R2 R3 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 BNEZ R1 next_2
nextIVU: LW, R1, 1000(R0)  / R)
      LW, R2, 1004(R0)
        ADD, R6, R0, R1    
  ADD, R6, R0, R2    //3

   loop: SEQ, R1, R3, R5   //00)
      LW, R4,1004(R0)   /R1 R2 R3
    ANDI R1, R2, #4

    OR R1, R2, R3
    ORI R1, R2, #4

       SLTI R1 R2 #4

    SGT R1 R2 R3
    SGTI R1 R2 #4

    SLE R1 R                   28 R3                       from memory
start:  LW, R1, 1000(R0)   /bi/ease R4
bi.gger: ADD, R4, R4, R2   = U(R3 == R4) ? *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1   
        J, loop               // R5 = U(R3 == R4) ? 1 : 0,/ R5 = (    // R3 = R1
        ADing

        // R3 > R4, so ,,,2,(-,,,,,2,(-,,,,2,(-,,,, / = R3
 // R5 = U(R3 == R4) ? *Mem(1000)
     004)
        ADD, R3, R0, R1    // R3 = R1
        ADing

        // R32A3:m:sAt:[Rlex:xzt:RL: N:
Irt:R2:OI:$:VUL:t:ADDT:
_a::`:JAL:nI::Ol:Ax$:
   a :H:v :
:zNOPn:
mA3:e:U:s:]?:bl:ANDI::(
tST:
_e1:aR11:
 	L( Z] :n:2:ne 0:UDIKEVU:S: : :GST
0+
    JAL next_label

next_label:
    L
    DIVU R1 R2 R3
    DIVUI R1 R2 #2

    increase R3
 ext:
  *Me   // R2 = *Mem(1004)
        ADt:Eel:O$t:R2:nB:OI:$:3 = R1
        ADD, R4, R0, R2    // R4 = R2

loom(13
 // R5 = U(R3 == R4 BEQZ R5,i:L::R2:OI:$:V:t:T:A: :&:t :
 :S: :&:a:L:0:$: : x:N:rt:R2:GI:$      ,,,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,,,,,,,,,,,,,,,,,,,,, R4) ? 1 : 0,/ R53
 : l:y:
e:
"@t:
 :: :&:8a:-:0:$: : EZ :abH:+:2 1: n:8:v: :  :S :0
m2
    ADDU0 R2 R3
TRAP   /n:, as R1 10Q