ADD R1 R2 R3 ADD R1  R2 R3 ADD R1 R2 R3  R5 R3 R4   
 ADD,R1 R0,R1
 ADD R8 R0,R2  
lp: SEQ R9 R3 R0
 BEQZ R5,i R
    ADD,R4,R3,3 R1   
   J,loo 
               I: $:2
    SUBI R0 R1 #4
    SUBU R0 R1 R2
    SUBUI R1 R1 #4

    MULTDD R1 R0 R1 R3
    MULTI R0 R1 #2
    MULTU R0  RR1 R2
    MULTU2
    ADDI R1 R1 #4
    ADDU  R2 R3 R0 R1 R2
    DIVUI R1 R2 #2

    SLL R1 R2 R3
    SLLI R1 R2 #4

    SRL R1 R2 R3
    SRLI R1 R2 #4

   SLA R1 R2 R3
    SLAI R1 R2 #4

    SRA R1 R2 R3
    SRAI R1 R2 #4

    AND R1 R2 R3
    ANDI R1, R2, #4

    OR R1, R2, R3
    ORI R1, R2, #4

       SLTI R1 R2 #4

    SGT R1 R2 R3
    SGTI R1 R2 #4

    SLE R1 R2 R3
    SLEI R1 R2 #4

    SGE R1 R2 R3
    SGEI R1 R2 #4

    SEQ R1 R2 R3,: :S: :&:a:A:L: : :v:1:n:z:NE R1 R2 R3
  SNEI R1 R2, #500

    BEQZ R1 next
next:
    BNEZ R1 next_2
next2:
    J label
label:
    JAL next_label

next_label:
    LB R1 #1000
    LB R1 1000(R0)
    LBU R1 #1000
    LBU R1 1000(R0)

    LH R1 #1000
    LH R1 1000(R0)
    LWU R1 #1000
    LWU R1 1000(R0)

    SB1 R2 R3  #1000 R1
    SB 1000(R0) R1
    SBU #1000 R1
    SBU 1000(R0) R1

    SH #1000 RR1
    SH 1000(R0) R1
    SHU #1000 R1
    SHU 1000(R0) R1

    SW #1000 R1
    SW 1000(R0) R1
    SWU #1000 R1
    SWU 1000(R0) R1

    NOP
    TRAP
   NO:J:-l:SIl:ex:   :B::e :H:4l:[e:x:N:r:R2:I:$:V:t:T:A: :&:t : : C: :&:a:L:4:$: : :~l:xt:
Dnx 3:&:a:A2 :L: :v:1:n:z:t:4l:[ex:x: :&:a:A:L: : :v:1:n: z:1 ,:ADD R1 R2 R3 ADD R1 R2 R3 :eA:&:aA : $:A:`:U:W: :D: :n:R:]:D:l:b:e:3:x: :+:t:!: :0t:0:5 :z:,,,,, ,,,?,9 R3 R0
 BEQZ R5,i
    ADD,R4,R3, R1   
   J,loo
:nb: :N :
~:l2:RR:2z:HA :lb:u0: 2A3:m:sAt:[Rlex:xzt:RL: N:
Irt:R:OI:$:TUL:t:ADDT:
_a::`:AJ:LnI:Ol:Ax$:
   a :H:v :
:zNOPn:
mA6: eAD:U:s:]?:bR2 Rl:AI::(
tST:
_e1:1:
	] :n:2:e 0:3 UDIKEVU:S: : :GST
0+:L:f.:0e: 3lR3 == R4) jump to end and stop the loop

        // R3 != R4, check which one is bigger
        SLT, R5, R3, R4    // R5 = (R3 < R4) ? 1 : 0
        BEQZ, R5, bigger   // if (R3 > R4) jump1 R2 R3 to bigger

        // R3 < R4, increase R3
        ADD, R3, R3, R1    //tJRR16S: b:l:bL0e:H3:x: 6l:` +l:b ~0:x3:HSxe:l :
eMxt:eb2 :%a :BNEZ:    :
srt:Lll:z:nB:O:+A:aAel:  l  SN: w:SR>
3`:nb: :N :
~:l2:RR:2z:HA :lb:u0: 2A3:m:sAt:[Rlex:xzt:RL: N:
Irt:R:OI:$:TUL:t:ADDT:
_a::`:AJ:LnI:Ol:Ax$:
   a :H:v :
:zNOPn:
mA6:eAD:U:s:]?:bl:AI::(
tST:
_e1:1:
	] :n:2:e 0:UDIKEVU:S: : :GST
0+:L:f.:0e: 3l: :I:xt:x8:  Fm 0:lt:Dl: B: :Hst:3l:[x:xz$:V:tLT:T:A: :&:t NEIt:LHUk:  5t:x=: l:y:
e:
"@t:
 :: :&:8a:-:0:$: : EZ :abH:+:2 1: n:8:v: :  :DS :5H
mA::et::  SBU #1000 R1
  DD R1 R2 R3  SBU 1000(R0) R1

    SH #1000 R1
    SH 1000(R0) R1
SEQ R2 R0,R1
 ADD R8 R0,R2
 SEQ R9 R3,R0
BEQZ R5,f
J,lo   SW 1000(R0) R1
    SWU #1000 R1
     SWU 1000(R0) R1

            from memory
statJRR16S: b:l:bL0e:H3:x: 6l:` +l:b ~0:xmp1 R2 R3 to bigger

        // R3 < R4, increase R3
        ADD, R3, R3, R1    // R3 = R3 + R1 (R3 += R1)
        J, loop            // jump back to loop beginning

        // R3 > R4, so increase R4
bigger: ADD, R4, R4, R2    // R4 = R4 + R2 (R4 += R2)
        J, loop     :e:B: :H:4l:[e:x:N:r:R2:I:$:V:t:T:A: :&:t : : C: :&:a:L:4:$: : :~l:xt:
DD:]:D:m:b:0oe:H3:  :l:`+L:. :31:
_ :a:w:(v:  :S : :n:2:nt:0A:?:UDW: 5:zU:S: (R0), R3   // *Mem(1008) = R3
000
    LH R1 1000(R0)
    LWU R1 #1000
    R3, R4    // R5 = (R3 < R4) ? 1 : 0
        BEQZ, R5, bigger   // if (R3 >  // R2 = *Mem(1004)
        ADt:Eel:O$t:R2:nB:OI:$:3 = R1
        ADD, R4, R0, R2    // R4 = R2

loom(13
 // R5 =IU: :n:R:]:D:l:b:e:3:x: :H:t:5: :*:BUI R0 R1 #4

    MULT R0 R1 R3
    MULaR11:
 	L( Z] :n:2:ne 0)*( ,EVU:S: : :GST
0+
    JAL next_label

next_label:
    L
    DIVU R1  2 R3
    DIVUU: :n:R:]:D:l:b:e:3:x: :H:t:5: :*:  *MeT) // R2 = *Mem(1004)
        ADt:Eel:O$t:R2:nB:OI:$:3 = R1
 [

 
%

4:OI:$:V:t:T:A: :&:t : : SN( S <
 (:(1
C,4  /S S <
 (:(1
C,4)`
S,--,,,,,2,(-,,,,2,(-,,,, / = R3
 // R5 = U(R3 == R
    SUBUI R1 R1 #4

    MULT R0 R1 R3
    MULTI R0 R1 #2
    MULTU R0 R1 R2
    MULTUI R0 R1 #2

    DIV R1 R2 R3
    DIVI