ADD R1 R2 R3 ADD R1 R2 R3 ADD R1 R2 R3 ADD R1 R2 R3 ADD R1 R2 R3         // Load valMULTADD RUues                                                 28 R3                       from memory
start:  LW, R1, 1000(R0)   /bi/ease R4
bi.gger: ADD, R4, R4, R2   = U(R3 == R4) ? *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1   
        J, loop               // R5 = U(R3 == R4) ? 1 : 0,/ R5 = (R3 < R4  ? 1 : inning

        // R3 ==`R4, meaning we fouR1 R2 R3 nd our smallest common multiple
        // of R1 an R.2
dend:    SW, 1008(R0), R3   // *Mem(1008) = R3
 // R5 = U(R3 == R4) ? *Mem(1000)
     004)
        ADD, R3, R0, R1    // R3 = R1
        ADing

        // R3 > R4, so increase R4
bigger: ADD, R4, R4, R2    // R4 = R4 + R2 (R4 += R2)
        J, loop             R4, increase R3
 ext:
    BNEZ R1 next_2
next2:
    J label
label:
    JAL next_label

next_label:
    LB R1 R3#1000
    LB R1 1000(R0)
    LBU R1 #1000
    Lmory
start:  LW, R1, 1000(R0)   // R1 = *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loom(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
               // Lo
start:p:er: ADD, R8, R4 R2 / R4 =nnnnnn so   // R4 = R4 + R2 (R4 += R2)
        J, loop               // R5 = U(R3 == R4) ? 1 : 0,/ R5 = 