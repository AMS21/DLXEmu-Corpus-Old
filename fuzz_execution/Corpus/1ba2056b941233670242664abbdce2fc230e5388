ADD R1 R2 R3 ADD R1 R2 R3     ADD R1 R2 R3 ADD R1 R2 R3 ADD R1 R2 R3    // Load values frallest common multiple
        // of R1 and R2. > R4, so increase R4
bigger: ADD, R4, R4, R2    // R4 = R4 + R2 (R4 += R2)
        J, lng we found our sm, R1    // R3 = R3 + R1 (R3 += R1)
        J, loop            // jump back to loop beginning

        // R3 >1, R2, R3
    ORI R1, R2   SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? 1 : 0,/ R5 = (R3 < R4  ? 1 : 0
        BE        // Load values from memory
start:  LW, R1, 1000(R0)   // R1 = *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
                               ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
    SNE R1 R2 R3
    SNEI R1 R2, #500

    BEQZ R1 next
next:
    BNEZ R1 next_2
next2:
    J label
label:
    JAL next_label

next_label:
    LB R1 #1000
    LB R1 1000(R0)
    LBU R1 #1000
    LBU R1 1000(R0)

    LH R1 #1000
    LH R1 1000(R0)
    LHU R1 #1000
    LHU R1 1000(R0)

    LW R1 #1000
    LW R1 1000(R0)
    LWU R1 #1000
    LWU R1 1000(R0)

    SB #1
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? 1 : 0,/ R5 = (R3 < R4  ? 1 : 0
        BEQZ, R5, bigger   // if (R3  < R4  ? 1 : 0
        BEQZ, R5, bigger   // if  R1 #4
    SUBU R0 R1 R2
    SUBUI R0 R1 #4

    MULT R0 R1 R3
    MULTI R0 R1 #2
    MULTU R0 R1 R2
    MULTUI R0 R1 #2

    DIV R1 R2 R3
    DIVI R1 R2 #2
    DIVU R1 R2 R3
    DIVUI R1 R2 #2

    SLL R1 R2 R3
    SLLI R1 R2 #4

    SRL R1 R2 R3
    SRLI R1 R2 #4

    SLA R1 R2 R3
    SLAI R1 R2 #4

    SRA R1 R2 R3
    SRAI R1 R2 #4

    AND R1 R2 R3
    ANDI R1, R2, #4

    OR R1, R2, R3
    ORI R1, R2, #4

    SLT R1 R2 R3
    SLTI R1 R2 #4

    SGT R1 R2 R3
    SGTI R1 R2 #4

    SLE R1 R2 R3
    SLEI R1 R2 #4

    SGE R1 R2 R3
    SGEI R1 R2 #4

    SEQ R1 R2 R3
    SEQI R1 R2 #1000

    SNE R1 R2 R3
    SNEI R1 R2, #500

    BEQZ R1 next
next:
    BNEZ R1 next_2
next2:
    J label
label:
    JAL next_label

next_label:
    LB R1 #1000
    LB R1 1000(R0)
    LBU R1 #1000
    LBU R1 1000(R0)

    LH R1 #1000
    LH R1 1000(R0)
    LHU R1 #1000
    LHU R1 1000(R0)

    LW R1 #1000
    LW R1 1000(R0)
    LWU R1 #1000
    LWU R1 1000(R0)

    SB #1000 R1
    SB 1000(R0) R1
    SBU #1000 R1
    SBU 1000(R0) R1

    SH #1000 R1
    SH 1000(R0) R1
    SHU #1000 R1
    SHU 1000(R0) R1

    SW #1000 R1
    SW 1000(R0) R1
    SWU #1000 R1
    SWU 1000(R0) R1

    NOP
    R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 = U(R3 == R4) ? *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
    SNE R1 R2 R3
    SNEI R1 R2, #500

    BEQZ R1 next
next:
    BNEZ R1 next_2
next2:
    J label
label:
    JAL next_label

next_label:
    LB R1 #1000
    LB R1 1000(R0)
    LBU R1 #1000
    LBU R1 1000(R0)

    LH R1 #1000
    LH R1 1000(R0)
    LHU R1 #1000
    LHU R1 1000(R0)

    LW R1 #1000
    LW R1 1000(R0)
    LWU R1 #1000
    LWU R1 1000(R0)

   memory
start:  LW, R1, 1000(R0)   // R1 = *Mem(1000)
        LW, R2, 1004(R0)   // R2 = *Mem(1004)
        ADD, R3, R0, R1    // R3 = R1
        ADD, R4, R0, R2    // R4 = R2

loop:   SEQ, R5, R3, R4    // R5 = U(R3 == R4)   ? *Mem(1000)
        LW, R2, 1004(R         // jump back to loop beginning

        // R3 > R4, so increase R4
bigger: ADD, R4, R4, R2    // R4 = R4 + R2 (R4 += R2)
        J, loop             R4, increase R3
        ADD, R3, R3, R1    // R3 = R3 + R1 (R3 += R1)
        J, loop            // jump back to loop beginning

        // R3 > R4, so increase R4
bi           // jump back to loop beginning

        // R3 == R4, meaning2,