/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/IntRegister.cpp:
    1|       |#include "DLX/IntRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    IntRegister::IntRegister()
    6|       |        : m_ValueSigned{0}
    7|       |        , m_IsReadOnly{false}
    8|  1.82k|    {}
    9|       |
   10|       |    void IntRegister::SetSignedValue(phi::i32 val)
   11|  16.8k|    {
   12|  16.8k|        m_ValueSigned = val;
   13|  16.8k|    }
   14|       |
   15|       |    void IntRegister::SetUnsignedValue(phi::u32 val)
   16|      2|    {
   17|      2|        m_ValueUnsigned = val;
   18|      2|    }
   19|       |
   20|       |    phi::i32 IntRegister::GetSignedValue() const
   21|  32.5k|    {
   22|  32.5k|        return m_ValueSigned;
   23|  32.5k|    }
   24|       |
   25|       |    phi::u32 IntRegister::GetUnsignedValue() const
   26|      9|    {
   27|      9|        return m_ValueUnsigned;
   28|      9|    }
   29|       |
   30|       |    phi::Boolean IntRegister::IsReadOnly() const
   31|  17.5k|    {
   32|  17.5k|        return m_IsReadOnly;
   33|  17.5k|    }
   34|       |
   35|       |    void IntRegister::SetReadOnly(phi::Boolean read_only)
   36|     57|    {
   37|     57|        m_IsReadOnly = read_only;
   38|     57|    }
   39|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Instruction.cpp:
    1|       |#include "DLX/Instruction.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include <Phi/Core/Assert.hpp>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    Instruction::Instruction(const InstructionInfo& info)
    9|       |        : m_Info(info)
   10|    912|    {}
   11|       |
   12|       |    void Instruction::SetArgument(phi::u8 argument_number, InstructionArg argument)
   13|  1.73k|    {
   14|  1.73k|        PHI_ASSERT(argument_number < 3u);
   15|  1.73k|
   16|  1.73k|        switch (argument_number.get())
   17|  1.73k|        {
   18|    695|            case 0u:
   19|    695|                m_Arg1 = argument;
   20|    695|                break;
   21|    644|            case 1u:
   22|    644|                m_Arg2 = argument;
   23|    644|                break;
   24|    391|            case 2u:
   25|    391|                m_Arg3 = argument;
   26|    391|                break;
   27|      0|            default:
   28|      0|                PHI_ASSERT_NOT_REACHED();
   29|  1.73k|        }
   30|  1.73k|    }
   31|       |
   32|       |    std::string Instruction::DebugInfo() const noexcept
   33|    193|    {
   34|    193|        return std::string("Instruction");
   35|    193|    }
   36|       |
   37|       |    void Instruction::Execute(Processor& processor) const noexcept
   38|  30.0k|    {
   39|  30.0k|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   40|  30.0k|    }
   41|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionLibrary.cpp:
    1|       |#include "DLX/InstructionLibrary.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/InstructionImplementation.hpp"
    5|       |#include <magic_enum.hpp>
    6|       |
    7|       |namespace dlx
    8|       |{
    9|       |    InstructionLibrary::InstructionLibrary()
   10|       |        : m_Instructions()
   11|     57|    {
   12|     57|        PHI_ASSERT(Initialize());
   13|     57|    }
   14|       |
   15|       |    phi::Boolean InstructionLibrary::Initialize()
   16|     57|    {
   17|     57|        // Arithmetic
   18|     57|        InitInstruction(OpCode::ADD, ArgumentType::IntRegister, ArgumentType::IntRegister,
   19|     57|                        ArgumentType::IntRegister, impl::ADD);
   20|     57|        InitInstruction(OpCode::ADDI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   21|     57|                        ArgumentType::ImmediateInteger, impl::ADDI);
   22|     57|        InitInstruction(OpCode::ADDU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   23|     57|                        ArgumentType::IntRegister, impl::ADDU);
   24|     57|        InitInstruction(OpCode::ADDUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   25|     57|                        ArgumentType::ImmediateInteger, impl::ADDUI);
   26|     57|        InitInstruction(OpCode::SUB, ArgumentType::IntRegister, ArgumentType::IntRegister,
   27|     57|                        ArgumentType::IntRegister, impl::SUB);
   28|     57|        InitInstruction(OpCode::SUBI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   29|     57|                        ArgumentType::ImmediateInteger, impl::SUBI);
   30|     57|        InitInstruction(OpCode::SUBU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   31|     57|                        ArgumentType::IntRegister, impl::SUBU);
   32|     57|        InitInstruction(OpCode::SUBUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   33|     57|                        ArgumentType::ImmediateInteger, impl::SUBUI);
   34|     57|        InitInstruction(OpCode::MULT, ArgumentType::IntRegister, ArgumentType::IntRegister,
   35|     57|                        ArgumentType::IntRegister, impl::MULT);
   36|     57|        InitInstruction(OpCode::MULTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   37|     57|                        ArgumentType::ImmediateInteger, impl::MULTI);
   38|     57|        InitInstruction(OpCode::MULTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   39|     57|                        ArgumentType::IntRegister, impl::MULTU);
   40|     57|        InitInstruction(OpCode::MULTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   41|     57|                        ArgumentType::ImmediateInteger, impl::MULTUI);
   42|     57|        InitInstruction(OpCode::DIV, ArgumentType::IntRegister, ArgumentType::IntRegister,
   43|     57|                        ArgumentType::IntRegister, impl::DIV);
   44|     57|        InitInstruction(OpCode::DIVI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   45|     57|                        ArgumentType::ImmediateInteger, impl::DIVI);
   46|     57|        InitInstruction(OpCode::DIVU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   47|     57|                        ArgumentType::IntRegister, impl::DIVU);
   48|     57|        InitInstruction(OpCode::DIVUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   49|     57|                        ArgumentType::ImmediateInteger, impl::DIVUI);
   50|     57|        InitInstruction(OpCode::SLL, ArgumentType::IntRegister, ArgumentType::IntRegister,
   51|     57|                        ArgumentType::IntRegister, impl::SLL);
   52|     57|        InitInstruction(OpCode::SLLI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   53|     57|                        ArgumentType::ImmediateInteger, impl::SLLI);
   54|     57|        InitInstruction(OpCode::SRL, ArgumentType::IntRegister, ArgumentType::IntRegister,
   55|     57|                        ArgumentType::IntRegister, impl::SRL);
   56|     57|        InitInstruction(OpCode::SRLI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   57|     57|                        ArgumentType::ImmediateInteger, impl::SRLI);
   58|     57|        InitInstruction(OpCode::SLA, ArgumentType::IntRegister, ArgumentType::IntRegister,
   59|     57|                        ArgumentType::IntRegister, impl::SLA);
   60|     57|        InitInstruction(OpCode::SLAI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   61|     57|                        ArgumentType::ImmediateInteger, impl::SLAI);
   62|     57|        InitInstruction(OpCode::SRA, ArgumentType::IntRegister, ArgumentType::IntRegister,
   63|     57|                        ArgumentType::IntRegister, impl::SRA);
   64|     57|        InitInstruction(OpCode::SRAI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   65|     57|                        ArgumentType::ImmediateInteger, impl::SRAI);
   66|     57|        // Logic
   67|     57|        InitInstruction(OpCode::AND, ArgumentType::IntRegister, ArgumentType::IntRegister,
   68|     57|                        ArgumentType::IntRegister, impl::AND);
   69|     57|        InitInstruction(OpCode::ANDI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   70|     57|                        ArgumentType::ImmediateInteger, impl::ANDI);
   71|     57|        InitInstruction(OpCode::OR, ArgumentType::IntRegister, ArgumentType::IntRegister,
   72|     57|                        ArgumentType::IntRegister, impl::OR);
   73|     57|        InitInstruction(OpCode::ORI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   74|     57|                        ArgumentType::ImmediateInteger, impl::ORI);
   75|     57|        InitInstruction(OpCode::XOR, ArgumentType::IntRegister, ArgumentType::IntRegister,
   76|     57|                        ArgumentType::IntRegister, impl::XOR);
   77|     57|        InitInstruction(OpCode::XORI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   78|     57|                        ArgumentType::ImmediateInteger, impl::XORI);
   79|     57|        // Conditionals
   80|     57|        InitInstruction(OpCode::SLT, ArgumentType::IntRegister, ArgumentType::IntRegister,
   81|     57|                        ArgumentType::IntRegister, impl::SLT);
   82|     57|        InitInstruction(OpCode::SLTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   83|     57|                        ArgumentType::ImmediateInteger, impl::SLTI);
   84|     57|        InitInstruction(OpCode::SGT, ArgumentType::IntRegister, ArgumentType::IntRegister,
   85|     57|                        ArgumentType::IntRegister, impl::SGT);
   86|     57|        InitInstruction(OpCode::SGTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   87|     57|                        ArgumentType::ImmediateInteger, impl::SGTI);
   88|     57|        InitInstruction(OpCode::SLE, ArgumentType::IntRegister, ArgumentType::IntRegister,
   89|     57|                        ArgumentType::IntRegister, impl::SLE);
   90|     57|        InitInstruction(OpCode::SLEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   91|     57|                        ArgumentType::ImmediateInteger, impl::SLEI);
   92|     57|        InitInstruction(OpCode::SGE, ArgumentType::IntRegister, ArgumentType::IntRegister,
   93|     57|                        ArgumentType::IntRegister, impl::SGE);
   94|     57|        InitInstruction(OpCode::SGEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   95|     57|                        ArgumentType::ImmediateInteger, impl::SGEI);
   96|     57|        InitInstruction(OpCode::SEQ, ArgumentType::IntRegister, ArgumentType::IntRegister,
   97|     57|                        ArgumentType::IntRegister, impl::SEQ);
   98|     57|        InitInstruction(OpCode::SEQI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   99|     57|                        ArgumentType::ImmediateInteger, impl::SEQI);
  100|     57|        InitInstruction(OpCode::SNE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  101|     57|                        ArgumentType::IntRegister, impl::SNE);
  102|     57|        InitInstruction(OpCode::SNEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  103|     57|                        ArgumentType::ImmediateInteger, impl::SNEI);
  104|     57|        // Conditional branching
  105|     57|        InitInstruction(OpCode::BEQZ, ArgumentType::IntRegister, ArgumentType::Label,
  106|     57|                        ArgumentType::None, impl::BEQZ);
  107|     57|        InitInstruction(OpCode::BNEZ, ArgumentType::IntRegister, ArgumentType::Label,
  108|     57|                        ArgumentType::None, impl::BNEZ);
  109|     57|        // Unconditional branching
  110|     57|        InitInstruction(OpCode::J, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  111|     57|                        impl::J);
  112|     57|        InitInstruction(OpCode::JR, ArgumentType::IntRegister, ArgumentType::None,
  113|     57|                        ArgumentType::None, impl::JR);
  114|     57|        InitInstruction(OpCode::JAL, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  115|     57|                        impl::JAL);
  116|     57|        InitInstruction(OpCode::JALR, ArgumentType::IntRegister, ArgumentType::None,
  117|     57|                        ArgumentType::None, impl::JALR);
  118|     57|        // Loading data
  119|     57|        InitInstruction(OpCode::LB, ArgumentType::IntRegister,
  120|     57|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  121|     57|                        ArgumentType::None, impl::LB);
  122|     57|        InitInstruction(OpCode::LBU, ArgumentType::IntRegister,
  123|     57|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  124|     57|                        ArgumentType::None, impl::LBU);
  125|     57|        InitInstruction(OpCode::LH, ArgumentType::IntRegister,
  126|     57|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  127|     57|                        ArgumentType::None, impl::LH);
  128|     57|        InitInstruction(OpCode::LHU, ArgumentType::IntRegister,
  129|     57|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  130|     57|                        ArgumentType::None, impl::LHU);
  131|     57|        InitInstruction(OpCode::LW, ArgumentType::IntRegister,
  132|     57|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  133|     57|                        ArgumentType::None, impl::LW);
  134|     57|        InitInstruction(OpCode::LWU, ArgumentType::IntRegister,
  135|     57|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  136|     57|                        ArgumentType::None, impl::LWU);
  137|     57|        // Storing data
  138|     57|        InitInstruction(OpCode::SB,
  139|     57|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  140|     57|                        ArgumentType::IntRegister, ArgumentType::None, impl::SB);
  141|     57|        InitInstruction(OpCode::SBU,
  142|     57|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  143|     57|                        ArgumentType::IntRegister, ArgumentType::None, impl::SBU);
  144|     57|        InitInstruction(OpCode::SH,
  145|     57|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  146|     57|                        ArgumentType::IntRegister, ArgumentType::None, impl::SH);
  147|     57|        InitInstruction(OpCode::SHU,
  148|     57|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  149|     57|                        ArgumentType::IntRegister, ArgumentType::None, impl::SHU);
  150|     57|        InitInstruction(OpCode::SW,
  151|     57|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  152|     57|                        ArgumentType::IntRegister, ArgumentType::None, impl::SW);
  153|     57|        InitInstruction(OpCode::SWU,
  154|     57|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  155|     57|                        ArgumentType::IntRegister, ArgumentType::None, impl::SWU);
  156|     57|        // Special
  157|     57|        InitInstruction(OpCode::TRAP, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  158|     57|                        impl::TRAP);
  159|     57|        InitInstruction(OpCode::HALT, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  160|     57|                        impl::HALT);
  161|     57|        InitInstruction(OpCode::NOP, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  162|     57|                        impl::NOP);
  163|     57|
  164|     57|        return true;
  165|     57|    }
  166|       |
  167|       |    const InstructionInfo& InstructionLibrary::LookUp(OpCode instruction) const noexcept
  168|  4.50k|    {
  169|  4.50k|        return m_Instructions.at(static_cast<std::size_t>(instruction));
  170|  4.50k|    }
  171|       |
  172|       |    void InstructionLibrary::InitInstruction(OpCode opcode, ArgumentType arg1, ArgumentType arg2,
  173|       |                                             ArgumentType arg3, InstructionExecutor executor)
  174|  3.59k|    {
  175|  3.59k|        PHI_ASSERT(LookUp(opcode).GetExecutor() == nullptr, "Already registered instruction {}",
  176|  3.59k|                   magic_enum::enum_name(opcode));
  177|  3.59k|
  178|  3.59k|        m_Instructions.at(static_cast<std::size_t>(opcode)) =
  179|  3.59k|                InstructionInfo(opcode, arg1, arg2, arg3, executor);
  180|  3.59k|    }
  181|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/MemoryBlock.cpp:
    1|       |#include "DLX/MemoryBlock.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    MemoryBlock::MemoryBlock(phi::usize start_address, phi::usize starting_size)
    6|       |        : m_StartingAddress(start_address)
    7|     57|    {
    8|     57|        m_Values.resize(starting_size.get());
    9|     57|    }
   10|       |
   11|       |    std::optional<phi::i8> MemoryBlock::LoadByte(phi::usize address) const
   12|      0|    {
   13|      0|        if (!IsAddressValid(address, 1u))
   14|      0|        {
   15|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   16|      0|            return {};
   17|      0|        }
   18|      0|
   19|      0|        return m_Values.at((address - m_StartingAddress).get()).signed_value;
   20|      0|    }
   21|       |
   22|       |    std::optional<phi::u8> MemoryBlock::LoadUnsignedByte(phi::usize address) const
   23|      0|    {
   24|      0|        if (!IsAddressValid(address, 1u))
   25|      0|        {
   26|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   27|      0|            return {};
   28|      0|        }
   29|      0|
   30|      0|        return m_Values.at((address - m_StartingAddress).get()).unsigned_value;
   31|      0|    }
   32|       |
   33|       |    std::optional<phi::i16> MemoryBlock::LoadHalfWord(phi::usize address) const
   34|      0|    {
   35|      0|        if (!IsAddressValid(address, 2u))
   36|      0|        {
   37|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   38|      0|            return {};
   39|      0|        }
   40|      0|
   41|      0|        phi::usize   start_address = address - m_StartingAddress;
   42|      0|        std::int8_t  first_byte    = m_Values.at(start_address.get()).signed_value;
   43|      0|        std::int8_t  second_byte   = m_Values.at((start_address + 1u).get()).signed_value;
   44|      0|        std::int16_t result        = first_byte << 8 | second_byte;
   45|      0|
   46|      0|        return result;
   47|      0|    }
   48|       |
   49|       |    std::optional<phi::u16> MemoryBlock::LoadUnsignedHalfWord(phi::usize address) const
   50|      0|    {
   51|      0|        if (!IsAddressValid(address, 2u))
   52|      0|        {
   53|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   54|      0|            return {};
   55|      0|        }
   56|      0|
   57|      0|        phi::usize    start_address = address - m_StartingAddress;
   58|      0|        std::uint8_t  first_byte    = m_Values.at(start_address.get()).unsigned_value;
   59|      0|        std::uint8_t  second_byte   = m_Values.at((start_address + 1u).get()).unsigned_value;
   60|      0|        std::uint16_t result        = first_byte << 8 | second_byte;
   61|      0|
   62|      0|        return result;
   63|      0|    }
   64|       |
   65|       |    std::optional<phi::i32> MemoryBlock::LoadWord(phi::usize address) const
   66|  2.50k|    {
   67|  2.50k|        if (!IsAddressValid(address, 4u))
   68|      1|        {
   69|      1|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   70|      1|            return {};
   71|      1|        }
   72|  2.50k|
   73|  2.50k|        phi::usize   start_address = address - m_StartingAddress;
   74|  2.50k|        std::int8_t  first_byte    = m_Values.at(start_address.get()).signed_value;
   75|  2.50k|        std::int8_t  second_byte   = m_Values.at((start_address + 1u).get()).signed_value;
   76|  2.50k|        std::int8_t  third_byte    = m_Values.at((start_address + 2u).get()).signed_value;
   77|  2.50k|        std::int8_t  fourth_byte   = m_Values.at((start_address + 3u).get()).signed_value;
   78|  2.50k|        std::int32_t result = first_byte << 24 | second_byte << 16 | third_byte << 8 | fourth_byte;
   79|  2.50k|
   80|  2.50k|        return result;
   81|  2.50k|    }
   82|       |
   83|       |    std::optional<phi::u32> MemoryBlock::LoadUnsignedWord(phi::usize address) const
   84|      0|    {
   85|      0|        if (!IsAddressValid(address, 4u))
   86|      0|        {
   87|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   88|      0|            return {};
   89|      0|        }
   90|      0|
   91|      0|        phi::usize    start_address = address - m_StartingAddress;
   92|      0|        std::uint8_t  first_byte    = m_Values.at(start_address.get()).unsigned_value;
   93|      0|        std::uint8_t  second_byte   = m_Values.at((start_address + 1u).get()).unsigned_value;
   94|      0|        std::uint8_t  third_byte    = m_Values.at((start_address + 2u).get()).unsigned_value;
   95|      0|        std::uint8_t  fourth_byte   = m_Values.at((start_address + 3u).get()).unsigned_value;
   96|      0|        std::uint32_t result = first_byte << 24 | second_byte << 16 | third_byte << 8 | fourth_byte;
   97|      0|
   98|      0|        return result;
   99|      0|    }
  100|       |
  101|       |    phi::Boolean MemoryBlock::StoreByte(phi::usize address, phi::i8 value)
  102|      0|    {
  103|      0|        if (!IsAddressValid(address, 1u))
  104|      0|        {
  105|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  106|      0|            return false;
  107|      0|        }
  108|      0|
  109|      0|        m_Values.at((address - m_StartingAddress).get()).signed_value = value.get();
  110|      0|        return true;
  111|      0|    }
  112|       |
  113|       |    phi::Boolean MemoryBlock::StoreUnsignedByte(phi::usize address, phi::u8 value)
  114|      0|    {
  115|      0|        if (!IsAddressValid(address, 1u))
  116|      0|        {
  117|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  118|      0|            return false;
  119|      0|        }
  120|      0|
  121|      0|        m_Values.at((address - m_StartingAddress).get()).unsigned_value = value.get();
  122|      0|        return true;
  123|      0|    }
  124|       |
  125|       |    phi::Boolean MemoryBlock::StoreHalfWord(phi::usize address, phi::i16 value)
  126|      0|    {
  127|      0|        if (!IsAddressValid(address, 2u))
  128|      0|        {
  129|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  130|      0|            return false;
  131|      0|        }
  132|      0|
  133|      0|        phi::usize  start_address = address - m_StartingAddress;
  134|      0|        std::int8_t first_byte    = (value.get() & 0b11111111'00000000) >> 8;
  135|      0|        std::int8_t second_byte   = value.get() & 0b00000000'11111111;
  136|      0|
  137|      0|        m_Values.at(start_address.get()).signed_value        = first_byte;
  138|      0|        m_Values.at((start_address + 1u).get()).signed_value = second_byte;
  139|      0|
  140|      0|        return true;
  141|      0|    }
  142|       |
  143|       |    phi::Boolean MemoryBlock::StoreUnsignedHalfWord(phi::usize address, phi::u16 value)
  144|      0|    {
  145|      0|        if (!IsAddressValid(address, 2u))
  146|      0|        {
  147|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  148|      0|            return false;
  149|      0|        }
  150|      0|
  151|      0|        phi::usize   start_address = address - m_StartingAddress;
  152|      0|        std::uint8_t first_byte    = (value.get() & 0b11111111'00000000) >> 8;
  153|      0|        std::uint8_t second_byte   = value.get() & 0b00000000'11111111;
  154|      0|
  155|      0|        m_Values.at(start_address.get()).unsigned_value        = first_byte;
  156|      0|        m_Values.at((start_address + 1u).get()).unsigned_value = second_byte;
  157|      0|
  158|      0|        return true;
  159|      0|    }
  160|       |
  161|       |    phi::Boolean MemoryBlock::StoreWord(phi::usize address, phi::i32 value)
  162|      0|    {
  163|      0|        if (!IsAddressValid(address, 4u))
  164|      0|        {
  165|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  166|      0|            return false;
  167|      0|        }
  168|      0|
  169|      0|        phi::usize  start_address = address - m_StartingAddress;
  170|      0|        std::int8_t first_byte    = (value.get() & 0b11111111'00000000'00000000'00000000) >> 24;
  171|      0|        std::int8_t second_byte   = (value.get() & 0b00000000'11111111'00000000'00000000) >> 16;
  172|      0|        std::int8_t third_byte    = (value.get() & 0b00000000'00000000'11111111'00000000) >> 8;
  173|      0|        std::int8_t fourth_byte   = value.get() & 0b00000000'00000000'00000000'11111111;
  174|      0|
  175|      0|        m_Values.at(start_address.get()).signed_value        = first_byte;
  176|      0|        m_Values.at((start_address + 1u).get()).signed_value = second_byte;
  177|      0|        m_Values.at((start_address + 2u).get()).signed_value = third_byte;
  178|      0|        m_Values.at((start_address + 3u).get()).signed_value = fourth_byte;
  179|      0|
  180|      0|        return true;
  181|      0|    }
  182|       |
  183|       |    phi::Boolean MemoryBlock::StoreUnsignedWord(phi::usize address, phi::u32 value)
  184|      0|    {
  185|      0|        if (!IsAddressValid(address, 4u))
  186|      0|        {
  187|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  188|      0|            return false;
  189|      0|        }
  190|      0|
  191|      0|        phi::usize   start_address = address - m_StartingAddress;
  192|      0|        std::uint8_t first_byte    = (value.get() & 0b11111111'00000000'00000000'00000000) >> 24;
  193|      0|        std::uint8_t second_byte   = (value.get() & 0b00000000'11111111'00000000'00000000) >> 16;
  194|      0|        std::uint8_t third_byte    = (value.get() & 0b00000000'00000000'11111111'00000000) >> 8;
  195|      0|        std::uint8_t fourth_byte   = value.get() & 0b00000000'00000000'00000000'11111111;
  196|      0|
  197|      0|        m_Values.at(start_address.get()).unsigned_value        = first_byte;
  198|      0|        m_Values.at((start_address + 1u).get()).unsigned_value = second_byte;
  199|      0|        m_Values.at((start_address + 2u).get()).unsigned_value = third_byte;
  200|      0|        m_Values.at((start_address + 3u).get()).unsigned_value = fourth_byte;
  201|      0|
  202|      0|        return true;
  203|      0|    }
  204|       |
  205|       |    phi::Boolean MemoryBlock::IsAddressValid(phi::usize address, phi::usize size) const
  206|  2.50k|    {
  207|  2.50k|        return address >= m_StartingAddress &&
  208|  2.50k|               (address + size) <= (m_StartingAddress + m_Values.size());
  209|  2.50k|    }
  210|       |
  211|       |    void MemoryBlock::Clear()
  212|     57|    {
  213|     57|        for (auto& val : m_Values)
  214|  57.0k|        {
  215|  57.0k|            val.signed_value = 0;
  216|  57.0k|        }
  217|     57|    }
  218|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionInfo.cpp:
    1|       |#include "DLX/InstructionInfo.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void InstructionInfo::Execute(Processor& processor, const InstructionArg& arg1,
    6|       |                                  const InstructionArg& arg2,
    7|       |                                  const InstructionArg& arg3) const noexcept
    8|  30.0k|    {
    9|  30.0k|        PHI_ASSERT(m_Executor, "No execution function defined");
   10|  30.0k|
   11|  30.0k|        m_Executor(processor, arg1, arg2, arg3);
   12|  30.0k|    }
   13|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionArg.cpp:
    1|       |#include "DLX/InstructionArg.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    InstructionArg::InstructionArg()
    6|       |        : m_Type(ArgumentType::None)
    7|       |        , address_displacement()
    8|  4.46k|    {}
    9|       |
   10|       |    ArgumentType InstructionArg::GetType() const
   11|  95.0k|    {
   12|  95.0k|        return m_Type;
   13|  95.0k|    }
   14|       |
   15|       |    std::string InstructionArg::DebugInfo() const
   16|      0|    {
   17|      0|        return "InstructionArgument";
   18|      0|    }
   19|       |
   20|       |    const InstructionArg::RegisterInt& InstructionArg::AsRegisterInt() const
   21|  47.5k|    {
   22|  47.5k|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   23|  47.5k|
   24|  47.5k|        return register_int;
   25|  47.5k|    }
   26|       |
   27|       |    const InstructionArg::ImmediateValue& InstructionArg::AsImmediateValue() const
   28|      6|    {
   29|      6|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   30|      6|
   31|      6|        return immediate_value;
   32|      6|    }
   33|       |
   34|       |    const InstructionArg::AddressDisplacement& InstructionArg::AsAddressDisplacement() const
   35|  2.50k|    {
   36|  2.50k|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
   37|  2.50k|
   38|  2.50k|        return address_displacement;
   39|  2.50k|    }
   40|       |
   41|       |    const InstructionArg::Label& InstructionArg::AsLabel() const
   42|  12.5k|    {
   43|  12.5k|        PHI_ASSERT(m_Type == ArgumentType::Label);
   44|  12.5k|
   45|  12.5k|        return label;
   46|  12.5k|    }
   47|       |
   48|       |    phi::Boolean operator==(const InstructionArg& lhs, const InstructionArg& rhs)
   49|      0|    {
   50|      0|        if (lhs.GetType() != rhs.GetType())
   51|      0|        {
   52|      0|            return false;
   53|      0|        }
   54|      0|
   55|      0|        switch (lhs.GetType())
   56|      0|        {
   57|      0|            case ArgumentType::AddressDisplacement:
   58|      0|                return (lhs.AsAddressDisplacement().displacement ==
   59|      0|                        rhs.AsAddressDisplacement().displacement) &&
   60|      0|                       (lhs.AsAddressDisplacement().register_id ==
   61|      0|                        rhs.AsAddressDisplacement().register_id);
   62|      0|            case ArgumentType::ImmediateInteger:
   63|      0|                return lhs.AsImmediateValue().signed_value == rhs.AsImmediateValue().signed_value;
   64|      0|            case ArgumentType::IntRegister:
   65|      0|                return lhs.AsRegisterInt().register_id == rhs.AsRegisterInt().register_id;
   66|      0|            case ArgumentType::Label:
   67|      0|                return lhs.AsLabel().label_name == rhs.AsLabel().label_name;
   68|      0|            case ArgumentType::None:
   69|      0|                return true;
   70|      0|            default:
   71|      0|                PHI_ASSERT_NOT_REACHED();
   72|      0|                break;
   73|      0|        }
   74|      0|
   75|      0|        PHI_ASSERT_NOT_REACHED();
   76|      0|        return false;
   77|      0|    }
   78|       |
   79|       |    phi::Boolean operator!=(const InstructionArg& lhs, const InstructionArg& rhs)
   80|      0|    {
   81|      0|        return !(lhs == rhs);
   82|      0|    }
   83|       |
   84|       |    InstructionArg ConstructInstructionArgRegisterInt(IntRegisterID id)
   85|  1.28k|    {
   86|  1.28k|        InstructionArg arg;
   87|  1.28k|        arg.m_Type                   = ArgumentType::IntRegister;
   88|  1.28k|        arg.register_int.register_id = id;
   89|  1.28k|        return arg;
   90|  1.28k|    }
   91|       |
   92|       |    InstructionArg ConstructInstructionArgImmediateValue(phi::i32 value)
   93|    248|    {
   94|    248|        InstructionArg arg;
   95|    248|        arg.m_Type                       = ArgumentType::ImmediateInteger;
   96|    248|        arg.immediate_value.signed_value = value;
   97|    248|        return arg;
   98|    248|    }
   99|       |
  100|       |    InstructionArg ConstructInstructionArgAddressDisplacement(IntRegisterID id,
  101|       |                                                              phi::i32      displacement)
  102|    125|    {
  103|    125|        InstructionArg arg;
  104|    125|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  105|    125|        arg.address_displacement.register_id  = id;
  106|    125|        arg.address_displacement.displacement = displacement;
  107|    125|        return arg;
  108|    125|    }
  109|       |
  110|       |    InstructionArg ConstructInstructionArgLabel(std::string_view label_name)
  111|     75|    {
  112|     75|        InstructionArg arg;
  113|     75|        arg.m_Type           = ArgumentType::Label;
  114|     75|        arg.label.label_name = label_name;
  115|     75|        return arg;
  116|     75|    }
  117|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/RegisterNames.cpp:
    1|       |#include "DLX/RegisterNames.hpp"
    2|       |
    3|       |#include "DLX/Containers/LookUpMap.hpp"
    4|       |#include <algorithm>
    5|       |#include <cctype>
    6|       |
    7|       |namespace dlx
    8|       |{
    9|       |    static constexpr std::array<std::pair<std::string_view, IntRegisterID>, 32> RegisterValues{
   10|       |            {{"R0", IntRegisterID::R0},   {"R1", IntRegisterID::R1},   {"R2", IntRegisterID::R2},
   11|       |             {"R3", IntRegisterID::R3},   {"R4", IntRegisterID::R4},   {"R5", IntRegisterID::R5},
   12|       |             {"R6", IntRegisterID::R6},   {"R7", IntRegisterID::R7},   {"R8", IntRegisterID::R8},
   13|       |             {"R9", IntRegisterID::R9},   {"R10", IntRegisterID::R10}, {"R11", IntRegisterID::R11},
   14|       |             {"R12", IntRegisterID::R12}, {"R13", IntRegisterID::R13}, {"R14", IntRegisterID::R14},
   15|       |             {"R15", IntRegisterID::R15}, {"R16", IntRegisterID::R16}, {"R17", IntRegisterID::R17},
   16|       |             {"R18", IntRegisterID::R18}, {"R19", IntRegisterID::R19}, {"R20", IntRegisterID::R20},
   17|       |             {"R21", IntRegisterID::R21}, {"R22", IntRegisterID::R22}, {"R23", IntRegisterID::R23},
   18|       |             {"R24", IntRegisterID::R24}, {"R25", IntRegisterID::R25}, {"R26", IntRegisterID::R26},
   19|       |             {"R27", IntRegisterID::R27}, {"R28", IntRegisterID::R28}, {"R29", IntRegisterID::R29},
   20|       |             {"R30", IntRegisterID::R30}, {"R31", IntRegisterID::R31}}};
   21|       |
   22|       |    IntRegisterID StringToIntRegister(std::string token)
   23|  1.55k|    {
   24|  1.55k|        std::transform(token.begin(), token.end(), token.begin(), ::toupper);
   25|  1.55k|
   26|  1.55k|        static constexpr auto map =
   27|  1.55k|                LookUpMap<std::string_view, IntRegisterID, RegisterValues.size()>(RegisterValues, IntRegisterID::None);
   28|  1.55k|
   29|  1.55k|        return map.at(token.c_str());
   30|  1.55k|    }
   31|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/OpCode.cpp:
    1|       |#include "DLX/OpCode.hpp"
    2|       |
    3|       |#include <algorithm>
    4|       |#include <magic_enum.hpp>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    OpCode StringToOpCode(std::string token)
    9|  17.2k|    {
   10|  17.2k|        std::transform(token.begin(), token.end(), token.begin(), ::toupper);
   11|  17.2k|        std::optional<OpCode> opcode_casted = magic_enum::enum_cast<OpCode>(token);
   12|  17.2k|        if (opcode_casted.has_value())
   13|    984|        {
   14|    984|            // TODO: Bit of a hacky way around magic_enum begin able to cast every member...
   15|    984|            if (opcode_casted.value() == OpCode::NUMBER_OF_ELEMENTS)
   16|      1|            {
   17|      1|                return OpCode::NONE;
   18|      1|            }
   19|    983|            return opcode_casted.value();
   20|    983|        }
   21|  16.2k|
   22|  16.2k|        // None found
   23|  16.2k|        return OpCode::NONE;
   24|  16.2k|    }
   25|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Processor.cpp:
    1|       |#include "DLX/Processor.hpp"
    2|       |
    3|       |#include "DLX/Parser.hpp"
    4|       |
    5|       |namespace dlx
    6|       |{
    7|       |    Processor::Processor()
    8|       |        : m_MemoryBlock(1000u, 1000u)
    9|     57|    {
   10|     57|        // Mark R0 as ready only
   11|     57|        m_IntRegisters.at(0).SetReadOnly(true);
   12|     57|    }
   13|       |
   14|       |    IntRegister& Processor::GetIntRegister(IntRegisterID id)
   15|  17.5k|    {
   16|  17.5k|        PHI_ASSERT(id != IntRegisterID::None);
   17|  17.5k|        std::underlying_type_t<IntRegisterID> id_value =
   18|  17.5k|                static_cast<std::underlying_type_t<IntRegisterID>>(id);
   19|  17.5k|
   20|  17.5k|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
   21|  17.5k|
   22|  17.5k|        return m_IntRegisters.at(id_value);
   23|  17.5k|    }
   24|       |
   25|       |    const IntRegister& Processor::GetIntRegister(IntRegisterID id) const
   26|  32.5k|    {
   27|  32.5k|        PHI_ASSERT(id != IntRegisterID::None);
   28|  32.5k|        std::underlying_type_t<IntRegisterID> id_value =
   29|  32.5k|                static_cast<std::underlying_type_t<IntRegisterID>>(id);
   30|  32.5k|
   31|  32.5k|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
   32|  32.5k|
   33|  32.5k|        return m_IntRegisters.at(id_value);
   34|  32.5k|    }
   35|       |
   36|       |    phi::i32 Processor::IntRegisterGetSignedValue(IntRegisterID id) const
   37|  32.5k|    {
   38|  32.5k|        return GetIntRegister(id).GetSignedValue();
   39|  32.5k|    }
   40|       |
   41|       |    phi::u32 Processor::IntRegisterGetUnsignedValue(IntRegisterID id) const
   42|      9|    {
   43|      9|        return GetIntRegister(id).GetUnsignedValue();
   44|      9|    }
   45|       |
   46|       |    void Processor::IntRegisterSetSignedValue(IntRegisterID id, phi::i32 value)
   47|  17.5k|    {
   48|  17.5k|        IntRegister& reg = GetIntRegister(id);
   49|  17.5k|
   50|  17.5k|        if (reg.IsReadOnly())
   51|  2.50k|        {
   52|  2.50k|            return;
   53|  2.50k|        }
   54|  15.0k|
   55|  15.0k|        reg.SetSignedValue(value);
   56|  15.0k|    }
   57|       |
   58|       |    void Processor::IntRegisterSetUnsignedValue(IntRegisterID id, phi::u32 value)
   59|      6|    {
   60|      6|        IntRegister& reg = GetIntRegister(id);
   61|      6|
   62|      6|        if (reg.IsReadOnly())
   63|      4|        {
   64|      4|            return;
   65|      4|        }
   66|      2|
   67|      2|        reg.SetUnsignedValue(value);
   68|      2|    }
   69|       |
   70|       |    void Processor::ExecuteInstruction(const Instruction& inst)
   71|  30.0k|    {
   72|  30.0k|        inst.Execute(*this);
   73|  30.0k|    }
   74|       |
   75|       |    void Processor::LoadProgram(ParsedProgram* programm)
   76|     57|    {
   77|     57|        m_CurrentProgram = programm;
   78|     57|
   79|     57|        m_ProgramCounter = 0u;
   80|     57|        m_Halted         = false;
   81|     57|    }
   82|       |
   83|       |    phi::ObserverPtr<ParsedProgram> Processor::GetCurrentProgramm() const noexcept
   84|  12.5k|    {
   85|  12.5k|        return m_CurrentProgram;
   86|  12.5k|    }
   87|       |
   88|       |    void Processor::ExecuteCurrentProgram()
   89|     57|    {
   90|     57|        PHI_ASSERT(m_CurrentProgram);
   91|     57|
   92|     57|        // Don't execute a program with parsing errors
   93|     57|        if (!m_CurrentProgram->m_ParseErrors.empty())
   94|     30|        {
   95|     30|            return;
   96|     30|        }
   97|     27|
   98|     27|        m_ProgramCounter      = 0u;
   99|     27|        m_Halted              = false;
  100|     27|        m_LastRaisedException = Exception::None;
  101|     27|
  102|     27|        phi::usize StepCount{0u};
  103|     27|
  104|  30.0k|        while (m_ProgramCounter < m_CurrentProgram->m_Instructions.size() && !m_Halted &&
  105|  30.0k|               (m_MaxNumberOfSteps != 0u && StepCount < m_MaxNumberOfSteps))
  106|  30.0k|        {
  107|  30.0k|            m_NextProgramCounter = m_ProgramCounter + 1u;
  108|  30.0k|
  109|  30.0k|            const auto& current_instruction =
  110|  30.0k|                    m_CurrentProgram->m_Instructions.at(m_ProgramCounter.get());
  111|  30.0k|            ExecuteInstruction(current_instruction);
  112|  30.0k|
  113|  30.0k|            m_ProgramCounter = m_NextProgramCounter;
  114|  30.0k|
  115|  30.0k|            ++StepCount;
  116|  30.0k|        }
  117|     27|    }
  118|       |
  119|       |    void Processor::ClearRegisters()
  120|     57|    {
  121|     57|        for (auto& reg : m_IntRegisters)
  122|  1.82k|        {
  123|  1.82k|            reg.SetSignedValue(0);
  124|  1.82k|        }
  125|     57|    }
  126|       |
  127|       |    void Processor::ClearMemory()
  128|     57|    {
  129|     57|        m_MemoryBlock.Clear();
  130|     57|    }
  131|       |
  132|       |    void Processor::Raise(Exception exception)
  133|      6|    {
  134|      6|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  135|      6|
  136|      6|        m_LastRaisedException = exception;
  137|      6|
  138|      6|        switch (exception)
  139|      6|        {
  140|      1|            case Exception::DivideByZero:
  141|      1|                m_Halted = true;
  142|      1|                PHI_LOG_ERROR("Division through zero");
  143|      1|                return;
  144|      0|            case Exception::Overflow:
  145|      0|                PHI_LOG_WARN("Overflow");
  146|      0|                return;
  147|      0|            case Exception::Underflow:
  148|      0|                PHI_LOG_WARN("Underflow");
  149|      0|                return;
  150|      1|            case Exception::Trap:
  151|      1|                m_Halted = true;
  152|      1|                PHI_LOG_ERROR("Trapped");
  153|      1|                return;
  154|      0|            case Exception::Halt:
  155|      0|                m_Halted = true;
  156|      0|                return;
  157|      3|            case Exception::UnknownLabel:
  158|      3|                m_Halted = true;
  159|      3|                PHI_LOG_ERROR("Unknown label");
  160|      3|                return;
  161|      0|            case Exception::BadShift:
  162|      0|                PHI_LOG_ERROR("Bad shift");
  163|      0|                return;
  164|      1|            case Exception::AddressOutOfBounds:
  165|      1|                PHI_LOG_ERROR("Address out of bounds");
  166|      1|                m_Halted = true;
  167|      1|                return;
  168|      0|        }
  169|      0|
  170|      0|        PHI_ASSERT_NOT_REACHED();
  171|      0|    }
  172|       |
  173|       |    Exception Processor::GetLastRaisedException() const noexcept
  174|      0|    {
  175|      0|        return m_LastRaisedException;
  176|      0|    }
  177|       |
  178|       |    [[nodiscard]] phi::Boolean Processor::IsHalted() const noexcept
  179|      0|    {
  180|      0|        return m_Halted;
  181|      0|    }
  182|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Parser.cpp:
    1|       |#include "DLX/Parser.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/RegisterNames.hpp"
    5|       |#include <Phi/Config/FunctionLikeMacro.hpp>
    6|       |#include <Phi/Core/Conversion.hpp>
    7|       |#include <Phi/Core/Log.hpp>
    8|       |#include <magic_enum.hpp>
    9|       |#include <algorithm>
   10|       |#include <optional>
   11|       |
   12|       |using namespace phi::literals;
   13|       |
   14|       |namespace dlx
   15|       |{
   16|       |    phi::Boolean CharIsValidForIdentifer(const char c)
   17|    397|    {
   18|    397|        if (std::isalpha(c) || std::isdigit(c))
   19|    370|        {
   20|    370|            return true;
   21|    370|        }
   22|     27|
   23|     27|        switch (c)
   24|     27|        {
   25|     25|            case '_':
   26|     25|                return true;
   27|      0|
   28|      2|            default:
   29|      2|                return false;
   30|     27|        }
   31|     27|    }
   32|       |
   33|       |    static phi::Boolean is_integer_literal(std::string_view token)
   34|  22.4k|    {
   35|  22.4k|        if (token.length() == 0)
   36|      0|        {
   37|      0|            return false;
   38|      0|        }
   39|  22.4k|
   40|  22.4k|        // First character need to a plus sign a minus sign or a digit but only if theres a digit after that
   41|  22.4k|        if (!std::isdigit(token.at(0)) &&
   42|  22.4k|            !(token.length() > 1 && (token.at(0) == '+' || token.at(0) == '-')))
   43|  15.7k|        {
   44|  15.7k|            return false;
   45|  15.7k|        }
   46|  6.75k|
   47|  6.75k|        // Check that the rest of the token is only made up of numbers
   48|  14.3k|        for (phi::usize i{1u}; i < token.length(); ++i)
   49|  13.9k|        {
   50|  13.9k|            if (!std::isdigit(token.at(i.get())))
   51|  6.33k|            {
   52|  6.33k|                return false;
   53|  6.33k|            }
   54|  13.9k|        }
   55|  6.75k|
   56|  6.75k|        return true;
   57|  6.75k|    }
   58|       |
   59|       |    Token ParseToken(std::string_view token, phi::u64 line_number, phi::u64 column)
   60|  24.1k|    {
   61|  24.1k|        if (token.at(0) == '#' && token.size() > 1)
   62|    554|        {
   63|    554|            return Token(Token::Type::ImmediateInteger, token, line_number, column);
   64|    554|        }
   65|  23.5k|        else if (token.at(0) == '/' || token.at(0) == ';')
   66|  1.08k|        {
   67|  1.08k|            return Token(Token::Type::Comment, token, line_number, column);
   68|  1.08k|        }
   69|  22.4k|        else if (is_integer_literal(token))
   70|    424|        {
   71|    424|            return Token(Token::Type::IntegerLiteral, token, line_number, column);
   72|    424|        }
   73|  22.0k|
   74|  22.0k|        return Token(Token::Type::Identifier, token, line_number, column);
   75|  22.0k|    }
   76|       |
   77|       |    std::vector<Token> Parser::Tokenize(std::string_view str)
   78|     57|    {
   79|     57|        std::vector<Token> tokens{};
   80|     57|        tokens.reserve(5);
   81|     57|
   82|     57|        std::string current_token;
   83|     57|        current_token.reserve(10);
   84|     57|
   85|     57|        phi::u64 current_line_number{1u};
   86|     57|        phi::u64 token_begin{0u};
   87|     57|
   88|     57|        phi::Boolean parsing_comment{false};
   89|     57|
   90|   886k|        for (phi::usize i{0u}; i < str.length(); ++i)
   91|   886k|        {
   92|   886k|            const char c{str.at(i.get())};
   93|   886k|
   94|   886k|            if (c == '\n')
   95|  5.98k|            {
   96|  5.98k|                if (current_token.empty())
   97|    993|                {
   98|    993|                    tokens.emplace_back(Token::Type::NewLine, str.substr(token_begin.get(), 1),
   99|    993|                                        current_line_number, token_begin);
  100|    993|                    // Skip empty lines
  101|    993|                    continue;
  102|    993|                }
  103|  4.99k|
  104|  4.99k|                // Otherwise a new line separates tokens
  105|  4.99k|                tokens.emplace_back(
  106|  4.99k|                        ParseToken(str.substr(token_begin.get(), current_token.length()),
  107|  4.99k|                                   current_line_number, token_begin));
  108|  4.99k|
  109|  4.99k|                token_begin = i;
  110|  4.99k|
  111|  4.99k|                tokens.emplace_back(Token::Type::NewLine, str.substr(token_begin.get(), 1),
  112|  4.99k|                                    current_line_number, token_begin);
  113|  4.99k|
  114|  4.99k|                current_token.clear();
  115|  4.99k|                parsing_comment = false;
  116|  4.99k|                current_line_number += 1u;
  117|  4.99k|            }
  118|   880k|            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  119|   880k|            else if (c == '/' || c == ';')
  120|  31.5k|            {
  121|  31.5k|                if (current_token.empty())
  122|  1.08k|                {
  123|  1.08k|                    token_begin = i;
  124|  1.08k|                }
  125|  31.5k|
  126|  31.5k|                parsing_comment = true;
  127|  31.5k|                current_token.push_back(c);
  128|  31.5k|            }
  129|   849k|            else if (parsing_comment)
  130|   642k|            {
  131|   642k|                // simply append the character
  132|   642k|                current_token.push_back(c);
  133|   642k|            }
  134|   206k|            else
  135|   206k|            {
  136|   206k|                // Not parsing a comment
  137|   206k|
  138|   206k|                switch (c)
  139|   206k|                {
  140|  69.5k|                    case ' ':
  141|  69.5k|                    case '\t':
  142|  69.5k|                    case '\v':
  143|  69.5k|                        if (current_token.empty())
  144|  57.9k|                        {
  145|  57.9k|                            // We haven't found any usable character for the current token so just skip the whitespace.
  146|  57.9k|                            continue;
  147|  57.9k|                        }
  148|  11.5k|
  149|  11.5k|                        // Otherwise a whitespace separates tokens
  150|  11.5k|                        tokens.push_back(
  151|  11.5k|                                ParseToken(str.substr(token_begin.get(), current_token.length()),
  152|  11.5k|                                           current_line_number, token_begin));
  153|  11.5k|                        current_token.clear();
  154|  11.5k|                        break;
  155|  11.5k|                    case ':':
  156|  4.67k|                        // Need to parse label names together with their colon
  157|  4.67k|                        if (!current_token.empty())
  158|  3.30k|                        {
  159|  3.30k|                            current_token.push_back(c);
  160|  3.30k|                            tokens.emplace_back(ParseToken(
  161|  3.30k|                                    str.substr(token_begin.get(), current_token.length()),
  162|  3.30k|                                    current_line_number, token_begin));
  163|  3.30k|
  164|  3.30k|                            current_token.clear();
  165|  3.30k|                        }
  166|  1.36k|                        else
  167|  1.36k|                        {
  168|  1.36k|                            // Orphan colon
  169|  1.36k|                            token_begin = i;
  170|  1.36k|
  171|  1.36k|                            tokens.emplace_back(Token::Type::Colon,
  172|  1.36k|                                                str.substr(token_begin.get(), 1),
  173|  1.36k|                                                current_line_number, token_begin);
  174|  1.36k|                            break;
  175|  1.36k|                        }
  176|  3.30k|                        break;
  177|  5.79k|                    case ',':
  178|  5.79k|                    case '(':
  179|  5.79k|                    case ')':
  180|  5.79k|                        if (!current_token.empty())
  181|  4.18k|                        {
  182|  4.18k|                            tokens.emplace_back(ParseToken(
  183|  4.18k|                                    str.substr(token_begin.get(), current_token.length()),
  184|  4.18k|                                    current_line_number, token_begin));
  185|  4.18k|
  186|  4.18k|                            current_token.clear();
  187|  4.18k|                        }
  188|  5.79k|
  189|  5.79k|                        Token::Type type;
  190|  5.79k|                        switch (c)
  191|  5.79k|                        {
  192|  1.84k|                            case ',':
  193|  1.84k|                                type = Token::Type::Comma;
  194|  1.84k|                                break;
  195|  1.98k|                            case '(':
  196|  1.98k|                                type = Token::Type::OpenBracket;
  197|  1.98k|                                break;
  198|  1.95k|                            case ')':
  199|  1.95k|                                type = Token::Type::ClosingBracket;
  200|  1.95k|                                break;
  201|  5.79k|                        }
  202|  5.79k|
  203|  5.79k|                        token_begin = i;
  204|  5.79k|
  205|  5.79k|                        tokens.emplace_back(type, str.substr(token_begin.get(), 1),
  206|  5.79k|                                            current_line_number, token_begin);
  207|  5.79k|                        break;
  208|  5.79k|
  209|   126k|                    default:
  210|   126k|                        if (current_token.empty())
  211|  23.0k|                        {
  212|  23.0k|                            token_begin = i;
  213|  23.0k|                        }
  214|   126k|
  215|   126k|                        // simply append the character
  216|   126k|                        current_token.push_back(c);
  217|   206k|                }
  218|   206k|            }
  219|   886k|        }
  220|     57|
  221|     57|        // Checked the entire string. Parse whats left if anything
  222|     57|        if (!current_token.empty())
  223|     24|        {
  224|     24|            tokens.emplace_back(ParseToken(str.substr(token_begin.get(), current_token.length()),
  225|     24|                                           current_line_number, token_begin));
  226|     24|        }
  227|     57|
  228|     57|        return tokens;
  229|     57|    }
  230|       |
  231|       |    static phi::Boolean has_x_more_tokens(const std::vector<Token>& tokens, phi::usize index,
  232|       |                                          phi::u64 x)
  233|  2.47k|    {
  234|  2.47k|        return index + x <= tokens.size();
  235|  2.47k|    }
  236|       |
  237|       |    static phi::Boolean has_one_more_token(const std::vector<Token>& tokens, phi::usize index)
  238|  2.34k|    {
  239|  2.34k|        return has_x_more_tokens(tokens, index, 1u);
  240|  2.34k|    }
  241|       |
  242|       |    static phi::Boolean next_token_is(const std::vector<Token>& tokens, phi::usize index,
  243|       |                                      Token::Type token_type)
  244|      0|    {
  245|      0|        PHI_ASSERT(has_one_more_token(tokens, index));
  246|      0|
  247|      0|        const auto& next_token = tokens.at((index + 1u).get());
  248|      0|
  249|      0|        return next_token.GetType() == token_type;
  250|      0|    }
  251|       |
  252|       |    static phi::Boolean has_one_more_token_of_type(const std::vector<Token>& tokens,
  253|       |                                                   phi::usize index, Token::Type token_type)
  254|      0|    {
  255|      0|        if (!has_one_more_token(tokens, index))
  256|      0|        {
  257|      0|            return false;
  258|      0|        }
  259|      0|
  260|      0|        return (next_token_is(tokens, index, token_type));
  261|      0|    }
  262|       |
  263|       |    static void AddParseError(ParsedProgram& program, const std::string& message)
  264|  23.7k|    {
  265|  23.7k|        ParseError err;
  266|  23.7k|        err.message = message;
  267|  23.7k|
  268|  23.7k|        PHI_LOG_ERROR("Parsing error: {}", message);
  269|  23.7k|
  270|  23.7k|        program.m_ParseErrors.emplace_back(err);
  271|  23.7k|    }
  272|       |
  273|       |    static std::optional<InstructionArg> parse_instruction_argument(
  274|       |            const Token& token, ArgumentType expected_argument_type,
  275|       |            const std::vector<Token>& tokens, phi::usize& index, ParsedProgram& program)
  276|  1.92k|    {
  277|  1.92k|        PHI_LOG_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
  278|  1.92k|                     magic_enum::enum_name(expected_argument_type));
  279|  1.92k|
  280|  1.92k|        switch (token.GetType())
  281|  1.92k|        {
  282|    127|            case Token::Type::IntegerLiteral: {
  283|    127|                if (!ArgumentTypeIncludes(expected_argument_type,
  284|    127|                                          ArgumentType::AddressDisplacement))
  285|      2|                {
  286|      2|                    AddParseError(program,
  287|      2|                                  fmt::format("Expected {} but got address displacement",
  288|      2|                                              magic_enum::enum_name(expected_argument_type)));
  289|      2|                    return {};
  290|      2|                }
  291|    125|
  292|    125|                // Parse address displacement
  293|    125|                std::int32_t displacement_value{0};
  294|    125|                try
  295|    125|                {
  296|    125|                    displacement_value = std::stoi(token.GetTextString());
  297|    125|                }
  298|    125|                catch (std::invalid_argument& /*e*/)
  299|    125|                {
  300|      0|                    AddParseError(program,
  301|      0|                                  "Failed to parse displacement value for Address displacement");
  302|      0|                    return {};
  303|      0|                }
  304|      0|                catch (std::out_of_range& /*e*/)
  305|      0|                {
  306|      0|                    AddParseError(program, "Value is out of range");
  307|      0|                    return {};
  308|      0|                }
  309|    125|
  310|    125|                if (!has_x_more_tokens(tokens, index, 3u))
  311|      0|                {
  312|      0|                    AddParseError(program,
  313|      0|                                  "Not enough arguments left to parse address displacement");
  314|      0|                    return {};
  315|      0|                }
  316|    125|
  317|    125|                const Token& first_token  = tokens.at(index.get());
  318|    125|                const Token& second_token = tokens.at((index + 1u).get());
  319|    125|                const Token& third_token  = tokens.at((index + 2u).get());
  320|    125|
  321|    125|                if (first_token.GetType() != Token::Type::OpenBracket)
  322|      0|                {
  323|      0|                    AddParseError(program, "Expected open bracket");
  324|      0|                    return {};
  325|      0|                }
  326|    125|
  327|    125|                // Second token is the address
  328|    125|                IntRegisterID reg_id = StringToIntRegister(
  329|    125|                        {second_token.GetText().data(), second_token.GetText().size()});
  330|    125|
  331|    125|                if (reg_id == IntRegisterID::None)
  332|      0|                {
  333|      0|                    AddParseError(program, "Expected IntRegister");
  334|      0|                    return {};
  335|      0|                }
  336|    125|
  337|    125|                if (third_token.GetType() != Token::Type::ClosingBracket)
  338|      0|                {
  339|      0|                    AddParseError(program, "Expected closing bracket");
  340|      0|                    return {};
  341|      0|                }
  342|    125|
  343|    125|                index += 3u;
  344|    125|
  345|    125|                PHI_LOG_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
  346|    125|                             displacement_value, magic_enum::enum_name(reg_id));
  347|    125|
  348|    125|                return ConstructInstructionArgAddressDisplacement(reg_id, displacement_value);
  349|    125|            }
  350|  1.42k|            case Token::Type::Identifier: {
  351|  1.42k|                IntRegisterID reg_id = StringToIntRegister(token.GetTextString());
  352|  1.42k|
  353|  1.42k|                if (reg_id != IntRegisterID::None)
  354|  1.28k|                {
  355|  1.28k|                    if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  356|      3|                    {
  357|      3|                        AddParseError(program,
  358|      3|                                      fmt::format("Got IntRegister but expected '{}'",
  359|      3|                                                  magic_enum::enum_name(expected_argument_type)));
  360|      3|                        return {};
  361|      3|                    }
  362|  1.28k|
  363|  1.28k|                    PHI_LOG_INFO("Parsed identifier as int register {}",
  364|  1.28k|                                 magic_enum::enum_name(reg_id));
  365|  1.28k|
  366|  1.28k|                    return ConstructInstructionArgRegisterInt(reg_id);
  367|  1.28k|                }
  368|    141|
  369|    141|                // Parse as Label
  370|    141|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  371|     64|                {
  372|     64|                    AddParseError(program,
  373|     64|                                  fmt::format("Got Label but expected '{}'",
  374|     64|                                              magic_enum::enum_name(expected_argument_type)));
  375|     64|                    return {};
  376|     64|                }
  377|     77|
  378|     77|                if (!std::all_of(token.GetText().begin(), token.GetText().end(),
  379|     77|                                 CharIsValidForIdentifer))
  380|      2|                {
  381|      2|                    AddParseError(program, fmt::format("Invalid label identifier found {}",
  382|      2|                                                       token.GetText()));
  383|      2|                    return {};
  384|      2|                }
  385|     75|
  386|     75|                PHI_LOG_INFO("Parsed Label identifier as '{}'", token.GetText());
  387|     75|
  388|     75|                return ConstructInstructionArgLabel(token.GetText());
  389|     75|            }
  390|    248|            case Token::Type::ImmediateInteger: {
  391|    248|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  392|      0|                {
  393|      0|                    AddParseError(program,
  394|      0|                                  fmt::format("Got ImmediateInteger but expected '{}'",
  395|      0|                                              magic_enum::enum_name(expected_argument_type)));
  396|      0|                    return {};
  397|      0|                }
  398|    248|
  399|    248|                std::int32_t value{0};
  400|    248|                try
  401|    248|                {
  402|    248|                    value = std::stoi(token.GetTextString().substr(1));
  403|    248|                }
  404|    248|                catch (std::invalid_argument& /*e*/)
  405|    248|                {
  406|      0|                    AddParseError(program, "Failed to parse immediate Integer value");
  407|      0|                    return {};
  408|      0|                }
  409|      0|                catch (std::out_of_range& /*e*/)
  410|      0|                {
  411|      0|                    AddParseError(program, "Value is out of range");
  412|      0|                    return {};
  413|      0|                }
  414|    248|
  415|    248|                PHI_LOG_INFO("Parsed Immediate Integer with value {}", value);
  416|    248|
  417|    248|                return ConstructInstructionArgImmediateValue(value);
  418|    248|            }
  419|    248|            default:
  420|    122|                AddParseError(program,
  421|    122|                              fmt::format("Unexpected token of type '{}'", token.GetTypeName()));
  422|    122|                return {};
  423|  1.92k|        }
  424|  1.92k|    }
  425|       |
  426|       |    static void consume_x_tokens(phi::usize& index, phi::usize x)
  427|  36.8k|    {
  428|  36.8k|        index += x;
  429|  36.8k|    }
  430|       |
  431|       |    static void consume_current_token(phi::usize& index)
  432|  36.8k|    {
  433|  36.8k|        consume_x_tokens(index, 1u);
  434|  36.8k|    }
  435|       |
  436|       |    ParsedProgram Parser::Parse(const InstructionLibrary& lib, std::vector<Token>& tokens)
  437|     57|    {
  438|     57|        ParsedProgram program;
  439|     57|
  440|     57|        phi::Boolean line_has_instruction{false};
  441|     57|
  442|  34.5k|        for (phi::usize index{0u}; index < tokens.size();)
  443|  34.5k|        {
  444|  34.5k|            Token& current_token = tokens.at(index.get());
  445|  34.5k|
  446|  34.5k|            consume_current_token(index);
  447|  34.5k|
  448|  34.5k|            PHI_LOG_INFO("Parsing '{}'", current_token.DebugInfo());
  449|  34.5k|
  450|  34.5k|            switch (current_token.GetType())
  451|  34.5k|            {
  452|      0|                // Ignore comments
  453|  1.08k|                case Token::Type::Comment:
  454|  1.08k|                    PHI_LOG_DEBUG("Ignoring comment");
  455|  1.08k|                    break;
  456|  5.97k|                case Token::Type::NewLine:
  457|  5.97k|                    PHI_LOG_DEBUG("Ignoring newline");
  458|  5.97k|                    line_has_instruction = false;
  459|  5.97k|                    break;
  460|  20.5k|                case Token::Type::Identifier: {
  461|  20.5k|                    if (line_has_instruction)
  462|     27|                    {
  463|     27|                        AddParseError(program, "Expected new line but got identifer");
  464|     27|                        break;
  465|     27|                    }
  466|  20.4k|
  467|  20.4k|                    // Handle jump labels
  468|  20.4k|                    // Check if the last character of the identifier is a colon
  469|  20.4k|                    if (current_token.GetText().at(current_token.GetText().size() - 1) == ':')
  470|  3.25k|                    {
  471|  3.25k|                        std::string label_name = current_token.GetTextString().substr(
  472|  3.25k|                                0, current_token.GetText().size() - 1);
  473|  3.25k|
  474|  3.25k|                        program.m_JumpData[label_name] = program.m_Instructions.size();
  475|  3.25k|
  476|  3.25k|                        PHI_LOG_INFO("Added jump label {} -> {}", label_name,
  477|  3.25k|                                     program.m_Instructions.size());
  478|  3.25k|                        break;
  479|  3.25k|                    }
  480|  17.2k|
  481|  17.2k|                    // Handle normal instructions
  482|  17.2k|                    // First we need to parse the instruction itself so we know how many arguments it expects
  483|  17.2k|                    OpCode opcode = StringToOpCode(current_token.GetTextString());
  484|  17.2k|
  485|  17.2k|                    if (opcode == OpCode::NONE)
  486|  16.3k|                    {
  487|  16.3k|                        AddParseError(program,
  488|  16.3k|                                      fmt::format("Failed to parse instruction '{}' not found.",
  489|  16.3k|                                                  current_token.GetText()));
  490|  16.3k|                        break;
  491|  16.3k|                    }
  492|    912|
  493|    912|                    PHI_LOG_INFO("Instruction opcode: {}", magic_enum::enum_name(opcode));
  494|    912|
  495|    912|                    const InstructionInfo& info = lib.LookUp(opcode);
  496|    912|
  497|    912|                    // Make sure we got no problems here
  498|    912|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  499|    912|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  500|    912|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  501|    912|                    PHI_ASSERT(info.GetExecutor());
  502|    912|
  503|    912|                    phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  504|    912|                    PHI_LOG_INFO("Instruction requires {} arguments",
  505|    912|                                 number_of_argument_required.get());
  506|    912|
  507|    912|                    // Create instruction
  508|    912|                    Instruction instruction(info);
  509|    912|
  510|    912|                    // Parse arguments
  511|  3.05k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  512|  2.34k|                    {
  513|  2.34k|                        // Get next token
  514|  2.34k|                        if (!has_one_more_token(tokens, index))
  515|      1|                        {
  516|      1|                            AddParseError(
  517|      1|                                    program,
  518|      1|                                    fmt::format("Missing {} arguments for instruction {}",
  519|      1|                                                (number_of_argument_required - argument_num).get(),
  520|      1|                                                magic_enum::enum_name(opcode)));
  521|      1|                            break;
  522|      1|                        }
  523|  2.34k|
  524|  2.34k|                        current_token = tokens.at(index.get());
  525|  2.34k|                        consume_current_token(index);
  526|  2.34k|
  527|  2.34k|                        // Skip commas
  528|  2.34k|                        if (current_token.GetType() == Token::Type::Comma)
  529|    417|                        {
  530|    417|                            PHI_LOG_DEBUG("Skipping comma");
  531|    417|                            continue;
  532|    417|                        }
  533|  1.92k|
  534|  1.92k|                        if (current_token.GetType() == Token::Type::NewLine)
  535|      6|                        {
  536|      6|                            AddParseError(program, "Unexpected end of line");
  537|      6|                            break;
  538|      6|                        }
  539|  1.92k|
  540|  1.92k|                        std::optional<InstructionArg> optional_parsed_argument =
  541|  1.92k|                                parse_instruction_argument(current_token,
  542|  1.92k|                                                           info.GetArgumentType(argument_num),
  543|  1.92k|                                                           tokens, index, program);
  544|  1.92k|                        if (!optional_parsed_argument.has_value())
  545|    193|                        {
  546|    193|                            AddParseError(program, fmt::format("Failed to parse argument number {}",
  547|    193|                                                               argument_num.get()));
  548|    193|                            break;
  549|    193|                        }
  550|  1.73k|
  551|  1.73k|                        // Successfully parsed one argument
  552|  1.73k|                        InstructionArg parsed_argument = optional_parsed_argument.value();
  553|  1.73k|
  554|  1.73k|                        instruction.SetArgument(argument_num, parsed_argument);
  555|  1.73k|                        argument_num++;
  556|  1.73k|
  557|  1.73k|                        PHI_LOG_INFO("Successfully parsed argument {}", argument_num.get());
  558|  1.73k|                    }
  559|    912|
  560|    912|                    // Only add the instruction if we got no parsing errors
  561|    912|                    if (program.m_ParseErrors.empty())
  562|    193|                    {
  563|    193|                        PHI_LOG_INFO("Successfully parsed instruction '{}'",
  564|    193|                                     instruction.DebugInfo());
  565|    193|                        program.m_Instructions.emplace_back(std::move(instruction));
  566|    193|                        line_has_instruction = true;
  567|    193|                    }
  568|    912|                    break;
  569|    912|                }
  570|    912|
  571|  6.97k|                default:
  572|  6.97k|                    AddParseError(program, "Unexpected token");
  573|  6.97k|                    break;
  574|  34.5k|            }
  575|  34.5k|        }
  576|     57|
  577|     57|        return program;
  578|     57|    }
  579|       |
  580|       |    ParsedProgram Parser::Parse(const InstructionLibrary& lib, std::string_view source)
  581|     57|    {
  582|     57|        std::vector<Token> tokens = Tokenize(source);
  583|     57|        return Parse(lib, tokens);
  584|     57|    }
  585|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionImplementation.cpp:
    1|       |#include "DLX/InstructionImplementation.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/Parser.hpp"
    5|       |#include "DLX/Processor.hpp"
    6|       |#include "DLX/RegisterNames.hpp"
    7|       |#include <string_view>
    8|       |
    9|       |namespace dlx
   10|       |{
   11|       |    static std::int32_t clear_top_n_bits(std::int32_t value, std::int32_t n)
   12|      0|    {
   13|      0|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behaviour");
   14|      0|
   15|      0|        return value & ~(-1 << (32 - n));
   16|      0|    }
   17|       |
   18|       |    static void JumpToLabel(Processor& processor, std::string_view label_name)
   19|  12.5k|    {
   20|  12.5k|        // Lookup the label
   21|  12.5k|        const phi::ObserverPtr<ParsedProgram> program = processor.GetCurrentProgramm();
   22|  12.5k|        PHI_ASSERT(program);
   23|  12.5k|
   24|  12.5k|        std::string label(label_name.data(), label_name.size());
   25|  12.5k|        if (program->m_JumpData.find(label) == program->m_JumpData.end())
   26|      3|        {
   27|      3|            PHI_LOG_ERROR("Unable to find jump label {}", label_name);
   28|      3|            processor.Raise(Exception::UnknownLabel);
   29|      3|            return;
   30|      3|        }
   31|  12.5k|
   32|  12.5k|        // Set program counter
   33|  12.5k|        processor.m_NextProgramCounter = program->m_JumpData.at(label);
   34|  12.5k|    }
   35|       |
   36|       |    static void JumpToRegister(Processor& processor, IntRegisterID reg_id)
   37|      0|    {
   38|      0|        phi::i32 address = processor.IntRegisterGetSignedValue(reg_id);
   39|      0|
   40|      0|        phi::i32 max_address =
   41|      0|                static_cast<std::int32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   42|      0|        if (address < 0 || address >= max_address)
   43|      0|        {
   44|      0|            processor.Raise(Exception::AddressOutOfBounds);
   45|      0|            return;
   46|      0|        }
   47|      0|
   48|      0|        processor.m_NextProgramCounter = static_cast<std::size_t>(address.get());
   49|      0|    }
   50|       |
   51|       |    static std::optional<phi::i32> CalculateDisplacementAddress(
   52|       |            Processor& processor, const InstructionArg::AddressDisplacement& adr_displacement)
   53|  2.50k|    {
   54|  2.50k|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   55|  2.50k|
   56|  2.50k|        phi::i32 address = adr_displacement.displacement + register_value;
   57|  2.50k|
   58|  2.50k|        if (address < 0)
   59|      0|        {
   60|      0|            processor.Raise(Exception::AddressOutOfBounds);
   61|      0|            return {};
   62|      0|        }
   63|  2.50k|
   64|  2.50k|        return address;
   65|  2.50k|    }
   66|       |
   67|       |    static std::optional<phi::i32> GetLoadStoreAddress(Processor&           processor,
   68|       |                                                       const InstructionArg argument)
   69|  2.50k|    {
   70|  2.50k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
   71|      0|        {
   72|      0|            const auto& imm_value = argument.AsImmediateValue();
   73|      0|
   74|      0|            if (imm_value.signed_value < 0)
   75|      0|            {
   76|      0|                return {};
   77|      0|            }
   78|      0|
   79|      0|            return imm_value.signed_value;
   80|      0|        }
   81|  2.50k|        else if (argument.GetType() == ArgumentType::AddressDisplacement)
   82|  2.50k|        {
   83|  2.50k|            const auto& adr_displacement = argument.AsAddressDisplacement();
   84|  2.50k|            return CalculateDisplacementAddress(processor, adr_displacement);
   85|  2.50k|        }
   86|      0|        else
   87|      0|        {
   88|      0|            PHI_ASSERT_NOT_REACHED();
   89|      0|        }
   90|  2.50k|    }
   91|       |
   92|       |    static void SafeWriteInteger(Processor& processor, IntRegisterID dest_reg, phi::i64 value)
   93|  2.51k|    {
   94|  2.51k|        constexpr phi::i64 min = phi::i32::limits_type::min();
   95|  2.51k|        constexpr phi::i64 max = phi::i32::limits_type::max();
   96|  2.51k|
   97|  2.51k|        // Check for underflow
   98|  2.51k|        if (value < min)
   99|      0|        {
  100|      0|            processor.Raise(Exception::Underflow);
  101|      0|
  102|      0|            value = max + (value % (min - 1));
  103|      0|        }
  104|  2.51k|        // Check for overflow
  105|  2.51k|        else if (value > max)
  106|      0|        {
  107|      0|            processor.Raise(Exception::Overflow);
  108|      0|
  109|      0|            value = min + (value % (max + 1));
  110|      0|        }
  111|  2.51k|
  112|  2.51k|        PHI_ASSERT(value >= min);
  113|  2.51k|        PHI_ASSERT(value <= max);
  114|  2.51k|
  115|  2.51k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.get()));
  116|  2.51k|    }
  117|       |
  118|       |    static void SafeWriteInteger(Processor& processor, IntRegisterID dest_reg, phi::u64 value)
  119|      6|    {
  120|      6|        constexpr phi::u64 min = phi::u32::limits_type::min();
  121|      6|        constexpr phi::u64 max = phi::u32::limits_type::max();
  122|      6|
  123|      6|        // Check for overflow
  124|      6|        if (value > max)
  125|      0|        {
  126|      0|            processor.Raise(Exception::Overflow);
  127|      0|
  128|      0|            value %= max + 1u;
  129|      0|        }
  130|      6|
  131|      6|        PHI_ASSERT(value <= max);
  132|      6|
  133|      6|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.get()));
  134|      6|    }
  135|       |
  136|       |    static void Addition(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs, phi::i32 rhs)
  137|  2.50k|    {
  138|  2.50k|        phi::i64 res = phi::i64(lhs) + rhs;
  139|  2.50k|
  140|  2.50k|        SafeWriteInteger(processor, dest_reg, res);
  141|  2.50k|    }
  142|       |
  143|       |    static void Addition(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs, phi::u32 rhs)
  144|      2|    {
  145|      2|        phi::u64 res = phi::u64(lhs) + rhs;
  146|      2|
  147|      2|        SafeWriteInteger(processor, dest_reg, res);
  148|      2|    }
  149|       |
  150|       |    static void Subtraction(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  151|       |                            phi::i32 rhs)
  152|      2|    {
  153|      2|        phi::i64 res = phi::i64(lhs) - rhs;
  154|      2|
  155|      2|        SafeWriteInteger(processor, dest_reg, res);
  156|      2|    }
  157|       |
  158|       |    static void Subtraction(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  159|       |                            phi::u32 rhs)
  160|      2|    {
  161|      2|        constexpr phi::u32 max = phi::u32::limits_type::max();
  162|      2|
  163|      2|        if (lhs < rhs)
  164|      0|        {
  165|      0|            processor.Raise(Exception::Underflow);
  166|      0|
  167|      0|            phi::u64 res = max - rhs + lhs + 1u;
  168|      0|            SafeWriteInteger(processor, dest_reg, res);
  169|      0|            return;
  170|      0|        }
  171|      2|
  172|      2|        phi::u64 res = phi::u64(lhs) - rhs;
  173|      2|
  174|      2|        SafeWriteInteger(processor, dest_reg, res);
  175|      2|    }
  176|       |
  177|       |    static void Multiplication(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  178|       |                               phi::i32 rhs)
  179|      2|    {
  180|      2|        phi::i64 res = phi::i64(lhs) * rhs;
  181|      2|
  182|      2|        SafeWriteInteger(processor, dest_reg, res);
  183|      2|    }
  184|       |
  185|       |    static void Multiplication(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  186|       |                               phi::u32 rhs)
  187|      2|    {
  188|      2|        phi::u64 res = phi::u64(lhs) * rhs;
  189|      2|
  190|      2|        SafeWriteInteger(processor, dest_reg, res);
  191|      2|    }
  192|       |
  193|       |    static void Division(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs, phi::i32 rhs)
  194|      1|    {
  195|      1|        if (rhs == 0)
  196|      1|        {
  197|      1|            processor.Raise(Exception::DivideByZero);
  198|      1|            return;
  199|      1|        }
  200|      0|
  201|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  202|      0|
  203|      0|        SafeWriteInteger(processor, dest_reg, res);
  204|      0|    }
  205|       |
  206|       |    static void Division(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs, phi::u32 rhs)
  207|      0|    {
  208|      0|        if (rhs == 0u)
  209|      0|        {
  210|      0|            processor.Raise(Exception::DivideByZero);
  211|      0|            return;
  212|      0|        }
  213|      0|
  214|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  215|      0|
  216|      0|        SafeWriteInteger(processor, dest_reg, res);
  217|      0|    }
  218|       |
  219|       |    static void ShiftRightLogical(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  220|       |                                  phi::i32 shift)
  221|      0|    {
  222|      0|        // Prevent undefined behavior by shifting by more than 31
  223|      0|        if (shift > 31)
  224|      0|        {
  225|      0|            processor.Raise(Exception::BadShift);
  226|      0|
  227|      0|            // Just set register to 0
  228|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  229|      0|            return;
  230|      0|        }
  231|      0|        else if (shift == 0)
  232|      0|        {
  233|      0|            // Do nothing when shifting by zero to prevent undefined behavior
  234|      0|            return;
  235|      0|        }
  236|      0|        else if (shift < 0)
  237|      0|        {
  238|      0|            processor.Raise(Exception::BadShift);
  239|      0|            return;
  240|      0|        }
  241|      0|
  242|      0|        phi::i32 new_value = base.get() >> shift.get();
  243|      0|
  244|      0|        new_value = clear_top_n_bits(new_value.get(), shift.get());
  245|      0|
  246|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  247|      0|    }
  248|       |
  249|       |    static void ShiftRightArithmetic(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  250|       |                                     phi::i32 shift)
  251|      0|    {
  252|      0|        // Prevent undefined behavior by shifting by more than 31
  253|      0|        if (shift > 31)
  254|      0|        {
  255|      0|            processor.Raise(Exception::BadShift);
  256|      0|
  257|      0|            // Is negative ie. sign bit is set
  258|      0|            if (base < 0)
  259|      0|            {
  260|      0|                // Set every byte to 1
  261|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  262|      0|            }
  263|      0|            else
  264|      0|            {
  265|      0|                // Set every byte to 0
  266|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  267|      0|            }
  268|      0|            return;
  269|      0|        }
  270|      0|        else if (shift < 0)
  271|      0|        {
  272|      0|            processor.Raise(Exception::BadShift);
  273|      0|            return;
  274|      0|        }
  275|      0|
  276|      0|        phi::i32 new_value = base.get() >> shift.get();
  277|      0|
  278|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  279|      0|    }
  280|       |
  281|       |    // Behavior is the same for logical and arithmetic shifts
  282|       |    static void ShiftLeft(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  283|       |                          phi::i32 shift)
  284|      1|    {
  285|      1|        if (shift > 31)
  286|      0|        {
  287|      0|            processor.Raise(Exception::BadShift);
  288|      0|
  289|      0|            // Just set register to 0
  290|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  291|      0|            return;
  292|      0|        }
  293|      1|        else if (shift < 0)
  294|      0|        {
  295|      0|            processor.Raise(Exception::BadShift);
  296|      0|            return;
  297|      0|        }
  298|      1|
  299|      1|        phi::i32 new_value = base.get() << shift.get();
  300|      1|
  301|      1|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  302|      1|    }
  303|       |
  304|       |    namespace impl
  305|       |    {
  306|       |        void ADD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  307|       |                 const InstructionArg& arg3)
  308|  2.50k|        {
  309|  2.50k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  310|  2.50k|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  311|  2.50k|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  312|  2.50k|
  313|  2.50k|            const auto& dest_reg = arg1.AsRegisterInt();
  314|  2.50k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  315|  2.50k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  316|  2.50k|
  317|  2.50k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  318|  2.50k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  319|  2.50k|
  320|  2.50k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  321|  2.50k|        }
  322|       |
  323|       |        void ADDI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  324|       |                  const InstructionArg& arg3)
  325|      1|        {
  326|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  327|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  328|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  329|      1|
  330|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  331|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  332|      1|            const auto& imm_value = arg3.AsImmediateValue();
  333|      1|
  334|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  335|      1|
  336|      1|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  337|      1|        }
  338|       |
  339|       |        void ADDU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  340|       |                  const InstructionArg& arg3)
  341|      1|        {
  342|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  343|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  344|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  345|      1|
  346|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  347|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  348|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  349|      1|
  350|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  351|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  352|      1|
  353|      1|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  354|      1|        }
  355|       |
  356|       |        void ADDUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  357|       |                   const InstructionArg& arg3)
  358|      1|        {
  359|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  360|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  361|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  362|      1|
  363|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  364|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  365|      1|            const auto& imm_value = arg3.AsImmediateValue();
  366|      1|
  367|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  368|      1|
  369|      1|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  370|      1|        }
  371|       |
  372|       |        void SUB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  373|       |                 const InstructionArg& arg3)
  374|      1|        {
  375|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  376|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  377|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  378|      1|
  379|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  380|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  381|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  382|      1|
  383|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  384|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  385|      1|
  386|      1|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  387|      1|        }
  388|       |
  389|       |        void SUBI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  390|       |                  const InstructionArg& arg3)
  391|      1|        {
  392|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  393|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  394|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  395|      1|
  396|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  397|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  398|      1|            const auto& imm_value = arg3.AsImmediateValue();
  399|      1|
  400|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  401|      1|
  402|      1|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  403|      1|        }
  404|       |
  405|       |        void SUBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  406|       |                  const InstructionArg& arg3)
  407|      1|        {
  408|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  409|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  410|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  411|      1|
  412|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  413|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  414|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  415|      1|
  416|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  417|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  418|      1|
  419|      1|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  420|      1|        }
  421|       |
  422|       |        void SUBUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  423|       |                   const InstructionArg& arg3)
  424|      1|        {
  425|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  426|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  427|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  428|      1|
  429|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  430|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  431|      1|            const auto& imm_value = arg3.AsImmediateValue();
  432|      1|
  433|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  434|      1|
  435|      1|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  436|      1|        }
  437|       |
  438|       |        void MULT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  439|       |                  const InstructionArg& arg3)
  440|      1|        {
  441|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  442|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  443|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  444|      1|
  445|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  446|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  447|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  448|      1|
  449|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  450|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  451|      1|
  452|      1|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  453|      1|        }
  454|       |
  455|       |        void MULTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  456|       |                   const InstructionArg& arg3)
  457|      1|        {
  458|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  459|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  460|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  461|      1|
  462|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  463|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  464|      1|            const auto& imm_value = arg3.AsImmediateValue();
  465|      1|
  466|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  467|      1|
  468|      1|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  469|      1|        }
  470|       |
  471|       |        void MULTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  472|       |                   const InstructionArg& arg3)
  473|      1|        {
  474|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  475|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  476|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  477|      1|
  478|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  479|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  480|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  481|      1|
  482|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  483|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  484|      1|
  485|      1|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  486|      1|        }
  487|       |
  488|       |        void MULTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  489|       |                    const InstructionArg& arg3)
  490|      1|        {
  491|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  492|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  493|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  494|      1|
  495|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  496|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  497|      1|            const auto& imm_value = arg3.AsImmediateValue();
  498|      1|
  499|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  500|      1|
  501|      1|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  502|      1|        }
  503|       |
  504|       |        void DIV(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  505|       |                 const InstructionArg& arg3)
  506|      1|        {
  507|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  508|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  509|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  510|      1|
  511|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  512|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  513|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  514|      1|
  515|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  516|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  517|      1|
  518|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  519|      1|        }
  520|       |
  521|       |        void DIVI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  522|       |                  const InstructionArg& arg3)
  523|      0|        {
  524|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  525|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  526|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  527|      0|
  528|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  529|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  530|      0|            const auto& imm_value = arg3.AsImmediateValue();
  531|      0|
  532|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  533|      0|
  534|      0|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  535|      0|        }
  536|       |
  537|       |        void DIVU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  538|       |                  const InstructionArg& arg3)
  539|      0|        {
  540|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  541|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  542|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  543|      0|
  544|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  545|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  546|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  547|      0|
  548|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  549|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  550|      0|
  551|      0|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  552|      0|        }
  553|       |
  554|       |        void DIVUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  555|       |                   const InstructionArg& arg3)
  556|      0|        {
  557|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  558|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  559|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  560|      0|
  561|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  562|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  563|      0|            const auto& imm_value = arg3.AsImmediateValue();
  564|      0|
  565|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  566|      0|
  567|      0|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  568|      0|        }
  569|       |
  570|       |        void SLL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  571|       |                 const InstructionArg& arg3)
  572|      0|        {
  573|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  574|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  575|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  576|      0|
  577|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  578|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  579|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  580|      0|
  581|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  582|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  583|      0|
  584|      0|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  585|      0|        }
  586|       |
  587|       |        void SLLI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  588|       |                  const InstructionArg& arg3)
  589|      0|        {
  590|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  591|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  592|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  593|      0|
  594|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  595|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  596|      0|            const auto& imm_value = arg3.AsImmediateValue();
  597|      0|
  598|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  599|      0|            phi::i32 shift_value = imm_value.signed_value;
  600|      0|
  601|      0|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  602|      0|        }
  603|       |
  604|       |        void SRL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  605|       |                 const InstructionArg& arg3)
  606|      0|        {
  607|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  608|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  609|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  610|      0|
  611|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  612|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  613|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  614|      0|
  615|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  616|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  617|      0|
  618|      0|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  619|      0|        }
  620|       |
  621|       |        void SRLI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  622|       |                  const InstructionArg& arg3)
  623|      0|        {
  624|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  625|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  626|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  627|      0|
  628|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  629|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  630|      0|            const auto& imm_value = arg3.AsImmediateValue();
  631|      0|
  632|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  633|      0|            phi::i32 shift_value = imm_value.signed_value;
  634|      0|
  635|      0|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  636|      0|        }
  637|       |
  638|       |        void SLA(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  639|       |                 const InstructionArg& arg3)
  640|      1|        {
  641|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  642|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  643|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  644|      1|
  645|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  646|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  647|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  648|      1|
  649|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  650|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  651|      1|
  652|      1|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  653|      1|        }
  654|       |
  655|       |        void SLAI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  656|       |                  const InstructionArg& arg3)
  657|      0|        {
  658|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  659|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  660|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  661|      0|
  662|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  663|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  664|      0|            const auto& imm_value = arg3.AsImmediateValue();
  665|      0|
  666|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  667|      0|            phi::i32 shift_value = imm_value.signed_value;
  668|      0|
  669|      0|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  670|      0|        }
  671|       |
  672|       |        void SRA(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  673|       |                 const InstructionArg& arg3)
  674|      0|        {
  675|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  676|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  677|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  678|      0|
  679|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  680|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  681|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  682|      0|
  683|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  684|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  685|      0|
  686|      0|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  687|      0|        }
  688|       |
  689|       |        void SRAI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  690|       |                  const InstructionArg& arg3)
  691|      0|        {
  692|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  693|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  694|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  695|      0|
  696|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  697|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  698|      0|            const auto& imm_value = arg3.AsImmediateValue();
  699|      0|
  700|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  701|      0|            phi::i32 shift_value = imm_value.signed_value;
  702|      0|
  703|      0|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  704|      0|        }
  705|       |
  706|       |        void AND(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  707|       |                 const InstructionArg& arg3)
  708|      0|        {
  709|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  710|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  711|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  712|      0|
  713|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  714|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  715|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  716|      0|
  717|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  718|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  719|      0|            phi::i32 new_value = lhs_value.get() & rhs_value.get();
  720|      0|
  721|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  722|      0|        }
  723|       |
  724|       |        void ANDI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  725|       |                  const InstructionArg& arg3)
  726|      0|        {
  727|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  728|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  729|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  730|      0|
  731|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  732|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  733|      0|            const auto& imm_value = arg3.AsImmediateValue();
  734|      0|
  735|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  736|      0|            phi::i32 new_value = src_value.get() & imm_value.signed_value.get();
  737|      0|
  738|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  739|      0|        }
  740|       |
  741|       |        void OR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  742|       |                const InstructionArg& arg3)
  743|      0|        {
  744|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  745|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  746|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  747|      0|
  748|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  749|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  750|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  751|      0|
  752|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  753|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  754|      0|            phi::i32 new_value = lhs_value.get() | rhs_value.get();
  755|      0|
  756|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  757|      0|        }
  758|       |
  759|       |        void ORI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  760|       |                 const InstructionArg& arg3)
  761|      0|        {
  762|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  763|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  764|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  765|      0|
  766|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  767|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  768|      0|            const auto& imm_value = arg3.AsImmediateValue();
  769|      0|
  770|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  771|      0|            phi::i32 new_value = src_value.get() | imm_value.signed_value.get();
  772|      0|
  773|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  774|      0|        }
  775|       |
  776|       |        void XOR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  777|       |                 const InstructionArg& arg3)
  778|      0|        {
  779|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  780|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  781|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  782|      0|
  783|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  784|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  785|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  786|      0|
  787|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  788|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  789|      0|            phi::i32 new_value = lhs_value.get() ^ rhs_value.get();
  790|      0|
  791|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  792|      0|        }
  793|       |
  794|       |        void XORI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  795|       |                  const InstructionArg& arg3)
  796|      0|        {
  797|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  798|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  799|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  800|      0|
  801|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  802|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  803|      0|            const auto& imm_value = arg3.AsImmediateValue();
  804|      0|
  805|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  806|      0|            phi::i32 new_value = src_value.get() ^ imm_value.signed_value.get();
  807|      0|
  808|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  809|      0|        }
  810|       |
  811|       |        void SLT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  812|       |                 const InstructionArg& arg3)
  813|      0|        {
  814|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  815|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  816|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  817|      0|
  818|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  819|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  820|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  821|      0|
  822|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  823|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  824|      0|
  825|      0|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  826|      0|
  827|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  828|      0|        }
  829|       |
  830|       |        void SLTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  831|       |                  const InstructionArg& arg3)
  832|      0|        {
  833|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  834|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  835|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  836|      0|
  837|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  838|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  839|      0|            const auto& imm_value = arg3.AsImmediateValue();
  840|      0|
  841|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  842|      0|
  843|      0|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  844|      0|
  845|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  846|      0|        }
  847|       |
  848|       |        void SGT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  849|       |                 const InstructionArg& arg3)
  850|      0|        {
  851|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  852|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  853|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  854|      0|
  855|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  856|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  857|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  858|      0|
  859|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  860|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  861|      0|
  862|      0|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  863|      0|
  864|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  865|      0|        }
  866|       |
  867|       |        void SGTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  868|       |                  const InstructionArg& arg3)
  869|      0|        {
  870|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  871|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  872|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  873|      0|
  874|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  875|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  876|      0|            const auto& imm_value = arg3.AsImmediateValue();
  877|      0|
  878|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  879|      0|
  880|      0|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  881|      0|
  882|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  883|      0|        }
  884|       |
  885|       |        void SLE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  886|       |                 const InstructionArg& arg3)
  887|      0|        {
  888|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  889|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  890|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  891|      0|
  892|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  893|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  894|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  895|      0|
  896|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  897|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  898|      0|
  899|      0|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  900|      0|
  901|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  902|      0|        }
  903|       |
  904|       |        void SLEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  905|       |                  const InstructionArg& arg3)
  906|      0|        {
  907|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  908|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  909|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  910|      0|
  911|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  912|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  913|      0|            const auto& imm_value = arg3.AsImmediateValue();
  914|      0|
  915|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  916|      0|
  917|      0|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  918|      0|
  919|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  920|      0|        }
  921|       |
  922|       |        void SGE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  923|       |                 const InstructionArg& arg3)
  924|      0|        {
  925|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  926|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  927|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  928|      0|
  929|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  930|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  931|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  932|      0|
  933|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  934|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  935|      0|
  936|      0|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  937|      0|
  938|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  939|      0|        }
  940|       |
  941|       |        void SGEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  942|       |                  const InstructionArg& arg3)
  943|      0|        {
  944|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  945|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  946|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  947|      0|
  948|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  949|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  950|      0|            const auto& imm_value = arg3.AsImmediateValue();
  951|      0|
  952|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  953|      0|
  954|      0|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  955|      0|
  956|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  957|      0|        }
  958|       |
  959|       |        void SEQ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  960|       |                 const InstructionArg& arg3)
  961|  12.5k|        {
  962|  12.5k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  963|  12.5k|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  964|  12.5k|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  965|  12.5k|
  966|  12.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  967|  12.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  968|  12.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  969|  12.5k|
  970|  12.5k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  971|  12.5k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  972|  12.5k|
  973|  12.5k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  974|  12.5k|
  975|  12.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  976|  12.5k|        }
  977|       |
  978|       |        void SEQI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  979|       |                  const InstructionArg& arg3)
  980|      0|        {
  981|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  982|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  983|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  984|      0|
  985|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  986|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  987|      0|            const auto& imm_value = arg3.AsImmediateValue();
  988|      0|
  989|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  990|      0|
  991|      0|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  992|      0|
  993|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  994|      0|        }
  995|       |
  996|       |        void SNE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  997|       |                 const InstructionArg& arg3)
  998|      0|        {
  999|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1000|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1001|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1002|      0|
 1003|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1004|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1005|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1006|      0|
 1007|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1008|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1009|      0|
 1010|      0|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
 1011|      0|
 1012|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1013|      0|        }
 1014|       |
 1015|       |        void SNEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1016|       |                  const InstructionArg& arg3)
 1017|      0|        {
 1018|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1019|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1020|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1021|      0|
 1022|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1023|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1024|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1025|      0|
 1026|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1027|      0|
 1028|      0|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
 1029|      0|
 1030|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1031|      0|        }
 1032|       |
 1033|       |        void BEQZ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1034|       |                  const InstructionArg& arg3)
 1035|      1|        {
 1036|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1037|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1038|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1039|      1|
 1040|      1|            const auto& test_reg   = arg1.AsRegisterInt();
 1041|      1|            const auto& jump_label = arg2.AsLabel();
 1042|      1|
 1043|      1|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1044|      1|
 1045|      1|            if (test_value == 0)
 1046|      0|            {
 1047|      0|                JumpToLabel(processor, jump_label.label_name);
 1048|      0|            }
 1049|      1|        }
 1050|       |
 1051|       |        void BNEZ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1052|       |                  const InstructionArg& arg3)
 1053|      0|        {
 1054|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1055|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1056|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1057|      0|
 1058|      0|            const auto& test_reg   = arg1.AsRegisterInt();
 1059|      0|            const auto& jump_label = arg2.AsLabel();
 1060|      0|
 1061|      0|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1062|      0|
 1063|      0|            if (test_value != 0)
 1064|      0|            {
 1065|      0|                JumpToLabel(processor, jump_label.label_name);
 1066|      0|            }
 1067|      0|        }
 1068|       |
 1069|       |        void J(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1070|       |               const InstructionArg& arg3)
 1071|  12.5k|        {
 1072|  12.5k|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1073|  12.5k|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1074|  12.5k|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1075|  12.5k|
 1076|  12.5k|            const auto& jump_label = arg1.AsLabel();
 1077|  12.5k|
 1078|  12.5k|            JumpToLabel(processor, jump_label.label_name);
 1079|  12.5k|        }
 1080|       |
 1081|       |        void JR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1082|       |                const InstructionArg& arg3)
 1083|      0|        {
 1084|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1085|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1086|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1087|      0|
 1088|      0|            const auto& jump_register = arg1.AsRegisterInt();
 1089|      0|
 1090|      0|            JumpToRegister(processor, jump_register.register_id);
 1091|      0|        }
 1092|       |
 1093|       |        void JAL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1094|       |                 const InstructionArg& arg3)
 1095|      0|        {
 1096|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1097|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1098|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1099|      0|
 1100|      0|            const auto& jump_label = arg1.AsLabel();
 1101|      0|
 1102|      0|            processor.IntRegisterSetSignedValue(
 1103|      0|                    IntRegisterID::R31,
 1104|      0|                    static_cast<std::int32_t>(processor.m_NextProgramCounter.get()));
 1105|      0|
 1106|      0|            JumpToLabel(processor, jump_label.label_name);
 1107|      0|        }
 1108|       |
 1109|       |        void JALR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1110|       |                  const InstructionArg& arg3)
 1111|      0|        {
 1112|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1113|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1114|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1115|      0|
 1116|      0|            const auto& jump_register = arg1.AsRegisterInt();
 1117|      0|
 1118|      0|            processor.IntRegisterSetSignedValue(
 1119|      0|                    IntRegisterID::R31,
 1120|      0|                    static_cast<std::int32_t>(processor.m_NextProgramCounter.get()));
 1121|      0|
 1122|      0|            JumpToRegister(processor, jump_register.register_id);
 1123|      0|        }
 1124|       |
 1125|       |        void LB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1126|       |                const InstructionArg& arg3)
 1127|      0|        {
 1128|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1129|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1130|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1131|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1132|      0|
 1133|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1134|      0|
 1135|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1136|      0|
 1137|      0|            if (!optional_address.has_value())
 1138|      0|            {
 1139|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1140|      0|                return;
 1141|      0|            }
 1142|      0|
 1143|      0|            phi::i32 address = optional_address.value();
 1144|      0|
 1145|      0|            auto optional_value =
 1146|      0|                    processor.m_MemoryBlock.LoadByte(static_cast<std::size_t>(address.get()));
 1147|      0|
 1148|      0|            if (!optional_value.has_value())
 1149|      0|            {
 1150|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1151|      0|                PHI_LOG_ERROR("Failed to load byte at address {}", address.get());
 1152|      0|                return;
 1153|      0|            }
 1154|      0|
 1155|      0|            phi::i32 value = optional_value.value();
 1156|      0|
 1157|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1158|      0|        }
 1159|       |
 1160|       |        void LBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1161|       |                 const InstructionArg& arg3)
 1162|      0|        {
 1163|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1164|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1165|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1166|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1167|      0|
 1168|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1169|      0|
 1170|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1171|      0|
 1172|      0|            if (!optional_address.has_value())
 1173|      0|            {
 1174|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1175|      0|                return;
 1176|      0|            }
 1177|      0|
 1178|      0|            phi::i32 address = optional_address.value();
 1179|      0|
 1180|      0|            auto optional_value = processor.m_MemoryBlock.LoadUnsignedByte(
 1181|      0|                    static_cast<std::size_t>(address.get()));
 1182|      0|
 1183|      0|            if (!optional_value.has_value())
 1184|      0|            {
 1185|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1186|      0|                PHI_LOG_ERROR("Failed to load unsigned byte at address {}", address.get());
 1187|      0|                return;
 1188|      0|            }
 1189|      0|
 1190|      0|            phi::i32 value = optional_value.value();
 1191|      0|
 1192|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1193|      0|        }
 1194|       |
 1195|       |        void LH(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1196|       |                const InstructionArg& arg3)
 1197|      0|        {
 1198|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1199|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1200|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1201|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1202|      0|
 1203|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1204|      0|
 1205|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1206|      0|
 1207|      0|            if (!optional_address.has_value())
 1208|      0|            {
 1209|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1210|      0|                return;
 1211|      0|            }
 1212|      0|
 1213|      0|            phi::i32 address = optional_address.value();
 1214|      0|
 1215|      0|            auto optional_value =
 1216|      0|                    processor.m_MemoryBlock.LoadHalfWord(static_cast<std::size_t>(address.get()));
 1217|      0|
 1218|      0|            if (!optional_value.has_value())
 1219|      0|            {
 1220|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1221|      0|                PHI_LOG_ERROR("Failed to load half byte at address {}", address.get());
 1222|      0|                return;
 1223|      0|            }
 1224|      0|
 1225|      0|            phi::i32 value = optional_value.value();
 1226|      0|
 1227|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1228|      0|        }
 1229|       |
 1230|       |        void LHU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1231|       |                 const InstructionArg& arg3)
 1232|      0|        {
 1233|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1234|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1235|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1236|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1237|      0|
 1238|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1239|      0|
 1240|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1241|      0|
 1242|      0|            if (!optional_address.has_value())
 1243|      0|            {
 1244|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1245|      0|                return;
 1246|      0|            }
 1247|      0|
 1248|      0|            phi::i32 address = optional_address.value();
 1249|      0|
 1250|      0|            auto optional_value = processor.m_MemoryBlock.LoadUnsignedHalfWord(
 1251|      0|                    static_cast<std::size_t>(address.get()));
 1252|      0|
 1253|      0|            if (!optional_value.has_value())
 1254|      0|            {
 1255|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1256|      0|                PHI_LOG_ERROR("Failed to load unsigned half byte at address {}", address.get());
 1257|      0|                return;
 1258|      0|            }
 1259|      0|
 1260|      0|            phi::i32 value = optional_value.value();
 1261|      0|
 1262|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1263|      0|        }
 1264|       |
 1265|       |        void LW(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1266|       |                const InstructionArg& arg3)
 1267|  2.50k|        {
 1268|  2.50k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1269|  2.50k|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1270|  2.50k|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1271|  2.50k|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1272|  2.50k|
 1273|  2.50k|            const auto& dest_reg = arg1.AsRegisterInt();
 1274|  2.50k|
 1275|  2.50k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1276|  2.50k|
 1277|  2.50k|            if (!optional_address.has_value())
 1278|      0|            {
 1279|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1280|      0|                return;
 1281|      0|            }
 1282|  2.50k|
 1283|  2.50k|            phi::i32 address = optional_address.value();
 1284|  2.50k|
 1285|  2.50k|            auto optional_value =
 1286|  2.50k|                    processor.m_MemoryBlock.LoadWord(static_cast<std::size_t>(address.get()));
 1287|  2.50k|
 1288|  2.50k|            if (!optional_value.has_value())
 1289|      1|            {
 1290|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1291|      1|                PHI_LOG_ERROR("Failed to load word at address {}", address.get());
 1292|      1|                return;
 1293|      1|            }
 1294|  2.50k|
 1295|  2.50k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1296|  2.50k|        }
 1297|       |
 1298|       |        void LWU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1299|       |                 const InstructionArg& arg3)
 1300|      0|        {
 1301|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1302|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1303|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1304|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1305|      0|
 1306|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1307|      0|
 1308|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1309|      0|
 1310|      0|            if (!optional_address.has_value())
 1311|      0|            {
 1312|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1313|      0|                return;
 1314|      0|            }
 1315|      0|
 1316|      0|            phi::i32 address = optional_address.value();
 1317|      0|
 1318|      0|            auto optional_value = processor.m_MemoryBlock.LoadUnsignedWord(
 1319|      0|                    static_cast<std::size_t>(address.get()));
 1320|      0|
 1321|      0|            if (!optional_value.has_value())
 1322|      0|            {
 1323|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1324|      0|                PHI_LOG_ERROR("Failed to load unsigned word at address {}", address.get());
 1325|      0|                return;
 1326|      0|            }
 1327|      0|
 1328|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1329|      0|        }
 1330|       |
 1331|       |        void SB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1332|       |                const InstructionArg& arg3)
 1333|      0|        {
 1334|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 1335|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 1336|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1337|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1338|      0|
 1339|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1340|      0|
 1341|      0|            if (!optional_address.has_value())
 1342|      0|            {
 1343|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1344|      0|                return;
 1345|      0|            }
 1346|      0|
 1347|      0|            phi::i32 address = optional_address.value();
 1348|      0|
 1349|      0|            const auto& src_reg = arg2.AsRegisterInt();
 1350|      0|
 1351|      0|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1352|      0|
 1353|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreByte(
 1354|      0|                    static_cast<std::size_t>(address.get()), static_cast<std::int8_t>(value.get()));
 1355|      0|
 1356|      0|            if (!success)
 1357|      0|            {
 1358|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1359|      0|                PHI_LOG_ERROR("Failed to store byte at address {}", address.get());
 1360|      0|            }
 1361|      0|        }
 1362|       |
 1363|       |        void SBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1364|       |                 const InstructionArg& arg3)
 1365|      0|        {
 1366|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 1367|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 1368|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1369|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1370|      0|
 1371|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1372|      0|
 1373|      0|            if (!optional_address.has_value())
 1374|      0|            {
 1375|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1376|      0|                return;
 1377|      0|            }
 1378|      0|
 1379|      0|            phi::i32 address = optional_address.value();
 1380|      0|
 1381|      0|            const auto& src_reg = arg2.AsRegisterInt();
 1382|      0|
 1383|      0|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1384|      0|
 1385|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreUnsignedByte(
 1386|      0|                    static_cast<std::size_t>(address.get()),
 1387|      0|                    static_cast<std::uint8_t>(value.get()));
 1388|      0|
 1389|      0|            if (!success)
 1390|      0|            {
 1391|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1392|      0|                PHI_LOG_ERROR("Failed to store unsigned byte at address {}", address.get());
 1393|      0|            }
 1394|      0|        }
 1395|       |
 1396|       |        void SH(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1397|       |                const InstructionArg& arg3)
 1398|      0|        {
 1399|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 1400|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 1401|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1402|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1403|      0|
 1404|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1405|      0|
 1406|      0|            if (!optional_address.has_value())
 1407|      0|            {
 1408|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1409|      0|                return;
 1410|      0|            }
 1411|      0|
 1412|      0|            phi::i32 address = optional_address.value();
 1413|      0|
 1414|      0|            const auto& src_reg = arg2.AsRegisterInt();
 1415|      0|
 1416|      0|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1417|      0|
 1418|      0|            phi::Boolean success =
 1419|      0|                    processor.m_MemoryBlock.StoreHalfWord(static_cast<std::size_t>(address.get()),
 1420|      0|                                                          static_cast<std::int16_t>(value.get()));
 1421|      0|
 1422|      0|            if (!success)
 1423|      0|            {
 1424|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1425|      0|                PHI_LOG_ERROR("Failed to store half word at address {}", address.get());
 1426|      0|            }
 1427|      0|        }
 1428|       |
 1429|       |        void SHU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1430|       |                 const InstructionArg& arg3)
 1431|      0|        {
 1432|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 1433|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 1434|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1435|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1436|      0|
 1437|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1438|      0|
 1439|      0|            if (!optional_address.has_value())
 1440|      0|            {
 1441|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1442|      0|                return;
 1443|      0|            }
 1444|      0|
 1445|      0|            phi::i32 address = optional_address.value();
 1446|      0|
 1447|      0|            const auto& src_reg = arg2.AsRegisterInt();
 1448|      0|
 1449|      0|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1450|      0|
 1451|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreUnsignedHalfWord(
 1452|      0|                    static_cast<std::size_t>(address.get()),
 1453|      0|                    static_cast<std::uint16_t>(value.get()));
 1454|      0|
 1455|      0|            if (!success)
 1456|      0|            {
 1457|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1458|      0|                PHI_LOG_ERROR("Failed to store unsigned half word at address {}", address.get());
 1459|      0|            }
 1460|      0|        }
 1461|       |
 1462|       |        void SW(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1463|       |                const InstructionArg& arg3)
 1464|      0|        {
 1465|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 1466|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 1467|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1468|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1469|      0|
 1470|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1471|      0|
 1472|      0|            if (!optional_address.has_value())
 1473|      0|            {
 1474|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1475|      0|                return;
 1476|      0|            }
 1477|      0|
 1478|      0|            phi::i32 address = optional_address.value();
 1479|      0|
 1480|      0|            const auto& src_reg = arg2.AsRegisterInt();
 1481|      0|
 1482|      0|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1483|      0|
 1484|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreWord(
 1485|      0|                    static_cast<std::size_t>(address.get()), value);
 1486|      0|
 1487|      0|            if (!success)
 1488|      0|            {
 1489|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1490|      0|                PHI_LOG_ERROR("Failed to store word at address {}", address.get());
 1491|      0|            }
 1492|      0|        }
 1493|       |
 1494|       |        void SWU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1495|       |                 const InstructionArg& arg3)
 1496|      0|        {
 1497|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 1498|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 1499|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1500|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1501|      0|
 1502|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1503|      0|
 1504|      0|            if (!optional_address.has_value())
 1505|      0|            {
 1506|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1507|      0|                return;
 1508|      0|            }
 1509|      0|
 1510|      0|            phi::i32 address = optional_address.value();
 1511|      0|
 1512|      0|            const auto& src_reg = arg2.AsRegisterInt();
 1513|      0|
 1514|      0|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1515|      0|
 1516|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreUnsignedWord(
 1517|      0|                    static_cast<std::size_t>(address.get()), value);
 1518|      0|
 1519|      0|            if (!success)
 1520|      0|            {
 1521|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1522|      0|                PHI_LOG_ERROR("Failed to store unsigned word at address {}", address.get());
 1523|      0|            }
 1524|      0|        }
 1525|       |
 1526|       |        void TRAP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1527|       |                  const InstructionArg& arg3)
 1528|      1|        {
 1529|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 1530|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1531|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1532|      1|
 1533|      1|            processor.Raise(Exception::Trap);
 1534|      1|        }
 1535|       |
 1536|       |        void HALT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1537|       |                  const InstructionArg& arg3)
 1538|      0|        {
 1539|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 1540|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1541|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1542|      0|
 1543|      0|            processor.Raise(Exception::Halt);
 1544|      0|        }
 1545|       |
 1546|       |        void NOP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1547|       |                 const InstructionArg& arg3)
 1548|      1|        {
 1549|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 1550|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1551|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1552|      1|
 1553|      1|            /* Do nothing */
 1554|      1|        }
 1555|       |    } // namespace impl
 1556|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Token.cpp:
    1|       |#include "DLX/Token.hpp"
    2|       |
    3|       |#include <magic_enum.hpp>
    4|       |#include <string>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    Token::Token(Type type, std::string_view text, phi::u64 line_number, phi::u64 column)
    9|       |        : m_Type{type}
   10|       |        , m_Text{text}
   11|       |        , m_LineNumber{line_number}
   12|       |        , m_Column{column}
   13|  37.2k|    {}
   14|       |
   15|       |    Token::Type Token::GetType() const noexcept
   16|  40.9k|    {
   17|  40.9k|        return m_Type;
   18|  40.9k|    }
   19|       |
   20|       |    std::string_view Token::GetTypeName() const noexcept
   21|    122|    {
   22|    122|        return magic_enum::enum_name(m_Type);
   23|    122|    }
   24|       |
   25|       |    phi::u64 Token::GetLineNumber() const noexcept
   26|  36.4k|    {
   27|  36.4k|        return m_LineNumber;
   28|  36.4k|    }
   29|       |
   30|       |    phi::u64 Token::GetColumn() const noexcept
   31|  36.4k|    {
   32|  36.4k|        return m_Column;
   33|  36.4k|    }
   34|       |
   35|       |    phi::usize Token::GetLength() const noexcept
   36|      0|    {
   37|      0|        return m_Text.length();
   38|      0|    }
   39|       |
   40|       |    std::string_view Token::GetText() const noexcept
   41|  61.0k|    {
   42|  61.0k|        return m_Text;
   43|  61.0k|    }
   44|       |
   45|       |    std::string Token::GetTextString() const noexcept
   46|  46.2k|    {
   47|  46.2k|        return std::string(m_Text.data(), m_Text.length());
   48|  46.2k|    }
   49|       |
   50|       |    std::string Token::DebugInfo() const noexcept
   51|  36.4k|    {
   52|  36.4k|        std::string pos_info = "(" + std::to_string(GetLineNumber().get()) + ":" +
   53|  36.4k|                               std::to_string(GetColumn().get()) + ")";
   54|  36.4k|
   55|  36.4k|        switch (m_Type)
   56|  36.4k|        {
   57|  1.36k|            case Type::Colon:
   58|  1.36k|                return "Token[Colon]" + pos_info;
   59|  1.43k|            case Type::Comma:
   60|  1.43k|                return "Token[Comma]" + pos_info;
   61|  1.08k|            case Type::Comment:
   62|  1.08k|                return "Token[Comment]" + pos_info + ": '" + GetTextString() + "'";
   63|  21.9k|            case Type::Identifier:
   64|  21.9k|                return "Token[Identifier]" + pos_info + ": '" + GetTextString() + "'";
   65|  5.97k|            case Type::NewLine:
   66|  5.97k|                return "Token[NewLine]" + pos_info;
   67|  1.86k|            case Type::OpenBracket:
   68|  1.86k|                return "Token[OpenBracket]" + pos_info;
   69|  1.83k|            case Type::ClosingBracket:
   70|  1.83k|                return "Token[OpenBracket]" + pos_info;
   71|    424|            case Type::IntegerLiteral:
   72|    424|                return "Token[IntegerLiteral]" + pos_info + ": '" + GetTextString() + "'";
   73|    554|            case Type::ImmediateInteger:
   74|    554|                return "Token[ImmediateInteger]" + pos_info + ": " + GetTextString() + "'";
   75|      0|            case Type::Unknown:
   76|      0|                return "Token[Unknown]" + pos_info;
   77|      0|            default:
   78|      0|                PHI_ASSERT_NOT_REACHED();
   79|      0|                return "Token[NotFound]" + pos_info;
   80|  36.4k|        }
   81|  36.4k|    }
   82|       |} // namespace dlx

