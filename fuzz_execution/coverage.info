/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Processor.cpp:
    1|       |#include "DLX/Processor.hpp"
    2|       |
    3|       |#include "DLX/FloatRegister.hpp"
    4|       |#include "DLX/InstructionInfo.hpp"
    5|       |#include "DLX/Parser.hpp"
    6|       |#include "Phi/Core/Log.hpp"
    7|       |#include "Phi/Core/Types.hpp"
    8|       |
    9|       |namespace dlx
   10|       |{
   11|       |    static phi::Boolean RegisterAccessTypeMatches(RegisterAccessType expected_access,
   12|       |                                                  RegisterAccessType access)
   13|  81.5k|    {
   14|  81.5k|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   15|  81.5k|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   16|  81.5k|
   17|  81.5k|        switch (expected_access)
   18|  81.5k|        {
   19|  37.8k|            case RegisterAccessType::Ignored:
   20|  37.8k|                return true;
   21|      0|            case RegisterAccessType::None:
   22|      0|                return false;
   23|      0|            case RegisterAccessType::MixedFloatDouble:
   24|      0|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
   25|  43.6k|            default:
   26|  43.6k|                return expected_access == access;
   27|  81.5k|        }
   28|  81.5k|    }
   29|       |
   30|       |    Processor::Processor()
   31|       |        : m_MemoryBlock(1000u, 1000u)
   32|    671|    {
   33|    671|        // Mark R0 as ready only
   34|    671|        m_IntRegisters.at(0).SetReadOnly(true);
   35|    671|    }
   36|       |
   37|       |    IntRegister& Processor::GetIntRegister(IntRegisterID id)
   38|  28.0k|    {
   39|  28.0k|        PHI_ASSERT(id != IntRegisterID::None);
   40|  28.0k|        std::underlying_type_t<IntRegisterID> id_value =
   41|  28.0k|                static_cast<std::underlying_type_t<IntRegisterID>>(id);
   42|  28.0k|
   43|  28.0k|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
   44|  28.0k|
   45|  28.0k|        return m_IntRegisters.at(id_value);
   46|  28.0k|    }
   47|       |
   48|       |    const IntRegister& Processor::GetIntRegister(IntRegisterID id) const
   49|  53.4k|    {
   50|  53.4k|        PHI_ASSERT(id != IntRegisterID::None);
   51|  53.4k|        std::underlying_type_t<IntRegisterID> id_value =
   52|  53.4k|                static_cast<std::underlying_type_t<IntRegisterID>>(id);
   53|  53.4k|
   54|  53.4k|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
   55|  53.4k|
   56|  53.4k|        return m_IntRegisters.at(id_value);
   57|  53.4k|    }
   58|       |
   59|       |    phi::i32 Processor::IntRegisterGetSignedValue(IntRegisterID id) const
   60|  33.2k|    {
   61|  33.2k|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Signed))
   62|      6|        {
   63|      6|            PHI_LOG_WARN("Mismatch for instruction access type");
   64|      6|        }
   65|  33.2k|
   66|  33.2k|        return GetIntRegister(id).GetSignedValue();
   67|  33.2k|    }
   68|       |
   69|       |    phi::u32 Processor::IntRegisterGetUnsignedValue(IntRegisterID id) const
   70|  20.2k|    {
   71|  20.2k|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   72|  20.2k|                                       RegisterAccessType::Unsigned))
   73|      0|        {
   74|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   75|      0|        }
   76|  20.2k|
   77|  20.2k|        return GetIntRegister(id).GetUnsignedValue();
   78|  20.2k|    }
   79|       |
   80|       |    void Processor::IntRegisterSetSignedValue(IntRegisterID id, phi::i32 value)
   81|  17.8k|    {
   82|  17.8k|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Signed))
   83|      0|        {
   84|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   85|      0|        }
   86|  17.8k|
   87|  17.8k|        IntRegister& reg = GetIntRegister(id);
   88|  17.8k|
   89|  17.8k|        if (reg.IsReadOnly())
   90|  2.68k|        {
   91|  2.68k|            return;
   92|  2.68k|        }
   93|  15.2k|
   94|  15.2k|        reg.SetSignedValue(value);
   95|  15.2k|    }
   96|       |
   97|       |    void Processor::IntRegisterSetUnsignedValue(IntRegisterID id, phi::u32 value)
   98|  10.1k|    {
   99|  10.1k|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  100|  10.1k|                                       RegisterAccessType::Unsigned))
  101|      0|        {
  102|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  103|      0|        }
  104|  10.1k|
  105|  10.1k|        IntRegister& reg = GetIntRegister(id);
  106|  10.1k|
  107|  10.1k|        if (reg.IsReadOnly())
  108|    118|        {
  109|    118|            return;
  110|    118|        }
  111|  10.0k|
  112|  10.0k|        reg.SetUnsignedValue(value);
  113|  10.0k|    }
  114|       |
  115|       |    FloatRegister& Processor::GetFloatRegister(FloatRegisterID id)
  116|      0|    {
  117|      0|        PHI_ASSERT(id != FloatRegisterID::None);
  118|      0|        std::underlying_type_t<FloatRegisterID> id_value =
  119|      0|                static_cast<std::underlying_type_t<FloatRegisterID>>(id);
  120|      0|
  121|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
  122|      0|
  123|      0|        return m_FloatRegisters.at(id_value);
  124|      0|    }
  125|       |
  126|       |    const FloatRegister& Processor::GetFloatRegister(FloatRegisterID id) const
  127|      0|    {
  128|      0|        PHI_ASSERT(id != FloatRegisterID::None);
  129|      0|        std::underlying_type_t<FloatRegisterID> id_value =
  130|      0|                static_cast<std::underlying_type_t<FloatRegisterID>>(id);
  131|      0|
  132|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
  133|      0|
  134|      0|        return m_FloatRegisters.at(id_value);
  135|      0|    }
  136|       |
  137|       |    [[nodiscard]] phi::f32 Processor::FloatRegisterGetFloatValue(FloatRegisterID id) const
  138|      0|    {
  139|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Float))
  140|      0|        {
  141|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  142|      0|        }
  143|      0|
  144|      0|        const FloatRegister& reg = GetFloatRegister(id);
  145|      0|
  146|      0|        return reg.GetValue();
  147|      0|    }
  148|       |
  149|       |    [[nodiscard]] phi::f64 Processor::FloatRegisterGetDoubleValue(FloatRegisterID id)
  150|      0|    {
  151|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Double))
  152|      0|        {
  153|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  154|      0|        }
  155|      0|
  156|      0|        if (id == FloatRegisterID::F31)
  157|      0|        {
  158|      0|            Raise(Exception::RegisterOutOfBounds);
  159|      0|            return phi::f64(0.0);
  160|      0|        }
  161|      0|
  162|      0|        const FloatRegister& first_reg = GetFloatRegister(id);
  163|      0|        const FloatRegister& second_reg =
  164|      0|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  165|      0|
  166|      0|        const float first_value  = first_reg.GetValue().get();
  167|      0|        const float second_value = second_reg.GetValue().get();
  168|      0|
  169|      0|        const std::uint32_t first_value_bits =
  170|      0|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  171|      0|        const std::uint32_t second_value_bits =
  172|      0|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  173|      0|
  174|      0|        std::uint64_t final_value_bits =
  175|      0|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  176|      0|
  177|      0|        return *reinterpret_cast<double*>(&final_value_bits);
  178|      0|    }
  179|       |
  180|       |    void Processor::FloatRegisterSetFloatValue(FloatRegisterID id, phi::f32 value)
  181|      0|    {
  182|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Float))
  183|      0|        {
  184|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  185|      0|        }
  186|      0|
  187|      0|        FloatRegister& reg = GetFloatRegister(id);
  188|      0|
  189|      0|        reg.SetValue(value);
  190|      0|    }
  191|       |
  192|       |    void Processor::FloatRegisterSetDoubleValue(FloatRegisterID id, phi::f64 value)
  193|      0|    {
  194|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Double))
  195|      0|        {
  196|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  197|      0|        }
  198|      0|
  199|      0|        if (id == FloatRegisterID::F31)
  200|      0|        {
  201|      0|            Raise(Exception::RegisterOutOfBounds);
  202|      0|            return;
  203|      0|        }
  204|      0|
  205|      0|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  206|      0|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  207|      0|
  208|      0|        double              value_raw  = value.get();
  209|      0|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  210|      0|
  211|      0|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  212|      0|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  213|      0|
  214|      0|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  215|      0|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  216|      0|
  217|      0|        FloatRegister& first_reg = GetFloatRegister(id);
  218|      0|        FloatRegister& second_reg =
  219|      0|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  220|      0|
  221|      0|        first_reg.SetValue(first_value);
  222|      0|        second_reg.SetValue(second_value);
  223|      0|    }
  224|       |
  225|       |    void Processor::ExecuteInstruction(const Instruction& inst)
  226|  50.6k|    {
  227|  50.6k|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  228|  50.6k|
  229|  50.6k|        inst.Execute(*this);
  230|  50.6k|    }
  231|       |
  232|       |    void Processor::LoadProgram(ParsedProgram& programm)
  233|    671|    {
  234|    671|        m_CurrentProgram = &programm;
  235|    671|
  236|    671|        m_ProgramCounter               = 0u;
  237|    671|        m_Halted                       = false;
  238|    671|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  239|    671|    }
  240|       |
  241|       |    phi::ObserverPtr<ParsedProgram> Processor::GetCurrentProgramm() const noexcept
  242|  32.5k|    {
  243|  32.5k|        return m_CurrentProgram;
  244|  32.5k|    }
  245|       |
  246|       |    void Processor::ExecuteCurrentProgram()
  247|    671|    {
  248|    671|        PHI_ASSERT(m_CurrentProgram);
  249|    671|
  250|    671|        // Don't execute a program with parsing errors
  251|    671|        if (!m_CurrentProgram->m_ParseErrors.empty())
  252|    441|        {
  253|    441|            return;
  254|    441|        }
  255|    230|
  256|    230|        m_ProgramCounter      = 0u;
  257|    230|        m_Halted              = false;
  258|    230|        m_LastRaisedException = Exception::None;
  259|    230|
  260|    230|        phi::usize StepCount{0u};
  261|    230|
  262|  50.8k|        while (m_ProgramCounter < m_CurrentProgram->m_Instructions.size() && !m_Halted &&
  263|  50.8k|               (m_MaxNumberOfSteps != 0u && StepCount < m_MaxNumberOfSteps))
  264|  50.6k|        {
  265|  50.6k|            m_NextProgramCounter = m_ProgramCounter + 1u;
  266|  50.6k|
  267|  50.6k|            const auto& current_instruction =
  268|  50.6k|                    m_CurrentProgram->m_Instructions.at(m_ProgramCounter.get());
  269|  50.6k|            ExecuteInstruction(current_instruction);
  270|  50.6k|
  271|  50.6k|            m_ProgramCounter = m_NextProgramCounter;
  272|  50.6k|
  273|  50.6k|            ++StepCount;
  274|  50.6k|        }
  275|    230|    }
  276|       |
  277|       |    void Processor::ClearRegisters()
  278|    671|    {
  279|    671|        for (auto& reg : m_IntRegisters)
  280|  21.4k|        {
  281|  21.4k|            reg.SetSignedValue(0);
  282|  21.4k|        }
  283|    671|
  284|    671|        for (auto& reg : m_FloatRegisters)
  285|  21.4k|        {
  286|  21.4k|            reg.SetValue(0.0f);
  287|  21.4k|        }
  288|    671|    }
  289|       |
  290|       |    void Processor::ClearMemory()
  291|    671|    {
  292|    671|        m_MemoryBlock.Clear();
  293|    671|    }
  294|       |
  295|       |    void Processor::Raise(Exception exception)
  296|     85|    {
  297|     85|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  298|     85|
  299|     85|        m_LastRaisedException = exception;
  300|     85|
  301|     85|        switch (exception)
  302|     85|        {
  303|      0|            case Exception::None:
  304|      0|                PHI_ASSERT_NOT_REACHED();
  305|      0|                return;
  306|     51|            case Exception::DivideByZero:
  307|     51|                m_Halted = true;
  308|     51|                PHI_LOG_ERROR("Division through zero");
  309|     51|                return;
  310|      1|            case Exception::Overflow:
  311|      1|                PHI_LOG_WARN("Overflow");
  312|      1|                return;
  313|      1|            case Exception::Underflow:
  314|      1|                PHI_LOG_WARN("Underflow");
  315|      1|                return;
  316|      1|            case Exception::Trap:
  317|      1|                m_Halted = true;
  318|      1|                PHI_LOG_ERROR("Trapped");
  319|      1|                return;
  320|      1|            case Exception::Halt:
  321|      1|                m_Halted = true;
  322|      1|                return;
  323|     14|            case Exception::UnknownLabel:
  324|     14|                m_Halted = true;
  325|     14|                PHI_LOG_ERROR("Unknown label");
  326|     14|                return;
  327|      8|            case Exception::BadShift:
  328|      8|                PHI_LOG_ERROR("Bad shift");
  329|      8|                return;
  330|      8|            case Exception::AddressOutOfBounds:
  331|      8|                PHI_LOG_ERROR("Address out of bounds");
  332|      8|                m_Halted = true;
  333|      8|                return;
  334|      0|            case Exception::RegisterOutOfBounds:
  335|      0|                PHI_LOG_ERROR("Register out of bounds");
  336|      0|                m_Halted = true;
  337|      0|                return;
  338|      0|        }
  339|      0|
  340|      0|        PHI_ASSERT_NOT_REACHED();
  341|      0|    }
  342|       |
  343|       |    Exception Processor::GetLastRaisedException() const noexcept
  344|      0|    {
  345|      0|        return m_LastRaisedException;
  346|      0|    }
  347|       |
  348|       |    [[nodiscard]] phi::Boolean Processor::IsHalted() const noexcept
  349|      0|    {
  350|      0|        return m_Halted;
  351|      0|    }
  352|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/RegisterNames.cpp:
    1|       |#include "DLX/RegisterNames.hpp"
    2|       |
    3|       |#include "DLX/Containers/LookUpMap.hpp"
    4|       |#include <algorithm>
    5|       |#include <cctype>
    6|       |
    7|       |namespace dlx
    8|       |{
    9|       |    static constexpr std::array<std::pair<std::string_view, IntRegisterID>, 32> IntRegisterValues{
   10|       |            {{"R0", IntRegisterID::R0},   {"R1", IntRegisterID::R1},   {"R2", IntRegisterID::R2},
   11|       |             {"R3", IntRegisterID::R3},   {"R4", IntRegisterID::R4},   {"R5", IntRegisterID::R5},
   12|       |             {"R6", IntRegisterID::R6},   {"R7", IntRegisterID::R7},   {"R8", IntRegisterID::R8},
   13|       |             {"R9", IntRegisterID::R9},   {"R10", IntRegisterID::R10}, {"R11", IntRegisterID::R11},
   14|       |             {"R12", IntRegisterID::R12}, {"R13", IntRegisterID::R13}, {"R14", IntRegisterID::R14},
   15|       |             {"R15", IntRegisterID::R15}, {"R16", IntRegisterID::R16}, {"R17", IntRegisterID::R17},
   16|       |             {"R18", IntRegisterID::R18}, {"R19", IntRegisterID::R19}, {"R20", IntRegisterID::R20},
   17|       |             {"R21", IntRegisterID::R21}, {"R22", IntRegisterID::R22}, {"R23", IntRegisterID::R23},
   18|       |             {"R24", IntRegisterID::R24}, {"R25", IntRegisterID::R25}, {"R26", IntRegisterID::R26},
   19|       |             {"R27", IntRegisterID::R27}, {"R28", IntRegisterID::R28}, {"R29", IntRegisterID::R29},
   20|       |             {"R30", IntRegisterID::R30}, {"R31", IntRegisterID::R31}}};
   21|       |
   22|       |    static constexpr std::array<std::pair<std::string_view, FloatRegisterID>, 32>
   23|       |            FloatRegisterValues{{{"F0", FloatRegisterID::F0},   {"F1", FloatRegisterID::F1},
   24|       |                                 {"F2", FloatRegisterID::F2},   {"F3", FloatRegisterID::F3},
   25|       |                                 {"F4", FloatRegisterID::F4},   {"F5", FloatRegisterID::F5},
   26|       |                                 {"F6", FloatRegisterID::F6},   {"F7", FloatRegisterID::F7},
   27|       |                                 {"F8", FloatRegisterID::F8},   {"F9", FloatRegisterID::F9},
   28|       |                                 {"F10", FloatRegisterID::F10}, {"F11", FloatRegisterID::F11},
   29|       |                                 {"F12", FloatRegisterID::F12}, {"F13", FloatRegisterID::F13},
   30|       |                                 {"F14", FloatRegisterID::F14}, {"F15", FloatRegisterID::F15},
   31|       |                                 {"F16", FloatRegisterID::F16}, {"F17", FloatRegisterID::F17},
   32|       |                                 {"F18", FloatRegisterID::F18}, {"F19", FloatRegisterID::F19},
   33|       |                                 {"F20", FloatRegisterID::F20}, {"F21", FloatRegisterID::F21},
   34|       |                                 {"F22", FloatRegisterID::F22}, {"F23", FloatRegisterID::F23},
   35|       |                                 {"F24", FloatRegisterID::F24}, {"F25", FloatRegisterID::F25},
   36|       |                                 {"F26", FloatRegisterID::F26}, {"F27", FloatRegisterID::F27},
   37|       |                                 {"F28", FloatRegisterID::F28}, {"F29", FloatRegisterID::F29},
   38|       |                                 {"F30", FloatRegisterID::F30}, {"F31", FloatRegisterID::F31}}};
   39|       |
   40|       |    IntRegisterID StringToIntRegister(std::string token)
   41|  16.3k|    {
   42|  16.3k|        std::transform(token.begin(), token.end(), token.begin(), ::toupper);
   43|  16.3k|
   44|  16.3k|        static constexpr auto map =
   45|  16.3k|                LookUpMap<std::string_view, IntRegisterID, IntRegisterValues.size()>(
   46|  16.3k|                        IntRegisterValues, IntRegisterID::None);
   47|  16.3k|
   48|  16.3k|        return map.at(token.c_str());
   49|  16.3k|    }
   50|       |
   51|       |    FloatRegisterID StringToFloatRegister(std::string token)
   52|    556|    {
   53|    556|        std::transform(token.begin(), token.end(), token.begin(), ::toupper);
   54|    556|
   55|    556|        static constexpr auto map =
   56|    556|                LookUpMap<std::string_view, FloatRegisterID, FloatRegisterValues.size()>(
   57|    556|                        FloatRegisterValues, FloatRegisterID::None);
   58|    556|
   59|    556|        return map.at(token.c_str());
   60|    556|    }
   61|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionLibrary.cpp:
    1|       |#include "DLX/InstructionLibrary.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/InstructionImplementation.hpp"
    5|       |#include "DLX/InstructionInfo.hpp"
    6|       |#include <magic_enum.hpp>
    7|       |
    8|       |namespace dlx
    9|       |{
   10|       |    InstructionLibrary::InstructionLibrary()
   11|       |        : m_Instructions()
   12|    671|    {
   13|    671|        PHI_ASSERT(Initialize());
   14|    671|    }
   15|       |
   16|       |    phi::Boolean InstructionLibrary::Initialize()
   17|    671|    {
   18|    671|        /* Arithmetic */
   19|    671|
   20|    671|        // Addition
   21|    671|        InitInstruction(OpCode::ADD, ArgumentType::IntRegister, ArgumentType::IntRegister,
   22|    671|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::ADD);
   23|    671|        InitInstruction(OpCode::ADDI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   24|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::ADDI);
   25|    671|        InitInstruction(OpCode::ADDU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   26|    671|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::ADDU);
   27|    671|        InitInstruction(OpCode::ADDUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   28|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::ADDUI);
   29|    671|        InitInstruction(OpCode::ADDF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   30|    671|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::ADDF);
   31|    671|        InitInstruction(OpCode::ADDD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   32|    671|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::ADDD);
   33|    671|
   34|    671|        // Subtraction
   35|    671|        InitInstruction(OpCode::SUB, ArgumentType::IntRegister, ArgumentType::IntRegister,
   36|    671|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SUB);
   37|    671|        InitInstruction(OpCode::SUBI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   38|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SUBI);
   39|    671|        InitInstruction(OpCode::SUBU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   40|    671|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SUBU);
   41|    671|        InitInstruction(OpCode::SUBUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   42|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SUBUI);
   43|    671|        InitInstruction(OpCode::SUBF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   44|    671|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::SUBF);
   45|    671|        InitInstruction(OpCode::SUBD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   46|    671|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::SUBD);
   47|    671|
   48|    671|        // Multiplikation
   49|    671|        InitInstruction(OpCode::MULT, ArgumentType::IntRegister, ArgumentType::IntRegister,
   50|    671|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::MULT);
   51|    671|        InitInstruction(OpCode::MULTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   52|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::MULTI);
   53|    671|        InitInstruction(OpCode::MULTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   54|    671|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::MULTU);
   55|    671|        InitInstruction(OpCode::MULTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   56|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::MULTUI);
   57|    671|        InitInstruction(OpCode::MULTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   58|    671|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::MULTF);
   59|    671|        InitInstruction(OpCode::MULTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   60|    671|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::MULTD);
   61|    671|
   62|    671|        // Division
   63|    671|        InitInstruction(OpCode::DIV, ArgumentType::IntRegister, ArgumentType::IntRegister,
   64|    671|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::DIV);
   65|    671|        InitInstruction(OpCode::DIVI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   66|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::DIVI);
   67|    671|        InitInstruction(OpCode::DIVU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   68|    671|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::DIVU);
   69|    671|        InitInstruction(OpCode::DIVUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   70|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::DIVUI);
   71|    671|        InitInstruction(OpCode::DIVF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   72|    671|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::DIVF);
   73|    671|        InitInstruction(OpCode::DIVD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   74|    671|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::DIVD);
   75|    671|
   76|    671|        // Shift left logical
   77|    671|        InitInstruction(OpCode::SLL, ArgumentType::IntRegister, ArgumentType::IntRegister,
   78|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SLL);
   79|    671|        InitInstruction(OpCode::SLLI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   80|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SLLI);
   81|    671|
   82|    671|        // Shift right logical
   83|    671|        InitInstruction(OpCode::SRL, ArgumentType::IntRegister, ArgumentType::IntRegister,
   84|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SRL);
   85|    671|        InitInstruction(OpCode::SRLI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   86|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SRLI);
   87|    671|
   88|    671|        // Shift left arithmetic
   89|    671|        InitInstruction(OpCode::SLA, ArgumentType::IntRegister, ArgumentType::IntRegister,
   90|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SLA);
   91|    671|        InitInstruction(OpCode::SLAI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   92|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SLAI);
   93|    671|
   94|    671|        // Shift right arithmetic
   95|    671|        InitInstruction(OpCode::SRA, ArgumentType::IntRegister, ArgumentType::IntRegister,
   96|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SRA);
   97|    671|        InitInstruction(OpCode::SRAI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   98|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SRAI);
   99|    671|
  100|    671|        /* Logical */
  101|    671|
  102|    671|        // And
  103|    671|        InitInstruction(OpCode::AND, ArgumentType::IntRegister, ArgumentType::IntRegister,
  104|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::AND);
  105|    671|        InitInstruction(OpCode::ANDI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  106|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::ANDI);
  107|    671|
  108|    671|        // Or
  109|    671|        InitInstruction(OpCode::OR, ArgumentType::IntRegister, ArgumentType::IntRegister,
  110|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::OR);
  111|    671|        InitInstruction(OpCode::ORI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  112|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::ORI);
  113|    671|
  114|    671|        // Xor
  115|    671|        InitInstruction(OpCode::XOR, ArgumentType::IntRegister, ArgumentType::IntRegister,
  116|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::XOR);
  117|    671|        InitInstruction(OpCode::XORI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  118|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::XORI);
  119|    671|
  120|    671|        /* Conditionals */
  121|    671|
  122|    671|        // Set less than
  123|    671|        InitInstruction(OpCode::SLT, ArgumentType::IntRegister, ArgumentType::IntRegister,
  124|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SLT);
  125|    671|        InitInstruction(OpCode::SLTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  126|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SLTI);
  127|    671|        InitInstruction(OpCode::LTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  128|    671|                        ArgumentType::FloatRegister, RegisterAccessType::MixedFloatDouble,
  129|    671|                        impl::LTF);
  130|    671|        InitInstruction(OpCode::LTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  131|    671|                        ArgumentType::FloatRegister, RegisterAccessType::MixedFloatDouble,
  132|    671|                        impl::LTD);
  133|    671|
  134|    671|        // Set greater than
  135|    671|        InitInstruction(OpCode::SGT, ArgumentType::IntRegister, ArgumentType::IntRegister,
  136|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SGT);
  137|    671|        InitInstruction(OpCode::SGTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  138|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SGTI);
  139|    671|        InitInstruction(OpCode::GTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  140|    671|                        ArgumentType::FloatRegister, RegisterAccessType::MixedFloatDouble,
  141|    671|                        impl::GTF);
  142|    671|        InitInstruction(OpCode::GTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  143|    671|                        ArgumentType::FloatRegister, RegisterAccessType::MixedFloatDouble,
  144|    671|                        impl::GTD);
  145|    671|
  146|    671|        // Set less than or equal
  147|    671|        InitInstruction(OpCode::SLE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  148|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SLE);
  149|    671|        InitInstruction(OpCode::SLEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  150|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SLEI);
  151|    671|        InitInstruction(OpCode::LEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  152|    671|                        ArgumentType::FloatRegister, RegisterAccessType::MixedFloatDouble,
  153|    671|                        impl::LEF);
  154|    671|        InitInstruction(OpCode::LED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  155|    671|                        ArgumentType::FloatRegister, RegisterAccessType::MixedFloatDouble,
  156|    671|                        impl::LED);
  157|    671|
  158|    671|        // Set greater than or equal
  159|    671|        InitInstruction(OpCode::SGE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  160|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SGE);
  161|    671|        InitInstruction(OpCode::SGEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  162|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SGEI);
  163|    671|        InitInstruction(OpCode::GEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  164|    671|                        ArgumentType::FloatRegister, RegisterAccessType::MixedFloatDouble,
  165|    671|                        impl::GEF);
  166|    671|        InitInstruction(OpCode::GED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  167|    671|                        ArgumentType::FloatRegister, RegisterAccessType::MixedFloatDouble,
  168|    671|                        impl::GED);
  169|    671|
  170|    671|        // Set equal
  171|    671|        InitInstruction(OpCode::SEQ, ArgumentType::IntRegister, ArgumentType::IntRegister,
  172|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SEQ);
  173|    671|        InitInstruction(OpCode::SEQI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  174|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SEQI);
  175|    671|        InitInstruction(OpCode::EQF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  176|    671|                        ArgumentType::FloatRegister, RegisterAccessType::MixedFloatDouble,
  177|    671|                        impl::EQF);
  178|    671|        InitInstruction(OpCode::EQD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  179|    671|                        ArgumentType::FloatRegister, RegisterAccessType::MixedFloatDouble,
  180|    671|                        impl::EQD);
  181|    671|
  182|    671|        // Set not equal
  183|    671|        InitInstruction(OpCode::SNE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  184|    671|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SNE);
  185|    671|        InitInstruction(OpCode::SNEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  186|    671|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SNEI);
  187|    671|        InitInstruction(OpCode::NEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  188|    671|                        ArgumentType::FloatRegister, RegisterAccessType::MixedFloatDouble,
  189|    671|                        impl::NEF);
  190|    671|        InitInstruction(OpCode::NED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  191|    671|                        ArgumentType::FloatRegister, RegisterAccessType::MixedFloatDouble,
  192|    671|                        impl::NED);
  193|    671|
  194|    671|        /* Conditional branching */
  195|    671|
  196|    671|        // Branch equal zero
  197|    671|        InitInstruction(OpCode::BEQZ, ArgumentType::IntRegister, ArgumentType::Label,
  198|    671|                        ArgumentType::None, RegisterAccessType::Ignored, impl::BEQZ);
  199|    671|
  200|    671|        // Branch not equal zero
  201|    671|        InitInstruction(OpCode::BNEZ, ArgumentType::IntRegister, ArgumentType::Label,
  202|    671|                        ArgumentType::None, RegisterAccessType::Ignored, impl::BNEZ);
  203|    671|
  204|    671|        // Branch floating point true
  205|    671|        InitInstruction(OpCode::BFPT, ArgumentType::FloatRegister, ArgumentType::Label,
  206|    671|                        ArgumentType::None, RegisterAccessType::Ignored, impl::BFPT);
  207|    671|
  208|    671|        // Branch floating point false
  209|    671|        InitInstruction(OpCode::BFPF, ArgumentType::FloatRegister, ArgumentType::Label,
  210|    671|                        ArgumentType::None, RegisterAccessType::Ignored, impl::BFPF);
  211|    671|
  212|    671|        /* Unconditional branching */
  213|    671|
  214|    671|        // Jump
  215|    671|        InitInstruction(OpCode::J, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  216|    671|                        RegisterAccessType::None, impl::J);
  217|    671|
  218|    671|        // Jump to register
  219|    671|        InitInstruction(OpCode::JR, ArgumentType::IntRegister, ArgumentType::None,
  220|    671|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::JR);
  221|    671|
  222|    671|        // Jump and link
  223|    671|        InitInstruction(OpCode::JAL, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  224|    671|                        RegisterAccessType::Unsigned, impl::JAL);
  225|    671|
  226|    671|        // Jump and link to register
  227|    671|        InitInstruction(OpCode::JALR, ArgumentType::IntRegister, ArgumentType::None,
  228|    671|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::JALR);
  229|    671|
  230|    671|        /* Loading data */
  231|    671|
  232|    671|        // Load byte
  233|    671|        InitInstruction(OpCode::LB, ArgumentType::IntRegister,
  234|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  235|    671|                        ArgumentType::None, RegisterAccessType::Signed, impl::LB);
  236|    671|
  237|    671|        // Load byte unsigned
  238|    671|        InitInstruction(OpCode::LBU, ArgumentType::IntRegister,
  239|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  240|    671|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LBU);
  241|    671|
  242|    671|        // Load half word
  243|    671|        InitInstruction(OpCode::LH, ArgumentType::IntRegister,
  244|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  245|    671|                        ArgumentType::None, RegisterAccessType::Signed, impl::LH);
  246|    671|
  247|    671|        // Load half word unsigned
  248|    671|        InitInstruction(OpCode::LHU, ArgumentType::IntRegister,
  249|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  250|    671|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LHU);
  251|    671|
  252|    671|        // Load word
  253|    671|        InitInstruction(OpCode::LW, ArgumentType::IntRegister,
  254|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  255|    671|                        ArgumentType::None, RegisterAccessType::Signed, impl::LW);
  256|    671|
  257|    671|        // Load word unsigned
  258|    671|        InitInstruction(OpCode::LWU, ArgumentType::IntRegister,
  259|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  260|    671|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LWU);
  261|    671|
  262|    671|        // Load float
  263|    671|        InitInstruction(OpCode::LF, ArgumentType::FloatRegister,
  264|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  265|    671|                        ArgumentType::None, RegisterAccessType::Float, impl::LF);
  266|    671|
  267|    671|        // Load double
  268|    671|        InitInstruction(OpCode::LD, ArgumentType::FloatRegister,
  269|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  270|    671|                        ArgumentType::None, RegisterAccessType::Double, impl::LD);
  271|    671|
  272|    671|        /* Storing data */
  273|    671|
  274|    671|        // Store byte
  275|    671|        InitInstruction(OpCode::SB,
  276|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  277|    671|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  278|    671|                        impl::SB);
  279|    671|
  280|    671|        // Store byte unsigned
  281|    671|        InitInstruction(OpCode::SBU,
  282|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  283|    671|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  284|    671|                        impl::SBU);
  285|    671|
  286|    671|        // Store half word
  287|    671|        InitInstruction(OpCode::SH,
  288|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  289|    671|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  290|    671|                        impl::SH);
  291|    671|
  292|    671|        // Store half word unsigned
  293|    671|        InitInstruction(OpCode::SHU,
  294|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  295|    671|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  296|    671|                        impl::SHU);
  297|    671|
  298|    671|        // Store word
  299|    671|        InitInstruction(OpCode::SW,
  300|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  301|    671|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  302|    671|                        impl::SW);
  303|    671|
  304|    671|        // Store word unsigned
  305|    671|        InitInstruction(OpCode::SWU,
  306|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  307|    671|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  308|    671|                        impl::SWU);
  309|    671|
  310|    671|        // Store float
  311|    671|        InitInstruction(OpCode::SF,
  312|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  313|    671|                        ArgumentType::FloatRegister, ArgumentType::None, RegisterAccessType::Float,
  314|    671|                        impl::SF);
  315|    671|
  316|    671|        // Store double
  317|    671|        InitInstruction(OpCode::SD,
  318|    671|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  319|    671|                        ArgumentType::FloatRegister, ArgumentType::None,
  320|    671|                        RegisterAccessType::Double, impl::SD);
  321|    671|
  322|    671|        /* Special */
  323|    671|
  324|    671|        // Trap
  325|    671|        InitInstruction(OpCode::TRAP, ArgumentType::ImmediateInteger, ArgumentType::None,
  326|    671|                        ArgumentType::None, RegisterAccessType::None, impl::TRAP);
  327|    671|
  328|    671|        // Halt
  329|    671|        InitInstruction(OpCode::HALT, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  330|    671|                        RegisterAccessType::None, impl::HALT);
  331|    671|
  332|    671|        // No operation
  333|    671|        InitInstruction(OpCode::NOP, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  334|    671|                        RegisterAccessType::None, impl::NOP);
  335|    671|
  336|    671|        return true;
  337|    671|    }
  338|       |
  339|       |    const InstructionInfo& InstructionLibrary::LookUp(OpCode instruction) const noexcept
  340|  67.5k|    {
  341|  67.5k|        return m_Instructions.at(static_cast<std::size_t>(instruction));
  342|  67.5k|    }
  343|       |
  344|       |    void InstructionLibrary::InitInstruction(OpCode opcode, ArgumentType arg1, ArgumentType arg2,
  345|       |                                             ArgumentType        arg3,
  346|       |                                             RegisterAccessType  register_access_type,
  347|       |                                             InstructionExecutor executor)
  348|  59.7k|    {
  349|  59.7k|        PHI_ASSERT(LookUp(opcode).GetExecutor() == nullptr, "Already registered instruction {}",
  350|  59.7k|                   magic_enum::enum_name(opcode));
  351|  59.7k|
  352|  59.7k|        m_Instructions.at(static_cast<std::size_t>(opcode)) =
  353|  59.7k|                InstructionInfo(opcode, arg1, arg2, arg3, register_access_type, executor);
  354|  59.7k|    }
  355|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/IntRegister.cpp:
    1|       |#include "DLX/IntRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    IntRegister::IntRegister()
    6|       |        : m_ValueSigned{0}
    7|       |        , m_IsReadOnly{false}
    8|  21.4k|    {}
    9|       |
   10|       |    void IntRegister::SetSignedValue(phi::i32 val)
   11|  36.6k|    {
   12|  36.6k|        m_ValueSigned = val;
   13|  36.6k|    }
   14|       |
   15|       |    void IntRegister::SetUnsignedValue(phi::u32 val)
   16|  10.0k|    {
   17|  10.0k|        m_ValueUnsigned = val;
   18|  10.0k|    }
   19|       |
   20|       |    phi::i32 IntRegister::GetSignedValue() const
   21|  33.2k|    {
   22|  33.2k|        return m_ValueSigned;
   23|  33.2k|    }
   24|       |
   25|       |    phi::u32 IntRegister::GetUnsignedValue() const
   26|  20.2k|    {
   27|  20.2k|        return m_ValueUnsigned;
   28|  20.2k|    }
   29|       |
   30|       |    phi::Boolean IntRegister::IsReadOnly() const
   31|  28.0k|    {
   32|  28.0k|        return m_IsReadOnly;
   33|  28.0k|    }
   34|       |
   35|       |    void IntRegister::SetReadOnly(phi::Boolean read_only)
   36|    671|    {
   37|    671|        m_IsReadOnly = read_only;
   38|    671|    }
   39|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionInfo.cpp:
    1|       |#include "DLX/InstructionInfo.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void InstructionInfo::Execute(Processor& processor, const InstructionArg& arg1,
    6|       |                                  const InstructionArg& arg2,
    7|       |                                  const InstructionArg& arg3) const noexcept
    8|  50.6k|    {
    9|  50.6k|        PHI_ASSERT(m_Executor, "No execution function defined");
   10|  50.6k|
   11|  50.6k|        m_Executor(processor, arg1, arg2, arg3);
   12|  50.6k|    }
   13|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionImplementation.cpp:
    1|       |#include "DLX/InstructionImplementation.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/InstructionInfo.hpp"
    5|       |#include "DLX/Parser.hpp"
    6|       |#include "DLX/Processor.hpp"
    7|       |#include "DLX/RegisterNames.hpp"
    8|       |#include "Phi/Core/Assert.hpp"
    9|       |#include "Phi/Core/Types.hpp"
   10|       |#include <string_view>
   11|       |
   12|       |namespace dlx
   13|       |{
   14|       |    static constexpr float float_true{1.0f};
   15|       |    static constexpr float float_false{0.0f};
   16|       |
   17|       |    static std::int32_t clear_top_n_bits(std::int32_t value, std::int32_t n)
   18|      3|    {
   19|      3|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behaviour");
   20|      3|
   21|      3|        return value & ~(-1 << (32 - n));
   22|      3|    }
   23|       |
   24|       |    static void JumpToLabel(Processor& processor, std::string_view label_name)
   25|  12.5k|    {
   26|  12.5k|        // Lookup the label
   27|  12.5k|        const phi::ObserverPtr<ParsedProgram> program = processor.GetCurrentProgramm();
   28|  12.5k|        PHI_ASSERT(program);
   29|  12.5k|
   30|  12.5k|        std::string label(label_name.data(), label_name.size());
   31|  12.5k|        if (program->m_JumpData.find(label) == program->m_JumpData.end())
   32|     14|        {
   33|     14|            PHI_LOG_ERROR("Unable to find jump label {}", label_name);
   34|     14|            processor.Raise(Exception::UnknownLabel);
   35|     14|            return;
   36|     14|        }
   37|  12.5k|
   38|  12.5k|        // Set program counter
   39|  12.5k|        processor.m_NextProgramCounter = program->m_JumpData.at(label);
   40|  12.5k|    }
   41|       |
   42|       |    static void JumpToRegister(Processor& processor, IntRegisterID reg_id)
   43|  20.0k|    {
   44|  20.0k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   45|  20.0k|
   46|  20.0k|        phi::u32 max_address =
   47|  20.0k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   48|  20.0k|        if (address >= max_address)
   49|      0|        {
   50|      0|            processor.Raise(Exception::AddressOutOfBounds);
   51|      0|            return;
   52|      0|        }
   53|  20.0k|
   54|  20.0k|        processor.m_NextProgramCounter = address.get();
   55|  20.0k|    }
   56|       |
   57|       |    static std::optional<phi::i32> CalculateDisplacementAddress(
   58|       |            Processor& processor, const InstructionArg::AddressDisplacement& adr_displacement)
   59|  2.51k|    {
   60|  2.51k|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   61|  2.51k|
   62|  2.51k|        phi::i32 address = adr_displacement.displacement + register_value;
   63|  2.51k|
   64|  2.51k|        if (address < 0)
   65|      0|        {
   66|      0|            processor.Raise(Exception::AddressOutOfBounds);
   67|      0|            return {};
   68|      0|        }
   69|  2.51k|
   70|  2.51k|        return address;
   71|  2.51k|    }
   72|       |
   73|       |    static std::optional<phi::i32> GetLoadStoreAddress(Processor&           processor,
   74|       |                                                       const InstructionArg argument)
   75|  2.53k|    {
   76|  2.53k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
   77|     20|        {
   78|     20|            const auto& imm_value = argument.AsImmediateValue();
   79|     20|
   80|     20|            if (imm_value.signed_value < 0)
   81|      2|            {
   82|      2|                return {};
   83|      2|            }
   84|     18|
   85|     18|            return imm_value.signed_value;
   86|     18|        }
   87|  2.51k|        else if (argument.GetType() == ArgumentType::AddressDisplacement)
   88|  2.51k|        {
   89|  2.51k|            const auto& adr_displacement = argument.AsAddressDisplacement();
   90|  2.51k|            return CalculateDisplacementAddress(processor, adr_displacement);
   91|  2.51k|        }
   92|      0|        else
   93|      0|        {
   94|      0|            PHI_ASSERT_NOT_REACHED();
   95|      0|        }
   96|  2.53k|    }
   97|       |
   98|       |    static void SafeWriteInteger(Processor& processor, IntRegisterID dest_reg, phi::i64 value)
   99|  2.75k|    {
  100|  2.75k|        constexpr phi::i64 min = phi::i32::limits_type::min();
  101|  2.75k|        constexpr phi::i64 max = phi::i32::limits_type::max();
  102|  2.75k|
  103|  2.75k|        // Check for underflow
  104|  2.75k|        if (value < min)
  105|      0|        {
  106|      0|            processor.Raise(Exception::Underflow);
  107|      0|
  108|      0|            value = max + (value % (min - 1));
  109|      0|        }
  110|  2.75k|        // Check for overflow
  111|  2.75k|        else if (value > max)
  112|      1|        {
  113|      1|            processor.Raise(Exception::Overflow);
  114|      1|
  115|      1|            value = min + (value % (max + 1));
  116|      1|        }
  117|  2.75k|
  118|  2.75k|        PHI_ASSERT(value >= min);
  119|  2.75k|        PHI_ASSERT(value <= max);
  120|  2.75k|
  121|  2.75k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.get()));
  122|  2.75k|    }
  123|       |
  124|       |    static void SafeWriteInteger(Processor& processor, IntRegisterID dest_reg, phi::u64 value)
  125|    159|    {
  126|    159|        constexpr phi::u64 min = phi::u32::limits_type::min();
  127|    159|        constexpr phi::u64 max = phi::u32::limits_type::max();
  128|    159|
  129|    159|        // Check for overflow
  130|    159|        if (value > max)
  131|      0|        {
  132|      0|            processor.Raise(Exception::Overflow);
  133|      0|
  134|      0|            value %= max + 1u;
  135|      0|        }
  136|    159|
  137|    159|        PHI_ASSERT(value <= max);
  138|    159|
  139|    159|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.get()));
  140|    159|    }
  141|       |
  142|       |    static void Addition(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs, phi::i32 rhs)
  143|  2.60k|    {
  144|  2.60k|        phi::i64 res = phi::i64(lhs) + rhs;
  145|  2.60k|
  146|  2.60k|        SafeWriteInteger(processor, dest_reg, res);
  147|  2.60k|    }
  148|       |
  149|       |    static void Addition(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs, phi::u32 rhs)
  150|     96|    {
  151|     96|        phi::u64 res = phi::u64(lhs) + rhs;
  152|     96|
  153|     96|        SafeWriteInteger(processor, dest_reg, res);
  154|     96|    }
  155|       |
  156|       |    static void Subtraction(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  157|       |                            phi::i32 rhs)
  158|    105|    {
  159|    105|        phi::i64 res = phi::i64(lhs) - rhs;
  160|    105|
  161|    105|        SafeWriteInteger(processor, dest_reg, res);
  162|    105|    }
  163|       |
  164|       |    static void Subtraction(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  165|       |                            phi::u32 rhs)
  166|     37|    {
  167|     37|        constexpr phi::u32 max = phi::u32::limits_type::max();
  168|     37|
  169|     37|        if (lhs < rhs)
  170|      1|        {
  171|      1|            processor.Raise(Exception::Underflow);
  172|      1|
  173|      1|            phi::u64 res = max - rhs + lhs + 1u;
  174|      1|            SafeWriteInteger(processor, dest_reg, res);
  175|      1|            return;
  176|      1|        }
  177|     36|
  178|     36|        phi::u64 res = phi::u64(lhs) - rhs;
  179|     36|
  180|     36|        SafeWriteInteger(processor, dest_reg, res);
  181|     36|    }
  182|       |
  183|       |    static void Multiplication(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  184|       |                               phi::i32 rhs)
  185|     48|    {
  186|     48|        phi::i64 res = phi::i64(lhs) * rhs;
  187|     48|
  188|     48|        SafeWriteInteger(processor, dest_reg, res);
  189|     48|    }
  190|       |
  191|       |    static void Multiplication(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  192|       |                               phi::u32 rhs)
  193|     25|    {
  194|     25|        phi::u64 res = phi::u64(lhs) * rhs;
  195|     25|
  196|     25|        SafeWriteInteger(processor, dest_reg, res);
  197|     25|    }
  198|       |
  199|       |    static void Division(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs, phi::i32 rhs)
  200|     50|    {
  201|     50|        if (rhs == 0)
  202|     49|        {
  203|     49|            processor.Raise(Exception::DivideByZero);
  204|     49|            return;
  205|     49|        }
  206|      1|
  207|      1|        phi::i64 res = phi::i64(lhs) / rhs;
  208|      1|
  209|      1|        SafeWriteInteger(processor, dest_reg, res);
  210|      1|    }
  211|       |
  212|       |    static void Division(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs, phi::u32 rhs)
  213|      3|    {
  214|      3|        if (rhs == 0u)
  215|      2|        {
  216|      2|            processor.Raise(Exception::DivideByZero);
  217|      2|            return;
  218|      2|        }
  219|      1|
  220|      1|        phi::u64 res = phi::u64(lhs) / rhs;
  221|      1|
  222|      1|        SafeWriteInteger(processor, dest_reg, res);
  223|      1|    }
  224|       |
  225|       |    static void ShiftRightLogical(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  226|       |                                  phi::i32 shift)
  227|      8|    {
  228|      8|        // Prevent undefined behavior by shifting by more than 31
  229|      8|        if (shift > 31)
  230|      1|        {
  231|      1|            processor.Raise(Exception::BadShift);
  232|      1|
  233|      1|            // Just set register to 0
  234|      1|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  235|      1|            return;
  236|      1|        }
  237|      7|        else if (shift == 0)
  238|      3|        {
  239|      3|            // Do nothing when shifting by zero to prevent undefined behavior
  240|      3|            return;
  241|      3|        }
  242|      4|        else if (shift < 0)
  243|      1|        {
  244|      1|            processor.Raise(Exception::BadShift);
  245|      1|            return;
  246|      1|        }
  247|      3|
  248|      3|        phi::i32 new_value = base.get() >> shift.get();
  249|      3|
  250|      3|        new_value = clear_top_n_bits(new_value.get(), shift.get());
  251|      3|
  252|      3|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  253|      3|    }
  254|       |
  255|       |    static void ShiftRightArithmetic(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  256|       |                                     phi::i32 shift)
  257|      4|    {
  258|      4|        // Prevent undefined behavior by shifting by more than 31
  259|      4|        if (shift > 31)
  260|      1|        {
  261|      1|            processor.Raise(Exception::BadShift);
  262|      1|
  263|      1|            // Is negative ie. sign bit is set
  264|      1|            if (base < 0)
  265|      0|            {
  266|      0|                // Set every byte to 1
  267|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  268|      0|            }
  269|      1|            else
  270|      1|            {
  271|      1|                // Set every byte to 0
  272|      1|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  273|      1|            }
  274|      1|            return;
  275|      1|        }
  276|      3|        else if (shift < 0)
  277|      1|        {
  278|      1|            processor.Raise(Exception::BadShift);
  279|      1|            return;
  280|      1|        }
  281|      2|
  282|      2|        phi::i32 new_value = base.get() >> shift.get();
  283|      2|
  284|      2|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  285|      2|    }
  286|       |
  287|       |    // Behavior is the same for logical and arithmetic shifts
  288|       |    static void ShiftLeft(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  289|       |                          phi::i32 shift)
  290|     12|    {
  291|     12|        if (shift > 31)
  292|      2|        {
  293|      2|            processor.Raise(Exception::BadShift);
  294|      2|
  295|      2|            // Just set register to 0
  296|      2|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  297|      2|            return;
  298|      2|        }
  299|     10|        else if (shift < 0)
  300|      2|        {
  301|      2|            processor.Raise(Exception::BadShift);
  302|      2|            return;
  303|      2|        }
  304|      8|
  305|      8|        phi::i32 new_value = base.get() << shift.get();
  306|      8|
  307|      8|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  308|      8|    }
  309|       |
  310|       |    namespace impl
  311|       |    {
  312|       |        void ADD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  313|       |                 const InstructionArg& arg3)
  314|  2.55k|        {
  315|  2.55k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  316|  2.55k|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  317|  2.55k|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  318|  2.55k|
  319|  2.55k|            const auto& dest_reg = arg1.AsRegisterInt();
  320|  2.55k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  321|  2.55k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  322|  2.55k|
  323|  2.55k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  324|  2.55k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  325|  2.55k|
  326|  2.55k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  327|  2.55k|        }
  328|       |
  329|       |        void ADDI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  330|       |                  const InstructionArg& arg3)
  331|     50|        {
  332|     50|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  333|     50|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  334|     50|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  335|     50|
  336|     50|            const auto& dest_reg  = arg1.AsRegisterInt();
  337|     50|            const auto& src_reg   = arg2.AsRegisterInt();
  338|     50|            const auto& imm_value = arg3.AsImmediateValue();
  339|     50|
  340|     50|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  341|     50|
  342|     50|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  343|     50|        }
  344|       |
  345|       |        void ADDU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  346|       |                  const InstructionArg& arg3)
  347|     48|        {
  348|     48|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  349|     48|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  350|     48|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  351|     48|
  352|     48|            const auto& dest_reg = arg1.AsRegisterInt();
  353|     48|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|     48|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|     48|
  356|     48|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  357|     48|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  358|     48|
  359|     48|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|     48|        }
  361|       |
  362|       |        void ADDUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  363|       |                   const InstructionArg& arg3)
  364|     48|        {
  365|     48|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  366|     48|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  367|     48|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  368|     48|
  369|     48|            const auto& dest_reg  = arg1.AsRegisterInt();
  370|     48|            const auto& src_reg   = arg2.AsRegisterInt();
  371|     48|            const auto& imm_value = arg3.AsImmediateValue();
  372|     48|
  373|     48|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  374|     48|
  375|     48|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  376|     48|        }
  377|       |
  378|       |        void ADDF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  379|       |                  const InstructionArg& arg3)
  380|      0|        {
  381|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  382|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  383|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  384|      0|
  385|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  386|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  387|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  388|      0|
  389|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  390|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  391|      0|
  392|      0|            const phi::f32 new_value = lhs_value + rhs_value;
  393|      0|
  394|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  395|      0|        }
  396|       |
  397|       |        void ADDD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  398|       |                  const InstructionArg& arg3)
  399|      0|        {
  400|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  401|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  402|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  403|      0|
  404|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  405|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  406|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  407|      0|
  408|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  409|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  410|      0|
  411|      0|            const phi::f64 new_value = lhs_value + rhs_value;
  412|      0|
  413|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  414|      0|        }
  415|       |
  416|       |        void SUB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  417|       |                 const InstructionArg& arg3)
  418|     48|        {
  419|     48|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  420|     48|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  421|     48|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  422|     48|
  423|     48|            const auto& dest_reg = arg1.AsRegisterInt();
  424|     48|            const auto& lhs_reg  = arg2.AsRegisterInt();
  425|     48|            const auto& rhs_reg  = arg3.AsRegisterInt();
  426|     48|
  427|     48|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  428|     48|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  429|     48|
  430|     48|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  431|     48|        }
  432|       |
  433|       |        void SUBI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  434|       |                  const InstructionArg& arg3)
  435|     57|        {
  436|     57|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  437|     57|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  438|     57|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  439|     57|
  440|     57|            const auto& dest_reg  = arg1.AsRegisterInt();
  441|     57|            const auto& src_reg   = arg2.AsRegisterInt();
  442|     57|            const auto& imm_value = arg3.AsImmediateValue();
  443|     57|
  444|     57|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  445|     57|
  446|     57|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  447|     57|        }
  448|       |
  449|       |        void SUBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  450|       |                  const InstructionArg& arg3)
  451|     24|        {
  452|     24|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  453|     24|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  454|     24|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  455|     24|
  456|     24|            const auto& dest_reg = arg1.AsRegisterInt();
  457|     24|            const auto& lhs_reg  = arg2.AsRegisterInt();
  458|     24|            const auto& rhs_reg  = arg3.AsRegisterInt();
  459|     24|
  460|     24|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  461|     24|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  462|     24|
  463|     24|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  464|     24|        }
  465|       |
  466|       |        void SUBUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  467|       |                   const InstructionArg& arg3)
  468|     13|        {
  469|     13|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  470|     13|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  471|     13|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  472|     13|
  473|     13|            const auto& dest_reg  = arg1.AsRegisterInt();
  474|     13|            const auto& src_reg   = arg2.AsRegisterInt();
  475|     13|            const auto& imm_value = arg3.AsImmediateValue();
  476|     13|
  477|     13|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  478|     13|
  479|     13|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  480|     13|        }
  481|       |
  482|       |        void SUBF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  483|       |                  const InstructionArg& arg3)
  484|      0|        {
  485|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  486|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  487|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  488|      0|
  489|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  490|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  491|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  492|      0|
  493|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  494|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  495|      0|
  496|      0|            const phi::f32 new_value = lhs_value - rhs_value;
  497|      0|
  498|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  499|      0|        }
  500|       |
  501|       |        void SUBD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  502|       |                  const InstructionArg& arg3)
  503|      0|        {
  504|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  505|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  506|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  507|      0|
  508|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  509|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  510|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  511|      0|
  512|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  513|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  514|      0|
  515|      0|            const phi::f64 new_value = lhs_value - rhs_value;
  516|      0|
  517|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  518|      0|        }
  519|       |
  520|       |        void MULT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  521|       |                  const InstructionArg& arg3)
  522|     24|        {
  523|     24|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  524|     24|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  525|     24|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  526|     24|
  527|     24|            const auto& dest_reg = arg1.AsRegisterInt();
  528|     24|            const auto& lhs_reg  = arg2.AsRegisterInt();
  529|     24|            const auto& rhs_reg  = arg3.AsRegisterInt();
  530|     24|
  531|     24|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  532|     24|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  533|     24|
  534|     24|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  535|     24|        }
  536|       |
  537|       |        void MULTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  538|       |                   const InstructionArg& arg3)
  539|     24|        {
  540|     24|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  541|     24|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  542|     24|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  543|     24|
  544|     24|            const auto& dest_reg  = arg1.AsRegisterInt();
  545|     24|            const auto& src_reg   = arg2.AsRegisterInt();
  546|     24|            const auto& imm_value = arg3.AsImmediateValue();
  547|     24|
  548|     24|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  549|     24|
  550|     24|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  551|     24|        }
  552|       |
  553|       |        void MULTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  554|       |                   const InstructionArg& arg3)
  555|     24|        {
  556|     24|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  557|     24|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  558|     24|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  559|     24|
  560|     24|            const auto& dest_reg = arg1.AsRegisterInt();
  561|     24|            const auto& lhs_reg  = arg2.AsRegisterInt();
  562|     24|            const auto& rhs_reg  = arg3.AsRegisterInt();
  563|     24|
  564|     24|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  565|     24|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  566|     24|
  567|     24|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  568|     24|        }
  569|       |
  570|       |        void MULTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  571|       |                    const InstructionArg& arg3)
  572|      1|        {
  573|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  574|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  575|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  576|      1|
  577|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  578|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  579|      1|            const auto& imm_value = arg3.AsImmediateValue();
  580|      1|
  581|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  582|      1|
  583|      1|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  584|      1|        }
  585|       |
  586|       |        void MULTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  587|       |                   const InstructionArg& arg3)
  588|      0|        {
  589|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  590|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  591|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  592|      0|
  593|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  594|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  595|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  596|      0|
  597|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  598|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  599|      0|
  600|      0|            const phi::f32 new_value = lhs_value * rhs_value;
  601|      0|
  602|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  603|      0|        }
  604|       |
  605|       |        void MULTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  606|       |                   const InstructionArg& arg3)
  607|      0|        {
  608|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  609|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  610|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  611|      0|
  612|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  613|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  614|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  615|      0|
  616|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  617|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  618|      0|
  619|      0|            const phi::f64 new_value = lhs_value * rhs_value;
  620|      0|
  621|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  622|      0|        }
  623|       |
  624|       |        void DIV(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  625|       |                 const InstructionArg& arg3)
  626|     48|        {
  627|     48|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  628|     48|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  629|     48|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  630|     48|
  631|     48|            const auto& dest_reg = arg1.AsRegisterInt();
  632|     48|            const auto& lhs_reg  = arg2.AsRegisterInt();
  633|     48|            const auto& rhs_reg  = arg3.AsRegisterInt();
  634|     48|
  635|     48|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  636|     48|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  637|     48|
  638|     48|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  639|     48|        }
  640|       |
  641|       |        void DIVI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  642|       |                  const InstructionArg& arg3)
  643|      2|        {
  644|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  645|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  646|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  647|      2|
  648|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  649|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  650|      2|            const auto& imm_value = arg3.AsImmediateValue();
  651|      2|
  652|      2|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  653|      2|
  654|      2|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  655|      2|        }
  656|       |
  657|       |        void DIVU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  658|       |                  const InstructionArg& arg3)
  659|      1|        {
  660|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  661|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  662|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  663|      1|
  664|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  665|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  666|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  667|      1|
  668|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  669|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  670|      1|
  671|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  672|      1|        }
  673|       |
  674|       |        void DIVUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  675|       |                   const InstructionArg& arg3)
  676|      2|        {
  677|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  678|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  679|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  680|      2|
  681|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  682|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  683|      2|            const auto& imm_value = arg3.AsImmediateValue();
  684|      2|
  685|      2|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  686|      2|
  687|      2|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  688|      2|        }
  689|       |
  690|       |        void DIVF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  691|       |                  const InstructionArg& arg3)
  692|      0|        {
  693|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  694|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  695|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  696|      0|
  697|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  698|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  699|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  700|      0|
  701|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  702|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  703|      0|
  704|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  705|      0|
  706|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  707|      0|        }
  708|       |
  709|       |        void DIVD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  710|       |                  const InstructionArg& arg3)
  711|      0|        {
  712|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  713|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  714|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  715|      0|
  716|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  717|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  718|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  719|      0|
  720|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  721|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  722|      0|
  723|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  724|      0|
  725|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  726|      0|        }
  727|       |
  728|       |        void SLL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  729|       |                 const InstructionArg& arg3)
  730|      1|        {
  731|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  732|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  733|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  734|      1|
  735|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  736|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  737|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  738|      1|
  739|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  740|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  741|      1|
  742|      1|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  743|      1|        }
  744|       |
  745|       |        void SLLI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  746|       |                  const InstructionArg& arg3)
  747|      5|        {
  748|      5|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  749|      5|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  750|      5|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  751|      5|
  752|      5|            const auto& dest_reg  = arg1.AsRegisterInt();
  753|      5|            const auto& src_reg   = arg2.AsRegisterInt();
  754|      5|            const auto& imm_value = arg3.AsImmediateValue();
  755|      5|
  756|      5|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  757|      5|            phi::i32 shift_value = imm_value.signed_value;
  758|      5|
  759|      5|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  760|      5|        }
  761|       |
  762|       |        void SRL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  763|       |                 const InstructionArg& arg3)
  764|      3|        {
  765|      3|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  766|      3|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  767|      3|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  768|      3|
  769|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  770|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  771|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  772|      3|
  773|      3|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  774|      3|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  775|      3|
  776|      3|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  777|      3|        }
  778|       |
  779|       |        void SRLI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  780|       |                  const InstructionArg& arg3)
  781|      5|        {
  782|      5|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  783|      5|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  784|      5|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  785|      5|
  786|      5|            const auto& dest_reg  = arg1.AsRegisterInt();
  787|      5|            const auto& src_reg   = arg2.AsRegisterInt();
  788|      5|            const auto& imm_value = arg3.AsImmediateValue();
  789|      5|
  790|      5|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  791|      5|            phi::i32 shift_value = imm_value.signed_value;
  792|      5|
  793|      5|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  794|      5|        }
  795|       |
  796|       |        void SLA(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  797|       |                 const InstructionArg& arg3)
  798|      3|        {
  799|      3|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  800|      3|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  801|      3|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  802|      3|
  803|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  804|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  805|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  806|      3|
  807|      3|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  808|      3|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  809|      3|
  810|      3|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  811|      3|        }
  812|       |
  813|       |        void SLAI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  814|       |                  const InstructionArg& arg3)
  815|      3|        {
  816|      3|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  817|      3|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  818|      3|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  819|      3|
  820|      3|            const auto& dest_reg  = arg1.AsRegisterInt();
  821|      3|            const auto& src_reg   = arg2.AsRegisterInt();
  822|      3|            const auto& imm_value = arg3.AsImmediateValue();
  823|      3|
  824|      3|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  825|      3|            phi::i32 shift_value = imm_value.signed_value;
  826|      3|
  827|      3|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  828|      3|        }
  829|       |
  830|       |        void SRA(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  831|       |                 const InstructionArg& arg3)
  832|      1|        {
  833|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  834|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  835|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  836|      1|
  837|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  838|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  839|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  840|      1|
  841|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  842|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  843|      1|
  844|      1|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  845|      1|        }
  846|       |
  847|       |        void SRAI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  848|       |                  const InstructionArg& arg3)
  849|      3|        {
  850|      3|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  851|      3|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  852|      3|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  853|      3|
  854|      3|            const auto& dest_reg  = arg1.AsRegisterInt();
  855|      3|            const auto& src_reg   = arg2.AsRegisterInt();
  856|      3|            const auto& imm_value = arg3.AsImmediateValue();
  857|      3|
  858|      3|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  859|      3|            phi::i32 shift_value = imm_value.signed_value;
  860|      3|
  861|      3|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  862|      3|        }
  863|       |
  864|       |        void AND(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  865|       |                 const InstructionArg& arg3)
  866|     23|        {
  867|     23|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  868|     23|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  869|     23|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  870|     23|
  871|     23|            const auto& dest_reg = arg1.AsRegisterInt();
  872|     23|            const auto& lhs_reg  = arg2.AsRegisterInt();
  873|     23|            const auto& rhs_reg  = arg3.AsRegisterInt();
  874|     23|
  875|     23|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  876|     23|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  877|     23|            phi::i32 new_value = lhs_value.get() & rhs_value.get();
  878|     23|
  879|     23|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  880|     23|        }
  881|       |
  882|       |        void ANDI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  883|       |                  const InstructionArg& arg3)
  884|     23|        {
  885|     23|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  886|     23|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  887|     23|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  888|     23|
  889|     23|            const auto& dest_reg  = arg1.AsRegisterInt();
  890|     23|            const auto& src_reg   = arg2.AsRegisterInt();
  891|     23|            const auto& imm_value = arg3.AsImmediateValue();
  892|     23|
  893|     23|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  894|     23|            phi::i32 new_value = src_value.get() & imm_value.signed_value.get();
  895|     23|
  896|     23|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  897|     23|        }
  898|       |
  899|       |        void OR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  900|       |                const InstructionArg& arg3)
  901|     23|        {
  902|     23|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  903|     23|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  904|     23|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  905|     23|
  906|     23|            const auto& dest_reg = arg1.AsRegisterInt();
  907|     23|            const auto& lhs_reg  = arg2.AsRegisterInt();
  908|     23|            const auto& rhs_reg  = arg3.AsRegisterInt();
  909|     23|
  910|     23|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  911|     23|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  912|     23|            phi::i32 new_value = lhs_value.get() | rhs_value.get();
  913|     23|
  914|     23|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  915|     23|        }
  916|       |
  917|       |        void ORI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  918|       |                 const InstructionArg& arg3)
  919|      1|        {
  920|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  921|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  922|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  923|      1|
  924|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  925|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  926|      1|            const auto& imm_value = arg3.AsImmediateValue();
  927|      1|
  928|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  929|      1|            phi::i32 new_value = src_value.get() | imm_value.signed_value.get();
  930|      1|
  931|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  932|      1|        }
  933|       |
  934|       |        void XOR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  935|       |                 const InstructionArg& arg3)
  936|      1|        {
  937|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  938|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  939|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  940|      1|
  941|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  942|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  943|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  944|      1|
  945|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  946|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  947|      1|            phi::i32 new_value = lhs_value.get() ^ rhs_value.get();
  948|      1|
  949|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  950|      1|        }
  951|       |
  952|       |        void XORI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  953|       |                  const InstructionArg& arg3)
  954|      1|        {
  955|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  956|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  957|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  958|      1|
  959|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  960|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  961|      1|            const auto& imm_value = arg3.AsImmediateValue();
  962|      1|
  963|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  964|      1|            phi::i32 new_value = src_value.get() ^ imm_value.signed_value.get();
  965|      1|
  966|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  967|      1|        }
  968|       |
  969|       |        void SLT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  970|       |                 const InstructionArg& arg3)
  971|      1|        {
  972|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  973|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  974|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  975|      1|
  976|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  977|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  978|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  979|      1|
  980|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  981|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  982|      1|
  983|      1|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  984|      1|
  985|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  986|      1|        }
  987|       |
  988|       |        void SLTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  989|       |                  const InstructionArg& arg3)
  990|      1|        {
  991|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  992|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  993|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  994|      1|
  995|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  996|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  997|      1|            const auto& imm_value = arg3.AsImmediateValue();
  998|      1|
  999|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1000|      1|
 1001|      1|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
 1002|      1|
 1003|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1004|      1|        }
 1005|       |
 1006|       |        void LTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1007|       |                 const InstructionArg& arg3)
 1008|      0|        {
 1009|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1010|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1011|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
 1012|      0|
 1013|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1014|      0|            const FloatRegisterID lhs_reg  = arg2.AsRegisterFloat().register_id;
 1015|      0|            const FloatRegisterID rhs_reg  = arg3.AsRegisterFloat().register_id;
 1016|      0|
 1017|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1018|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1019|      0|
 1020|      0|            const phi::f32 new_value = (lhs_value < rhs_value) ? float_true : float_false;
 1021|      0|
 1022|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
 1023|      0|        }
 1024|       |
 1025|       |        void LTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1026|       |                 const InstructionArg& arg3)
 1027|      0|        {
 1028|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1029|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1030|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
 1031|      0|
 1032|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1033|      0|            const FloatRegisterID lhs_reg  = arg2.AsRegisterFloat().register_id;
 1034|      0|            const FloatRegisterID rhs_reg  = arg3.AsRegisterFloat().register_id;
 1035|      0|
 1036|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1037|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1038|      0|
 1039|      0|            const phi::f32 new_value = (lhs_value < rhs_value) ? float_true : float_false;
 1040|      0|
 1041|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
 1042|      0|        }
 1043|       |
 1044|       |        void SGT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1045|       |                 const InstructionArg& arg3)
 1046|      1|        {
 1047|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1048|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1049|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1050|      1|
 1051|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1052|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1053|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1054|      1|
 1055|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1056|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1057|      1|
 1058|      1|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
 1059|      1|
 1060|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1061|      1|        }
 1062|       |
 1063|       |        void SGTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1064|       |                  const InstructionArg& arg3)
 1065|      1|        {
 1066|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1067|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1068|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1069|      1|
 1070|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1071|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1072|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1073|      1|
 1074|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1075|      1|
 1076|      1|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
 1077|      1|
 1078|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1079|      1|        }
 1080|       |
 1081|       |        void GTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1082|       |                 const InstructionArg& arg3)
 1083|      0|        {
 1084|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1085|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1086|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
 1087|      0|
 1088|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1089|      0|            const FloatRegisterID lhs_reg  = arg2.AsRegisterFloat().register_id;
 1090|      0|            const FloatRegisterID rhs_reg  = arg3.AsRegisterFloat().register_id;
 1091|      0|
 1092|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1093|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1094|      0|
 1095|      0|            const phi::f32 new_value = (lhs_value > rhs_value) ? float_true : float_false;
 1096|      0|
 1097|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
 1098|      0|        }
 1099|       |
 1100|       |        void GTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1101|       |                 const InstructionArg& arg3)
 1102|      0|        {
 1103|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1104|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1105|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
 1106|      0|
 1107|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1108|      0|            const FloatRegisterID lhs_reg  = arg2.AsRegisterFloat().register_id;
 1109|      0|            const FloatRegisterID rhs_reg  = arg3.AsRegisterFloat().register_id;
 1110|      0|
 1111|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1112|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1113|      0|
 1114|      0|            const phi::f32 new_value = (lhs_value > rhs_value) ? float_true : float_false;
 1115|      0|
 1116|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
 1117|      0|        }
 1118|       |
 1119|       |        void SLE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1120|       |                 const InstructionArg& arg3)
 1121|      1|        {
 1122|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1123|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1124|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1125|      1|
 1126|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1127|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1128|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1129|      1|
 1130|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1131|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1132|      1|
 1133|      1|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
 1134|      1|
 1135|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1136|      1|        }
 1137|       |
 1138|       |        void SLEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1139|       |                  const InstructionArg& arg3)
 1140|      1|        {
 1141|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1142|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1143|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1144|      1|
 1145|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1146|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1147|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1148|      1|
 1149|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1150|      1|
 1151|      1|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
 1152|      1|
 1153|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1154|      1|        }
 1155|       |
 1156|       |        void LEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1157|       |                 const InstructionArg& arg3)
 1158|      0|        {
 1159|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1160|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1161|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
 1162|      0|
 1163|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1164|      0|            const FloatRegisterID lhs_reg  = arg2.AsRegisterFloat().register_id;
 1165|      0|            const FloatRegisterID rhs_reg  = arg3.AsRegisterFloat().register_id;
 1166|      0|
 1167|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1168|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1169|      0|
 1170|      0|            const phi::f32 new_value = (lhs_value <= rhs_value) ? float_true : float_false;
 1171|      0|
 1172|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
 1173|      0|        }
 1174|       |
 1175|       |        void LED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1176|       |                 const InstructionArg& arg3)
 1177|      0|        {
 1178|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1179|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1180|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
 1181|      0|
 1182|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1183|      0|            const FloatRegisterID lhs_reg  = arg2.AsRegisterFloat().register_id;
 1184|      0|            const FloatRegisterID rhs_reg  = arg3.AsRegisterFloat().register_id;
 1185|      0|
 1186|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1187|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1188|      0|
 1189|      0|            const phi::f32 new_value = (lhs_value <= rhs_value) ? float_true : float_false;
 1190|      0|
 1191|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
 1192|      0|        }
 1193|       |
 1194|       |        void SGE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1195|       |                 const InstructionArg& arg3)
 1196|      1|        {
 1197|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1198|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1199|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1200|      1|
 1201|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1202|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1203|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1204|      1|
 1205|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1206|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1207|      1|
 1208|      1|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
 1209|      1|
 1210|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1211|      1|        }
 1212|       |
 1213|       |        void SGEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1214|       |                  const InstructionArg& arg3)
 1215|     24|        {
 1216|     24|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1217|     24|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1218|     24|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1219|     24|
 1220|     24|            const auto& dest_reg  = arg1.AsRegisterInt();
 1221|     24|            const auto& src_reg   = arg2.AsRegisterInt();
 1222|     24|            const auto& imm_value = arg3.AsImmediateValue();
 1223|     24|
 1224|     24|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1225|     24|
 1226|     24|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
 1227|     24|
 1228|     24|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1229|     24|        }
 1230|       |
 1231|       |        void GEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1232|       |                 const InstructionArg& arg3)
 1233|      0|        {
 1234|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1235|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1236|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
 1237|      0|
 1238|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1239|      0|            const FloatRegisterID lhs_reg  = arg2.AsRegisterFloat().register_id;
 1240|      0|            const FloatRegisterID rhs_reg  = arg3.AsRegisterFloat().register_id;
 1241|      0|
 1242|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1243|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1244|      0|
 1245|      0|            const phi::f32 new_value = (lhs_value >= rhs_value) ? float_true : float_false;
 1246|      0|
 1247|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
 1248|      0|        }
 1249|       |
 1250|       |        void GED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1251|       |                 const InstructionArg& arg3)
 1252|      0|        {
 1253|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1254|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1255|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
 1256|      0|
 1257|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1258|      0|            const FloatRegisterID lhs_reg  = arg2.AsRegisterFloat().register_id;
 1259|      0|            const FloatRegisterID rhs_reg  = arg3.AsRegisterFloat().register_id;
 1260|      0|
 1261|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1262|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1263|      0|
 1264|      0|            const phi::f32 new_value = (lhs_value >= rhs_value) ? float_true : float_false;
 1265|      0|
 1266|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
 1267|      0|        }
 1268|       |
 1269|       |        void SEQ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1270|       |                 const InstructionArg& arg3)
 1271|  12.5k|        {
 1272|  12.5k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1273|  12.5k|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1274|  12.5k|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1275|  12.5k|
 1276|  12.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1277|  12.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1278|  12.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1279|  12.5k|
 1280|  12.5k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1281|  12.5k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1282|  12.5k|
 1283|  12.5k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
 1284|  12.5k|
 1285|  12.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1286|  12.5k|        }
 1287|       |
 1288|       |        void SEQI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1289|       |                  const InstructionArg& arg3)
 1290|      1|        {
 1291|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1292|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1293|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1294|      1|
 1295|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1296|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1297|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1298|      1|
 1299|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1300|      1|
 1301|      1|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
 1302|      1|
 1303|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1304|      1|        }
 1305|       |
 1306|       |        void EQF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1307|       |                 const InstructionArg& arg3)
 1308|      0|        {
 1309|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1310|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1311|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
 1312|      0|
 1313|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1314|      0|            const FloatRegisterID lhs_reg  = arg2.AsRegisterFloat().register_id;
 1315|      0|            const FloatRegisterID rhs_reg  = arg3.AsRegisterFloat().register_id;
 1316|      0|
 1317|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1318|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1319|      0|
 1320|      0|            const phi::f32 new_value =
 1321|      0|                    (lhs_value.get() == rhs_value.get()) ? float_true : float_false;
 1322|      0|
 1323|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
 1324|      0|        }
 1325|       |
 1326|       |        void EQD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1327|       |                 const InstructionArg& arg3)
 1328|      0|        {
 1329|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1330|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1331|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
 1332|      0|
 1333|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1334|      0|            const FloatRegisterID lhs_reg  = arg2.AsRegisterFloat().register_id;
 1335|      0|            const FloatRegisterID rhs_reg  = arg3.AsRegisterFloat().register_id;
 1336|      0|
 1337|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1338|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1339|      0|
 1340|      0|            const phi::f32 new_value =
 1341|      0|                    (lhs_value.get() == rhs_value.get()) ? float_true : float_false;
 1342|      0|
 1343|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
 1344|      0|        }
 1345|       |
 1346|       |        void SNE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1347|       |                 const InstructionArg& arg3)
 1348|      1|        {
 1349|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1350|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1351|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1352|      1|
 1353|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1354|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1355|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1356|      1|
 1357|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1358|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1359|      1|
 1360|      1|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
 1361|      1|
 1362|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1363|      1|        }
 1364|       |
 1365|       |        void SNEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1366|       |                  const InstructionArg& arg3)
 1367|      1|        {
 1368|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1369|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1370|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1371|      1|
 1372|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1373|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1374|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1375|      1|
 1376|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1377|      1|
 1378|      1|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
 1379|      1|
 1380|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1381|      1|        }
 1382|       |
 1383|       |        void NEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1384|       |                 const InstructionArg& arg3)
 1385|      0|        {
 1386|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1387|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1388|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
 1389|      0|
 1390|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1391|      0|            const FloatRegisterID lhs_reg  = arg2.AsRegisterFloat().register_id;
 1392|      0|            const FloatRegisterID rhs_reg  = arg3.AsRegisterFloat().register_id;
 1393|      0|
 1394|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1395|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1396|      0|
 1397|      0|            const phi::f32 new_value =
 1398|      0|                    (lhs_value.get() != rhs_value.get()) ? float_true : float_false;
 1399|      0|
 1400|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
 1401|      0|        }
 1402|       |
 1403|       |        void NED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1404|       |                 const InstructionArg& arg3)
 1405|      0|        {
 1406|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1407|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1408|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
 1409|      0|
 1410|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1411|      0|            const FloatRegisterID lhs_reg  = arg2.AsRegisterFloat().register_id;
 1412|      0|            const FloatRegisterID rhs_reg  = arg3.AsRegisterFloat().register_id;
 1413|      0|
 1414|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1415|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1416|      0|
 1417|      0|            const phi::f32 new_value =
 1418|      0|                    (lhs_value.get() != rhs_value.get()) ? float_true : float_false;
 1419|      0|
 1420|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
 1421|      0|        }
 1422|       |
 1423|       |        void BEQZ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1424|       |                  const InstructionArg& arg3)
 1425|      4|        {
 1426|      4|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1427|      4|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1428|      4|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1429|      4|
 1430|      4|            const auto& test_reg   = arg1.AsRegisterInt();
 1431|      4|            const auto& jump_label = arg2.AsLabel();
 1432|      4|
 1433|      4|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1434|      4|
 1435|      4|            if (test_value == 0)
 1436|      4|            {
 1437|      4|                JumpToLabel(processor, jump_label.label_name);
 1438|      4|            }
 1439|      4|        }
 1440|       |
 1441|       |        void BNEZ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1442|       |                  const InstructionArg& arg3)
 1443|      2|        {
 1444|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1445|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1446|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1447|      2|
 1448|      2|            const auto& test_reg   = arg1.AsRegisterInt();
 1449|      2|            const auto& jump_label = arg2.AsLabel();
 1450|      2|
 1451|      2|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1452|      2|
 1453|      2|            if (test_value != 0)
 1454|      1|            {
 1455|      1|                JumpToLabel(processor, jump_label.label_name);
 1456|      1|            }
 1457|      2|        }
 1458|       |
 1459|       |        void BFPT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1460|       |                  const InstructionArg& arg3)
 1461|      0|        {
 1462|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1463|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1464|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1465|      0|
 1466|      0|            const auto& test_reg   = arg1.AsRegisterFloat().register_id;
 1467|      0|            const auto& jump_label = arg2.AsLabel();
 1468|      0|
 1469|      0|            phi::f32 test_value = processor.FloatRegisterGetFloatValue(test_reg);
 1470|      0|
 1471|      0|            if (test_value.get() == float_true)
 1472|      0|            {
 1473|      0|                JumpToLabel(processor, jump_label.label_name);
 1474|      0|            }
 1475|      0|        }
 1476|       |
 1477|       |        void BFPF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1478|       |                  const InstructionArg& arg3)
 1479|      0|        {
 1480|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1481|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1482|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1483|      0|
 1484|      0|            const auto& test_reg   = arg1.AsRegisterFloat().register_id;
 1485|      0|            const auto& jump_label = arg2.AsLabel();
 1486|      0|
 1487|      0|            phi::f32 test_value = processor.FloatRegisterGetFloatValue(test_reg);
 1488|      0|
 1489|      0|            if (test_value.get() == float_false)
 1490|      0|            {
 1491|      0|                JumpToLabel(processor, jump_label.label_name);
 1492|      0|            }
 1493|      0|        }
 1494|       |
 1495|       |        void J(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1496|       |               const InstructionArg& arg3)
 1497|  12.5k|        {
 1498|  12.5k|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1499|  12.5k|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1500|  12.5k|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1501|  12.5k|
 1502|  12.5k|            const auto& jump_label = arg1.AsLabel();
 1503|  12.5k|
 1504|  12.5k|            JumpToLabel(processor, jump_label.label_name);
 1505|  12.5k|        }
 1506|       |
 1507|       |        void JR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1508|       |                const InstructionArg& arg3)
 1509|  10.0k|        {
 1510|  10.0k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1511|  10.0k|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1512|  10.0k|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1513|  10.0k|
 1514|  10.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1515|  10.0k|
 1516|  10.0k|            JumpToRegister(processor, jump_register.register_id);
 1517|  10.0k|        }
 1518|       |
 1519|       |        void JAL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1520|       |                 const InstructionArg& arg3)
 1521|      1|        {
 1522|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1523|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1524|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1525|      1|
 1526|      1|            const auto& jump_label = arg1.AsLabel();
 1527|      1|
 1528|      1|            processor.IntRegisterSetUnsignedValue(
 1529|      1|                    IntRegisterID::R31,
 1530|      1|                    static_cast<std::uint32_t>(processor.m_NextProgramCounter.get()));
 1531|      1|
 1532|      1|            JumpToLabel(processor, jump_label.label_name);
 1533|      1|        }
 1534|       |
 1535|       |        void JALR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1536|       |                  const InstructionArg& arg3)
 1537|  10.0k|        {
 1538|  10.0k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1539|  10.0k|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1540|  10.0k|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1541|  10.0k|
 1542|  10.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1543|  10.0k|
 1544|  10.0k|            processor.IntRegisterSetUnsignedValue(
 1545|  10.0k|                    IntRegisterID::R31,
 1546|  10.0k|                    static_cast<std::uint32_t>(processor.m_NextProgramCounter.get()));
 1547|  10.0k|
 1548|  10.0k|            JumpToRegister(processor, jump_register.register_id);
 1549|  10.0k|        }
 1550|       |
 1551|       |        void LB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1552|       |                const InstructionArg& arg3)
 1553|      1|        {
 1554|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1555|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1556|      1|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1557|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1558|      1|
 1559|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1560|      1|
 1561|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1562|      1|
 1563|      1|            if (!optional_address.has_value())
 1564|      0|            {
 1565|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1566|      0|                return;
 1567|      0|            }
 1568|      1|
 1569|      1|            phi::i32 address = optional_address.value();
 1570|      1|
 1571|      1|            auto optional_value =
 1572|      1|                    processor.m_MemoryBlock.LoadByte(static_cast<std::size_t>(address.get()));
 1573|      1|
 1574|      1|            if (!optional_value.has_value())
 1575|      0|            {
 1576|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1577|      0|                PHI_LOG_ERROR("Failed to load byte at address {}", address.get());
 1578|      0|                return;
 1579|      0|            }
 1580|      1|
 1581|      1|            phi::i32 value = optional_value.value();
 1582|      1|
 1583|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1584|      1|        }
 1585|       |
 1586|       |        void LBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1587|       |                 const InstructionArg& arg3)
 1588|      2|        {
 1589|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1590|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1591|      2|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1592|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1593|      2|
 1594|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1595|      2|
 1596|      2|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1597|      2|
 1598|      2|            if (!optional_address.has_value())
 1599|      0|            {
 1600|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1601|      0|                return;
 1602|      0|            }
 1603|      2|
 1604|      2|            phi::i32 address = optional_address.value();
 1605|      2|
 1606|      2|            auto optional_value = processor.m_MemoryBlock.LoadUnsignedByte(
 1607|      2|                    static_cast<std::size_t>(address.get()));
 1608|      2|
 1609|      2|            if (!optional_value.has_value())
 1610|      0|            {
 1611|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1612|      0|                PHI_LOG_ERROR("Failed to load unsigned byte at address {}", address.get());
 1613|      0|                return;
 1614|      0|            }
 1615|      2|
 1616|      2|            phi::i32 value = optional_value.value();
 1617|      2|
 1618|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1619|      2|        }
 1620|       |
 1621|       |        void LH(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1622|       |                const InstructionArg& arg3)
 1623|      2|        {
 1624|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1625|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1626|      2|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1627|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1628|      2|
 1629|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1630|      2|
 1631|      2|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1632|      2|
 1633|      2|            if (!optional_address.has_value())
 1634|      0|            {
 1635|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1636|      0|                return;
 1637|      0|            }
 1638|      2|
 1639|      2|            phi::i32 address = optional_address.value();
 1640|      2|
 1641|      2|            auto optional_value =
 1642|      2|                    processor.m_MemoryBlock.LoadHalfWord(static_cast<std::size_t>(address.get()));
 1643|      2|
 1644|      2|            if (!optional_value.has_value())
 1645|      0|            {
 1646|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1647|      0|                PHI_LOG_ERROR("Failed to load half byte at address {}", address.get());
 1648|      0|                return;
 1649|      0|            }
 1650|      2|
 1651|      2|            phi::i32 value = optional_value.value();
 1652|      2|
 1653|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1654|      2|        }
 1655|       |
 1656|       |        void LHU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1657|       |                 const InstructionArg& arg3)
 1658|      2|        {
 1659|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1660|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1661|      2|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1662|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1663|      2|
 1664|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1665|      2|
 1666|      2|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1667|      2|
 1668|      2|            if (!optional_address.has_value())
 1669|      0|            {
 1670|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1671|      0|                return;
 1672|      0|            }
 1673|      2|
 1674|      2|            phi::i32 address = optional_address.value();
 1675|      2|
 1676|      2|            auto optional_value = processor.m_MemoryBlock.LoadUnsignedHalfWord(
 1677|      2|                    static_cast<std::size_t>(address.get()));
 1678|      2|
 1679|      2|            if (!optional_value.has_value())
 1680|      0|            {
 1681|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1682|      0|                PHI_LOG_ERROR("Failed to load unsigned half byte at address {}", address.get());
 1683|      0|                return;
 1684|      0|            }
 1685|      2|
 1686|      2|            phi::i32 value = optional_value.value();
 1687|      2|
 1688|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1689|      2|        }
 1690|       |
 1691|       |        void LW(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1692|       |                const InstructionArg& arg3)
 1693|  2.50k|        {
 1694|  2.50k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1695|  2.50k|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1696|  2.50k|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1697|  2.50k|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1698|  2.50k|
 1699|  2.50k|            const auto& dest_reg = arg1.AsRegisterInt();
 1700|  2.50k|
 1701|  2.50k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1702|  2.50k|
 1703|  2.50k|            if (!optional_address.has_value())
 1704|      1|            {
 1705|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1706|      1|                return;
 1707|      1|            }
 1708|  2.50k|
 1709|  2.50k|            phi::i32 address = optional_address.value();
 1710|  2.50k|
 1711|  2.50k|            auto optional_value =
 1712|  2.50k|                    processor.m_MemoryBlock.LoadWord(static_cast<std::size_t>(address.get()));
 1713|  2.50k|
 1714|  2.50k|            if (!optional_value.has_value())
 1715|      2|            {
 1716|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1717|      2|                PHI_LOG_ERROR("Failed to load word at address {}", address.get());
 1718|      2|                return;
 1719|      2|            }
 1720|  2.50k|
 1721|  2.50k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1722|  2.50k|        }
 1723|       |
 1724|       |        void LWU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1725|       |                 const InstructionArg& arg3)
 1726|      2|        {
 1727|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1728|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1729|      2|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1730|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1731|      2|
 1732|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1733|      2|
 1734|      2|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1735|      2|
 1736|      2|            if (!optional_address.has_value())
 1737|      0|            {
 1738|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1739|      0|                return;
 1740|      0|            }
 1741|      2|
 1742|      2|            phi::i32 address = optional_address.value();
 1743|      2|
 1744|      2|            auto optional_value = processor.m_MemoryBlock.LoadUnsignedWord(
 1745|      2|                    static_cast<std::size_t>(address.get()));
 1746|      2|
 1747|      2|            if (!optional_value.has_value())
 1748|      0|            {
 1749|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1750|      0|                PHI_LOG_ERROR("Failed to load unsigned word at address {}", address.get());
 1751|      0|                return;
 1752|      0|            }
 1753|      2|
 1754|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1755|      2|        }
 1756|       |
 1757|       |        void LF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1758|       |                const InstructionArg& arg3)
 1759|      0|        {
 1760|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1761|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1762|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1763|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1764|      0|
 1765|      0|            const auto& dest_reg = arg1.AsRegisterFloat();
 1766|      0|
 1767|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1768|      0|
 1769|      0|            if (!optional_address.has_value())
 1770|      0|            {
 1771|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1772|      0|                return;
 1773|      0|            }
 1774|      0|
 1775|      0|            phi::i32 address = optional_address.value();
 1776|      0|
 1777|      0|            auto optional_value =
 1778|      0|                    processor.m_MemoryBlock.LoadFloat(static_cast<std::size_t>(address.get()));
 1779|      0|
 1780|      0|            if (!optional_value.has_value())
 1781|      0|            {
 1782|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1783|      0|                PHI_LOG_ERROR("Failed to load float at address {}", address.get());
 1784|      0|                return;
 1785|      0|            }
 1786|      0|
 1787|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1788|      0|        }
 1789|       |
 1790|       |        void LD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1791|       |                const InstructionArg& arg3)
 1792|      0|        {
 1793|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1794|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1795|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1796|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1797|      0|
 1798|      0|            const auto& dest_reg = arg1.AsRegisterFloat();
 1799|      0|
 1800|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1801|      0|
 1802|      0|            if (!optional_address.has_value())
 1803|      0|            {
 1804|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1805|      0|                return;
 1806|      0|            }
 1807|      0|
 1808|      0|            phi::i32 address = optional_address.value();
 1809|      0|
 1810|      0|            auto optional_value =
 1811|      0|                    processor.m_MemoryBlock.LoadDouble(static_cast<std::size_t>(address.get()));
 1812|      0|
 1813|      0|            if (!optional_value.has_value())
 1814|      0|            {
 1815|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1816|      0|                PHI_LOG_ERROR("Failed to load double at address {}", address.get());
 1817|      0|                return;
 1818|      0|            }
 1819|      0|
 1820|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1821|      0|        }
 1822|       |
 1823|       |        void SB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1824|       |                const InstructionArg& arg3)
 1825|      4|        {
 1826|      4|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 1827|      4|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 1828|      4|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1829|      4|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1830|      4|
 1831|      4|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1832|      4|
 1833|      4|            if (!optional_address.has_value())
 1834|      0|            {
 1835|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1836|      0|                return;
 1837|      0|            }
 1838|      4|
 1839|      4|            phi::i32 address = optional_address.value();
 1840|      4|
 1841|      4|            const auto& src_reg = arg2.AsRegisterInt();
 1842|      4|
 1843|      4|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1844|      4|
 1845|      4|            phi::Boolean success = processor.m_MemoryBlock.StoreByte(
 1846|      4|                    static_cast<std::size_t>(address.get()), static_cast<std::int8_t>(value.get()));
 1847|      4|
 1848|      4|            if (!success)
 1849|      2|            {
 1850|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1851|      2|                PHI_LOG_ERROR("Failed to store byte at address {}", address.get());
 1852|      2|            }
 1853|      4|        }
 1854|       |
 1855|       |        void SBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1856|       |                 const InstructionArg& arg3)
 1857|      2|        {
 1858|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 1859|      2|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 1860|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1861|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1862|      2|
 1863|      2|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1864|      2|
 1865|      2|            if (!optional_address.has_value())
 1866|      0|            {
 1867|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1868|      0|                return;
 1869|      0|            }
 1870|      2|
 1871|      2|            phi::i32 address = optional_address.value();
 1872|      2|
 1873|      2|            const auto& src_reg = arg2.AsRegisterInt();
 1874|      2|
 1875|      2|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1876|      2|
 1877|      2|            phi::Boolean success = processor.m_MemoryBlock.StoreUnsignedByte(
 1878|      2|                    static_cast<std::size_t>(address.get()),
 1879|      2|                    static_cast<std::uint8_t>(value.get()));
 1880|      2|
 1881|      2|            if (!success)
 1882|      0|            {
 1883|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1884|      0|                PHI_LOG_ERROR("Failed to store unsigned byte at address {}", address.get());
 1885|      0|            }
 1886|      2|        }
 1887|       |
 1888|       |        void SH(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1889|       |                const InstructionArg& arg3)
 1890|      2|        {
 1891|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 1892|      2|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 1893|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1894|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1895|      2|
 1896|      2|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1897|      2|
 1898|      2|            if (!optional_address.has_value())
 1899|      0|            {
 1900|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1901|      0|                return;
 1902|      0|            }
 1903|      2|
 1904|      2|            phi::i32 address = optional_address.value();
 1905|      2|
 1906|      2|            const auto& src_reg = arg2.AsRegisterInt();
 1907|      2|
 1908|      2|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1909|      2|
 1910|      2|            phi::Boolean success =
 1911|      2|                    processor.m_MemoryBlock.StoreHalfWord(static_cast<std::size_t>(address.get()),
 1912|      2|                                                          static_cast<std::int16_t>(value.get()));
 1913|      2|
 1914|      2|            if (!success)
 1915|      0|            {
 1916|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1917|      0|                PHI_LOG_ERROR("Failed to store half word at address {}", address.get());
 1918|      0|            }
 1919|      2|        }
 1920|       |
 1921|       |        void SHU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1922|       |                 const InstructionArg& arg3)
 1923|      2|        {
 1924|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 1925|      2|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 1926|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1927|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1928|      2|
 1929|      2|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1930|      2|
 1931|      2|            if (!optional_address.has_value())
 1932|      0|            {
 1933|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1934|      0|                return;
 1935|      0|            }
 1936|      2|
 1937|      2|            phi::i32 address = optional_address.value();
 1938|      2|
 1939|      2|            const auto& src_reg = arg2.AsRegisterInt();
 1940|      2|
 1941|      2|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1942|      2|
 1943|      2|            phi::Boolean success = processor.m_MemoryBlock.StoreUnsignedHalfWord(
 1944|      2|                    static_cast<std::size_t>(address.get()),
 1945|      2|                    static_cast<std::uint16_t>(value.get()));
 1946|      2|
 1947|      2|            if (!success)
 1948|      0|            {
 1949|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1950|      0|                PHI_LOG_ERROR("Failed to store unsigned half word at address {}", address.get());
 1951|      0|            }
 1952|      2|        }
 1953|       |
 1954|       |        void SW(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1955|       |                const InstructionArg& arg3)
 1956|      6|        {
 1957|      6|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 1958|      6|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 1959|      6|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1960|      6|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1961|      6|
 1962|      6|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1963|      6|
 1964|      6|            if (!optional_address.has_value())
 1965|      1|            {
 1966|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1967|      1|                return;
 1968|      1|            }
 1969|      5|
 1970|      5|            phi::i32 address = optional_address.value();
 1971|      5|
 1972|      5|            const auto& src_reg = arg2.AsRegisterInt();
 1973|      5|
 1974|      5|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1975|      5|
 1976|      5|            phi::Boolean success = processor.m_MemoryBlock.StoreWord(
 1977|      5|                    static_cast<std::size_t>(address.get()), value);
 1978|      5|
 1979|      5|            if (!success)
 1980|      2|            {
 1981|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1982|      2|                PHI_LOG_ERROR("Failed to store word at address {}", address.get());
 1983|      2|            }
 1984|      5|        }
 1985|       |
 1986|       |        void SWU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1987|       |                 const InstructionArg& arg3)
 1988|      2|        {
 1989|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 1990|      2|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 1991|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1992|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1993|      2|
 1994|      2|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1995|      2|
 1996|      2|            if (!optional_address.has_value())
 1997|      0|            {
 1998|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1999|      0|                return;
 2000|      0|            }
 2001|      2|
 2002|      2|            phi::i32 address = optional_address.value();
 2003|      2|
 2004|      2|            const auto& src_reg = arg2.AsRegisterInt();
 2005|      2|
 2006|      2|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2007|      2|
 2008|      2|            phi::Boolean success = processor.m_MemoryBlock.StoreUnsignedWord(
 2009|      2|                    static_cast<std::size_t>(address.get()), value);
 2010|      2|
 2011|      2|            if (!success)
 2012|      0|            {
 2013|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2014|      0|                PHI_LOG_ERROR("Failed to store unsigned word at address {}", address.get());
 2015|      0|            }
 2016|      2|        }
 2017|       |
 2018|       |        void SF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2019|       |                const InstructionArg& arg3)
 2020|      0|        {
 2021|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2022|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2023|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2024|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2025|      0|
 2026|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2027|      0|
 2028|      0|            if (!optional_address.has_value())
 2029|      0|            {
 2030|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2031|      0|                return;
 2032|      0|            }
 2033|      0|
 2034|      0|            phi::i32 address = optional_address.value();
 2035|      0|
 2036|      0|            const auto& src_reg = arg2.AsRegisterFloat();
 2037|      0|
 2038|      0|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 2039|      0|
 2040|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreFloat(
 2041|      0|                    static_cast<std::size_t>(address.get()), value);
 2042|      0|
 2043|      0|            if (!success)
 2044|      0|            {
 2045|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2046|      0|                PHI_LOG_ERROR("Failed to store float at address {}", address.get());
 2047|      0|            }
 2048|      0|        }
 2049|       |
 2050|       |        void SD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2051|       |                const InstructionArg& arg3)
 2052|      0|        {
 2053|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2054|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2055|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2056|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2057|      0|
 2058|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2059|      0|
 2060|      0|            if (!optional_address.has_value())
 2061|      0|            {
 2062|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2063|      0|                return;
 2064|      0|            }
 2065|      0|
 2066|      0|            phi::i32 address = optional_address.value();
 2067|      0|
 2068|      0|            const auto& src_reg = arg2.AsRegisterFloat();
 2069|      0|
 2070|      0|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 2071|      0|
 2072|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreDouble(
 2073|      0|                    static_cast<std::size_t>(address.get()), value);
 2074|      0|
 2075|      0|            if (!success)
 2076|      0|            {
 2077|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2078|      0|                PHI_LOG_ERROR("Failed to store float at address {}", address.get());
 2079|      0|            }
 2080|      0|        }
 2081|       |
 2082|       |        void TRAP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2083|       |                  const InstructionArg& arg3)
 2084|      1|        {
 2085|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::ImmediateInteger);
 2086|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2087|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2088|      1|
 2089|      1|            processor.Raise(Exception::Trap);
 2090|      1|        }
 2091|       |
 2092|       |        void HALT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2093|       |                  const InstructionArg& arg3)
 2094|      1|        {
 2095|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 2096|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2097|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2098|      1|
 2099|      1|            processor.Raise(Exception::Halt);
 2100|      1|        }
 2101|       |
 2102|       |        void NOP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2103|       |                 const InstructionArg& arg3)
 2104|      9|        {
 2105|      9|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 2106|      9|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2107|      9|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2108|      9|
 2109|      9|            /* Do nothing */
 2110|      9|        }
 2111|       |    } // namespace impl
 2112|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/FloatRegister.cpp:
    1|       |#include "DLX/FloatRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void FloatRegister::SetValue(const phi::f32 val)
    6|  21.4k|    {
    7|  21.4k|        m_Value = val;
    8|  21.4k|    }
    9|       |
   10|       |    phi::f32 FloatRegister::GetValue() const
   11|      0|    {
   12|      0|        return m_Value;
   13|      0|    }
   14|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Token.cpp:
    1|       |#include "DLX/Token.hpp"
    2|       |
    3|       |#include <magic_enum.hpp>
    4|       |#include <string>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    Token::Token(Type type, std::string_view text, phi::u64 line_number, phi::u64 column)
    9|       |        : m_Type{type}
   10|       |        , m_Text{text}
   11|       |        , m_LineNumber{line_number}
   12|       |        , m_Column{column}
   13|   149k|    {}
   14|       |
   15|       |    Token::Type Token::GetType() const noexcept
   16|   188k|    {
   17|   188k|        return m_Type;
   18|   188k|    }
   19|       |
   20|       |    std::string_view Token::GetTypeName() const noexcept
   21|    361|    {
   22|    361|        return magic_enum::enum_name(m_Type);
   23|    361|    }
   24|       |
   25|       |    phi::u64 Token::GetLineNumber() const noexcept
   26|   145k|    {
   27|   145k|        return m_LineNumber;
   28|   145k|    }
   29|       |
   30|       |    phi::u64 Token::GetColumn() const noexcept
   31|   145k|    {
   32|   145k|        return m_Column;
   33|   145k|    }
   34|       |
   35|       |    phi::usize Token::GetLength() const noexcept
   36|      0|    {
   37|      0|        return m_Text.length();
   38|      0|    }
   39|       |
   40|       |    std::string_view Token::GetText() const noexcept
   41|   248k|    {
   42|   248k|        return m_Text;
   43|   248k|    }
   44|       |
   45|       |    std::string Token::GetTextString() const noexcept
   46|   182k|    {
   47|   182k|        return std::string(m_Text.data(), m_Text.length());
   48|   182k|    }
   49|       |
   50|       |    std::string Token::DebugInfo() const noexcept
   51|   145k|    {
   52|   145k|        std::string pos_info = "(" + std::to_string(GetLineNumber().get()) + ":" +
   53|   145k|                               std::to_string(GetColumn().get()) + ")";
   54|   145k|
   55|   145k|        switch (m_Type)
   56|   145k|        {
   57|  4.52k|            case Type::Colon:
   58|  4.52k|                return "Token[Colon]" + pos_info;
   59|  4.18k|            case Type::Comma:
   60|  4.18k|                return "Token[Comma]" + pos_info;
   61|  2.79k|            case Type::Comment:
   62|  2.79k|                return "Token[Comment]" + pos_info + ": '" + GetTextString() + "'";
   63|  94.7k|            case Type::Identifier:
   64|  94.7k|                return "Token[Identifier]" + pos_info + ": '" + GetTextString() + "'";
   65|  23.5k|            case Type::NewLine:
   66|  23.5k|                return "Token[NewLine]" + pos_info;
   67|  5.38k|            case Type::OpenBracket:
   68|  5.38k|                return "Token[OpenBracket]" + pos_info;
   69|  5.22k|            case Type::ClosingBracket:
   70|  5.22k|                return "Token[OpenBracket]" + pos_info;
   71|  1.37k|            case Type::IntegerLiteral:
   72|  1.37k|                return "Token[IntegerLiteral]" + pos_info + ": '" + GetTextString() + "'";
   73|  4.10k|            case Type::ImmediateInteger:
   74|  4.10k|                return "Token[ImmediateInteger]" + pos_info + ": " + GetTextString() + "'";
   75|      0|            case Type::Unknown:
   76|      0|                return "Token[Unknown]" + pos_info;
   77|      0|            default:
   78|      0|                PHI_ASSERT_NOT_REACHED();
   79|      0|                return "Token[NotFound]" + pos_info;
   80|   145k|        }
   81|   145k|    }
   82|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/MemoryBlock.cpp:
    1|       |#include "DLX/MemoryBlock.hpp"
    2|       |#include "Phi/Core/Boolean.hpp"
    3|       |#include "Phi/Core/Log.hpp"
    4|       |#include <cstdint>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    MemoryBlock::MemoryBlock(phi::usize start_address, phi::usize starting_size)
    9|       |        : m_StartingAddress(start_address)
   10|    671|    {
   11|    671|        m_Values.resize(starting_size.get());
   12|    671|    }
   13|       |
   14|       |    std::optional<phi::i8> MemoryBlock::LoadByte(phi::usize address) const
   15|      1|    {
   16|      1|        if (!IsAddressValid(address, 1u))
   17|      0|        {
   18|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   19|      0|            return {};
   20|      0|        }
   21|      1|
   22|      1|        return m_Values.at((address - m_StartingAddress).get()).signed_value;
   23|      1|    }
   24|       |
   25|       |    std::optional<phi::u8> MemoryBlock::LoadUnsignedByte(phi::usize address) const
   26|      2|    {
   27|      2|        if (!IsAddressValid(address, 1u))
   28|      0|        {
   29|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   30|      0|            return {};
   31|      0|        }
   32|      2|
   33|      2|        return m_Values.at((address - m_StartingAddress).get()).unsigned_value;
   34|      2|    }
   35|       |
   36|       |    std::optional<phi::i16> MemoryBlock::LoadHalfWord(phi::usize address) const
   37|      2|    {
   38|      2|        if (!IsAddressValid(address, 2u))
   39|      0|        {
   40|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   41|      0|            return {};
   42|      0|        }
   43|      2|
   44|      2|        phi::usize   start_address = address - m_StartingAddress;
   45|      2|        std::int8_t  first_byte    = m_Values.at(start_address.get()).signed_value;
   46|      2|        std::int8_t  second_byte   = m_Values.at((start_address + 1u).get()).signed_value;
   47|      2|        std::int16_t result        = first_byte << 8 | second_byte;
   48|      2|
   49|      2|        return result;
   50|      2|    }
   51|       |
   52|       |    std::optional<phi::u16> MemoryBlock::LoadUnsignedHalfWord(phi::usize address) const
   53|      2|    {
   54|      2|        if (!IsAddressValid(address, 2u))
   55|      0|        {
   56|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   57|      0|            return {};
   58|      0|        }
   59|      2|
   60|      2|        phi::usize    start_address = address - m_StartingAddress;
   61|      2|        std::uint8_t  first_byte    = m_Values.at(start_address.get()).unsigned_value;
   62|      2|        std::uint8_t  second_byte   = m_Values.at((start_address + 1u).get()).unsigned_value;
   63|      2|        std::uint16_t result        = first_byte << 8 | second_byte;
   64|      2|
   65|      2|        return result;
   66|      2|    }
   67|       |
   68|       |    std::optional<phi::i32> MemoryBlock::LoadWord(phi::usize address) const
   69|  2.50k|    {
   70|  2.50k|        if (!IsAddressValid(address, 4u))
   71|      2|        {
   72|      2|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   73|      2|            return {};
   74|      2|        }
   75|  2.50k|
   76|  2.50k|        phi::usize   start_address = address - m_StartingAddress;
   77|  2.50k|        std::int8_t  first_byte    = m_Values.at(start_address.get()).signed_value;
   78|  2.50k|        std::int8_t  second_byte   = m_Values.at((start_address + 1u).get()).signed_value;
   79|  2.50k|        std::int8_t  third_byte    = m_Values.at((start_address + 2u).get()).signed_value;
   80|  2.50k|        std::int8_t  fourth_byte   = m_Values.at((start_address + 3u).get()).signed_value;
   81|  2.50k|        std::int32_t result = first_byte << 24 | second_byte << 16 | third_byte << 8 | fourth_byte;
   82|  2.50k|
   83|  2.50k|        return result;
   84|  2.50k|    }
   85|       |
   86|       |    std::optional<phi::u32> MemoryBlock::LoadUnsignedWord(phi::usize address) const
   87|      2|    {
   88|      2|        if (!IsAddressValid(address, 4u))
   89|      0|        {
   90|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   91|      0|            return {};
   92|      0|        }
   93|      2|
   94|      2|        phi::usize    start_address = address - m_StartingAddress;
   95|      2|        std::uint8_t  first_byte    = m_Values.at(start_address.get()).unsigned_value;
   96|      2|        std::uint8_t  second_byte   = m_Values.at((start_address + 1u).get()).unsigned_value;
   97|      2|        std::uint8_t  third_byte    = m_Values.at((start_address + 2u).get()).unsigned_value;
   98|      2|        std::uint8_t  fourth_byte   = m_Values.at((start_address + 3u).get()).unsigned_value;
   99|      2|        std::uint32_t result = first_byte << 24 | second_byte << 16 | third_byte << 8 | fourth_byte;
  100|      2|
  101|      2|        return result;
  102|      2|    }
  103|       |
  104|       |    std::optional<phi::f32> MemoryBlock::LoadFloat(phi::usize address) const
  105|      0|    {
  106|      0|        if (!IsAddressValid(address, 4u))
  107|      0|        {
  108|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  109|      0|            return {};
  110|      0|        }
  111|      0|
  112|      0|        phi::usize    start_address = address - m_StartingAddress;
  113|      0|        std::uint8_t  first_byte    = m_Values.at(start_address.get()).unsigned_value;
  114|      0|        std::uint8_t  second_byte   = m_Values.at((start_address + 1u).get()).unsigned_value;
  115|      0|        std::uint8_t  third_byte    = m_Values.at((start_address + 2u).get()).unsigned_value;
  116|      0|        std::uint8_t  fourth_byte   = m_Values.at((start_address + 3u).get()).unsigned_value;
  117|      0|        std::uint32_t result = first_byte << 24 | second_byte << 16 | third_byte << 8 | fourth_byte;
  118|      0|
  119|      0|        return *reinterpret_cast<float*>(&result);
  120|      0|    }
  121|       |
  122|       |    std::optional<phi::f64> MemoryBlock::LoadDouble(phi::usize address) const
  123|      0|    {
  124|      0|        if (!IsAddressValid(address, 8u))
  125|      0|        {
  126|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  127|      0|            return {};
  128|      0|        }
  129|      0|
  130|      0|        phi::f32 first_value  = LoadFloat(address).value();
  131|      0|        phi::f32 second_value = LoadFloat(address + 4u).value();
  132|      0|
  133|      0|        std::uint32_t first_bits  = *reinterpret_cast<std::uint32_t*>(&first_value);
  134|      0|        std::uint32_t second_bits = *reinterpret_cast<std::uint32_t*>(&second_value);
  135|      0|
  136|      0|        std::uint64_t final_bits = (static_cast<std::uint64_t>(second_bits) << 32u) | first_bits;
  137|      0|
  138|      0|        return *reinterpret_cast<double*>(&final_bits);
  139|      0|    }
  140|       |
  141|       |    phi::Boolean MemoryBlock::StoreByte(phi::usize address, phi::i8 value)
  142|      4|    {
  143|      4|        if (!IsAddressValid(address, 1u))
  144|      2|        {
  145|      2|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  146|      2|            return false;
  147|      2|        }
  148|      2|
  149|      2|        m_Values.at((address - m_StartingAddress).get()).signed_value = value.get();
  150|      2|        return true;
  151|      2|    }
  152|       |
  153|       |    phi::Boolean MemoryBlock::StoreUnsignedByte(phi::usize address, phi::u8 value)
  154|      2|    {
  155|      2|        if (!IsAddressValid(address, 1u))
  156|      0|        {
  157|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  158|      0|            return false;
  159|      0|        }
  160|      2|
  161|      2|        m_Values.at((address - m_StartingAddress).get()).unsigned_value = value.get();
  162|      2|        return true;
  163|      2|    }
  164|       |
  165|       |    phi::Boolean MemoryBlock::StoreHalfWord(phi::usize address, phi::i16 value)
  166|      2|    {
  167|      2|        if (!IsAddressValid(address, 2u))
  168|      0|        {
  169|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  170|      0|            return false;
  171|      0|        }
  172|      2|
  173|      2|        phi::usize  start_address = address - m_StartingAddress;
  174|      2|        std::int8_t first_byte    = (value.get() & 0b11111111'00000000) >> 8;
  175|      2|        std::int8_t second_byte   = value.get() & 0b00000000'11111111;
  176|      2|
  177|      2|        m_Values.at(start_address.get()).signed_value        = first_byte;
  178|      2|        m_Values.at((start_address + 1u).get()).signed_value = second_byte;
  179|      2|
  180|      2|        return true;
  181|      2|    }
  182|       |
  183|       |    phi::Boolean MemoryBlock::StoreUnsignedHalfWord(phi::usize address, phi::u16 value)
  184|      2|    {
  185|      2|        if (!IsAddressValid(address, 2u))
  186|      0|        {
  187|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  188|      0|            return false;
  189|      0|        }
  190|      2|
  191|      2|        phi::usize   start_address = address - m_StartingAddress;
  192|      2|        std::uint8_t first_byte    = (value.get() & 0b11111111'00000000) >> 8;
  193|      2|        std::uint8_t second_byte   = value.get() & 0b00000000'11111111;
  194|      2|
  195|      2|        m_Values.at(start_address.get()).unsigned_value        = first_byte;
  196|      2|        m_Values.at((start_address + 1u).get()).unsigned_value = second_byte;
  197|      2|
  198|      2|        return true;
  199|      2|    }
  200|       |
  201|       |    phi::Boolean MemoryBlock::StoreWord(phi::usize address, phi::i32 value)
  202|      5|    {
  203|      5|        if (!IsAddressValid(address, 4u))
  204|      2|        {
  205|      2|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  206|      2|            return false;
  207|      2|        }
  208|      3|
  209|      3|        phi::usize  start_address = address - m_StartingAddress;
  210|      3|        std::int8_t first_byte    = (value.get() & 0b11111111'00000000'00000000'00000000) >> 24;
  211|      3|        std::int8_t second_byte   = (value.get() & 0b00000000'11111111'00000000'00000000) >> 16;
  212|      3|        std::int8_t third_byte    = (value.get() & 0b00000000'00000000'11111111'00000000) >> 8;
  213|      3|        std::int8_t fourth_byte   = value.get() & 0b00000000'00000000'00000000'11111111;
  214|      3|
  215|      3|        m_Values.at(start_address.get()).signed_value        = first_byte;
  216|      3|        m_Values.at((start_address + 1u).get()).signed_value = second_byte;
  217|      3|        m_Values.at((start_address + 2u).get()).signed_value = third_byte;
  218|      3|        m_Values.at((start_address + 3u).get()).signed_value = fourth_byte;
  219|      3|
  220|      3|        return true;
  221|      3|    }
  222|       |
  223|       |    phi::Boolean MemoryBlock::StoreUnsignedWord(phi::usize address, phi::u32 value)
  224|      2|    {
  225|      2|        if (!IsAddressValid(address, 4u))
  226|      0|        {
  227|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  228|      0|            return false;
  229|      0|        }
  230|      2|
  231|      2|        phi::usize   start_address = address - m_StartingAddress;
  232|      2|        std::uint8_t first_byte    = (value.get() & 0b11111111'00000000'00000000'00000000) >> 24;
  233|      2|        std::uint8_t second_byte   = (value.get() & 0b00000000'11111111'00000000'00000000) >> 16;
  234|      2|        std::uint8_t third_byte    = (value.get() & 0b00000000'00000000'11111111'00000000) >> 8;
  235|      2|        std::uint8_t fourth_byte   = value.get() & 0b00000000'00000000'00000000'11111111;
  236|      2|
  237|      2|        m_Values.at(start_address.get()).unsigned_value        = first_byte;
  238|      2|        m_Values.at((start_address + 1u).get()).unsigned_value = second_byte;
  239|      2|        m_Values.at((start_address + 2u).get()).unsigned_value = third_byte;
  240|      2|        m_Values.at((start_address + 3u).get()).unsigned_value = fourth_byte;
  241|      2|
  242|      2|        return true;
  243|      2|    }
  244|       |
  245|       |    phi::Boolean MemoryBlock::StoreFloat(phi::usize address, phi::f32 value)
  246|      0|    {
  247|      0|        if (!IsAddressValid(address, 4u))
  248|      0|        {
  249|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  250|      0|            return false;
  251|      0|        }
  252|      0|
  253|      0|        float         value_raw  = value.get();
  254|      0|        std::uint32_t value_bits = *reinterpret_cast<std::uint32_t*>(&value_raw);
  255|      0|
  256|      0|        phi::usize   start_address = address - m_StartingAddress;
  257|      0|        std::uint8_t first_byte    = (value_bits & 0b11111111'00000000'00000000'00000000) >> 24;
  258|      0|        std::uint8_t second_byte   = (value_bits & 0b00000000'11111111'00000000'00000000) >> 16;
  259|      0|        std::uint8_t third_byte    = (value_bits & 0b00000000'00000000'11111111'00000000) >> 8;
  260|      0|        std::uint8_t fourth_byte   = value_bits & 0b00000000'00000000'00000000'11111111;
  261|      0|
  262|      0|        m_Values.at(start_address.get()).unsigned_value        = first_byte;
  263|      0|        m_Values.at((start_address + 1u).get()).unsigned_value = second_byte;
  264|      0|        m_Values.at((start_address + 2u).get()).unsigned_value = third_byte;
  265|      0|        m_Values.at((start_address + 3u).get()).unsigned_value = fourth_byte;
  266|      0|
  267|      0|        return true;
  268|      0|    }
  269|       |
  270|       |    phi::Boolean MemoryBlock::StoreDouble(phi::usize address, phi::f64 value)
  271|      0|    {
  272|      0|        if (!IsAddressValid(address, 8u))
  273|      0|        {
  274|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  275|      0|            return false;
  276|      0|        }
  277|      0|
  278|      0|        double value_raw = value.get();
  279|      0|
  280|      0|        std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  281|      0|
  282|      0|        std::uint32_t first_bits = value_bits & 0xFFFFFFFF;
  283|      0|        std::uint32_t last_bits  = value_bits >> 32;
  284|      0|
  285|      0|        float first_value = *reinterpret_cast<float*>(&first_bits);
  286|      0|        float last_value  = *reinterpret_cast<float*>(&last_bits);
  287|      0|
  288|      0|        StoreFloat(address, first_value);
  289|      0|        StoreFloat(address + 4u, last_value);
  290|      0|
  291|      0|        return true;
  292|      0|    }
  293|       |
  294|       |    phi::Boolean MemoryBlock::IsAddressValid(phi::usize address, phi::usize size) const
  295|  2.53k|    {
  296|  2.53k|        return address >= m_StartingAddress &&
  297|  2.53k|               (address + size) <= (m_StartingAddress + m_Values.size());
  298|  2.53k|    }
  299|       |
  300|       |    void MemoryBlock::Clear()
  301|    671|    {
  302|    671|        for (auto& val : m_Values)
  303|   671k|        {
  304|   671k|            val.signed_value = 0;
  305|   671k|        }
  306|    671|    }
  307|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Instruction.cpp:
    1|       |#include "DLX/Instruction.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include <Phi/Core/Assert.hpp>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    Instruction::Instruction(const InstructionInfo& info)
    9|       |        : m_Info(info)
   10|  7.84k|    {}
   11|       |
   12|       |    void Instruction::SetArgument(phi::u8 argument_number, InstructionArg argument)
   13|  19.2k|    {
   14|  19.2k|        PHI_ASSERT(argument_number < 3u);
   15|  19.2k|
   16|  19.2k|        switch (argument_number.get())
   17|  19.2k|        {
   18|  6.98k|            case 0u:
   19|  6.98k|                m_Arg1 = argument;
   20|  6.98k|                break;
   21|  6.81k|            case 1u:
   22|  6.81k|                m_Arg2 = argument;
   23|  6.81k|                break;
   24|  5.43k|            case 2u:
   25|  5.43k|                m_Arg3 = argument;
   26|  5.43k|                break;
   27|      0|            default:
   28|      0|                PHI_ASSERT_NOT_REACHED();
   29|  19.2k|        }
   30|  19.2k|    }
   31|       |
   32|       |    std::string Instruction::DebugInfo() const noexcept
   33|  5.60k|    {
   34|  5.60k|        return std::string("Instruction");
   35|  5.60k|    }
   36|       |
   37|       |    void Instruction::Execute(Processor& processor) const noexcept
   38|  50.6k|    {
   39|  50.6k|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   40|  50.6k|    }
   41|       |
   42|       |    const InstructionInfo& Instruction::GetInfo() const
   43|  50.6k|    {
   44|  50.6k|        return m_Info;
   45|  50.6k|    }
   46|       |
   47|       |    const InstructionArg& Instruction::GetArg1() const
   48|      0|    {
   49|      0|        return m_Arg1;
   50|      0|    }
   51|       |
   52|       |    const InstructionArg& Instruction::GetArg2() const
   53|      0|    {
   54|      0|        return m_Arg2;
   55|      0|    }
   56|       |
   57|       |    const InstructionArg& Instruction::GetArg3() const
   58|      0|    {
   59|      0|        return m_Arg3;
   60|      0|    }
   61|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Parser.cpp:
    1|       |#include "DLX/Parser.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/RegisterNames.hpp"
    5|       |#include <Phi/Config/FunctionLikeMacro.hpp>
    6|       |#include <Phi/Core/Conversion.hpp>
    7|       |#include <Phi/Core/Log.hpp>
    8|       |#include <magic_enum.hpp>
    9|       |#include <algorithm>
   10|       |#include <optional>
   11|       |
   12|       |using namespace phi::literals;
   13|       |
   14|       |namespace dlx
   15|       |{
   16|       |    phi::Boolean CharIsValidForIdentifer(const char c)
   17|    524|    {
   18|    524|        if (std::isalpha(c) || std::isdigit(c))
   19|    496|        {
   20|    496|            return true;
   21|    496|        }
   22|     28|
   23|     28|        switch (c)
   24|     28|        {
   25|     21|            case '_':
   26|     21|                return true;
   27|      0|
   28|      7|            default:
   29|      7|                return false;
   30|     28|        }
   31|     28|    }
   32|       |
   33|       |    static phi::Boolean is_integer_literal(std::string_view token)
   34|  96.7k|    {
   35|  96.7k|        if (token.length() == 0)
   36|      0|        {
   37|      0|            return false;
   38|      0|        }
   39|  96.7k|
   40|  96.7k|        // First character need to a plus sign a minus sign or a digit but only if theres a digit after that
   41|  96.7k|        if (!std::isdigit(token.at(0)) &&
   42|  96.7k|            !(token.length() > 1 && (token.at(0) == '+' || token.at(0) == '-')))
   43|  77.0k|        {
   44|  77.0k|            return false;
   45|  77.0k|        }
   46|  19.7k|
   47|  19.7k|        // Check that the rest of the token is only made up of numbers
   48|  42.2k|        for (phi::usize i{1u}; i < token.length(); ++i)
   49|  40.9k|        {
   50|  40.9k|            if (!std::isdigit(token.at(i.get())))
   51|  18.3k|            {
   52|  18.3k|                return false;
   53|  18.3k|            }
   54|  40.9k|        }
   55|  19.7k|
   56|  19.7k|        return true;
   57|  19.7k|    }
   58|       |
   59|       |    Token ParseToken(std::string_view token, phi::u64 line_number, phi::u64 column)
   60|   103k|    {
   61|   103k|        if (token.at(0) == '#' && token.size() > 1)
   62|  4.10k|        {
   63|  4.10k|            return Token(Token::Type::ImmediateInteger, token, line_number, column);
   64|  4.10k|        }
   65|  99.5k|        else if (token.at(0) == '/' || token.at(0) == ';')
   66|  2.79k|        {
   67|  2.79k|            return Token(Token::Type::Comment, token, line_number, column);
   68|  2.79k|        }
   69|  96.7k|        else if (is_integer_literal(token))
   70|  1.37k|        {
   71|  1.37k|            return Token(Token::Type::IntegerLiteral, token, line_number, column);
   72|  1.37k|        }
   73|  95.4k|
   74|  95.4k|        return Token(Token::Type::Identifier, token, line_number, column);
   75|  95.4k|    }
   76|       |
   77|       |    std::vector<Token> Parser::Tokenize(std::string_view str)
   78|    671|    {
   79|    671|        std::vector<Token> tokens{};
   80|    671|        tokens.reserve(5);
   81|    671|
   82|    671|        std::string current_token;
   83|    671|        current_token.reserve(10);
   84|    671|
   85|    671|        phi::u64 current_line_number{1u};
   86|    671|        phi::u64 token_begin{0u};
   87|    671|
   88|    671|        phi::Boolean parsing_comment{false};
   89|    671|
   90|  2.82M|        for (phi::usize i{0u}; i < str.length(); ++i)
   91|  2.82M|        {
   92|  2.82M|            const char c{str.at(i.get())};
   93|  2.82M|
   94|  2.82M|            if (c == '\n')
   95|  23.6k|            {
   96|  23.6k|                if (current_token.empty())
   97|  4.10k|                {
   98|  4.10k|                    tokens.emplace_back(Token::Type::NewLine, str.substr(token_begin.get(), 1),
   99|  4.10k|                                        current_line_number, token_begin);
  100|  4.10k|                    // Skip empty lines
  101|  4.10k|                    continue;
  102|  4.10k|                }
  103|  19.5k|
  104|  19.5k|                // Otherwise a new line separates tokens
  105|  19.5k|                tokens.emplace_back(
  106|  19.5k|                        ParseToken(str.substr(token_begin.get(), current_token.length()),
  107|  19.5k|                                   current_line_number, token_begin));
  108|  19.5k|
  109|  19.5k|                token_begin = i;
  110|  19.5k|
  111|  19.5k|                tokens.emplace_back(Token::Type::NewLine, str.substr(token_begin.get(), 1),
  112|  19.5k|                                    current_line_number, token_begin);
  113|  19.5k|
  114|  19.5k|                current_token.clear();
  115|  19.5k|                parsing_comment = false;
  116|  19.5k|                current_line_number += 1u;
  117|  19.5k|            }
  118|  2.80M|            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  119|  2.80M|            else if (c == '/' || c == ';')
  120|  87.9k|            {
  121|  87.9k|                if (current_token.empty())
  122|  2.79k|                {
  123|  2.79k|                    token_begin = i;
  124|  2.79k|                }
  125|  87.9k|
  126|  87.9k|                parsing_comment = true;
  127|  87.9k|                current_token.push_back(c);
  128|  87.9k|            }
  129|  2.71M|            else if (parsing_comment)
  130|  1.95M|            {
  131|  1.95M|                // simply append the character
  132|  1.95M|                current_token.push_back(c);
  133|  1.95M|            }
  134|   758k|            else
  135|   758k|            {
  136|   758k|                // Not parsing a comment
  137|   758k|
  138|   758k|                switch (c)
  139|   758k|                {
  140|   215k|                    case ' ':
  141|   215k|                    case '\t':
  142|   215k|                    case '\v':
  143|   215k|                        if (current_token.empty())
  144|   165k|                        {
  145|   165k|                            // We haven't found any usable character for the current token so just skip the whitespace.
  146|   165k|                            continue;
  147|   165k|                        }
  148|  50.5k|
  149|  50.5k|                        // Otherwise a whitespace separates tokens
  150|  50.5k|                        tokens.push_back(
  151|  50.5k|                                ParseToken(str.substr(token_begin.get(), current_token.length()),
  152|  50.5k|                                           current_line_number, token_begin));
  153|  50.5k|                        current_token.clear();
  154|  50.5k|                        break;
  155|  50.5k|                    case ':':
  156|  24.0k|                        // Need to parse label names together with their colon
  157|  24.0k|                        if (!current_token.empty())
  158|  19.4k|                        {
  159|  19.4k|                            current_token.push_back(c);
  160|  19.4k|                            tokens.emplace_back(ParseToken(
  161|  19.4k|                                    str.substr(token_begin.get(), current_token.length()),
  162|  19.4k|                                    current_line_number, token_begin));
  163|  19.4k|
  164|  19.4k|                            current_token.clear();
  165|  19.4k|                        }
  166|  4.52k|                        else
  167|  4.52k|                        {
  168|  4.52k|                            // Orphan colon
  169|  4.52k|                            token_begin = i;
  170|  4.52k|
  171|  4.52k|                            tokens.emplace_back(Token::Type::Colon,
  172|  4.52k|                                                str.substr(token_begin.get(), 1),
  173|  4.52k|                                                current_line_number, token_begin);
  174|  4.52k|                            break;
  175|  4.52k|                        }
  176|  19.4k|                        break;
  177|  19.4k|                    case ',':
  178|  17.6k|                    case '(':
  179|  17.6k|                    case ')':
  180|  17.6k|                        if (!current_token.empty())
  181|  13.6k|                        {
  182|  13.6k|                            tokens.emplace_back(ParseToken(
  183|  13.6k|                                    str.substr(token_begin.get(), current_token.length()),
  184|  13.6k|                                    current_line_number, token_begin));
  185|  13.6k|
  186|  13.6k|                            current_token.clear();
  187|  13.6k|                        }
  188|  17.6k|
  189|  17.6k|                        Token::Type type;
  190|  17.6k|                        switch (c)
  191|  17.6k|                        {
  192|  5.75k|                            case ',':
  193|  5.75k|                                type = Token::Type::Comma;
  194|  5.75k|                                break;
  195|  6.01k|                            case '(':
  196|  6.01k|                                type = Token::Type::OpenBracket;
  197|  6.01k|                                break;
  198|  5.85k|                            case ')':
  199|  5.85k|                                type = Token::Type::ClosingBracket;
  200|  5.85k|                                break;
  201|  17.6k|                        }
  202|  17.6k|
  203|  17.6k|                        token_begin = i;
  204|  17.6k|
  205|  17.6k|                        tokens.emplace_back(type, str.substr(token_begin.get(), 1),
  206|  17.6k|                                            current_line_number, token_begin);
  207|  17.6k|                        break;
  208|  17.6k|
  209|   500k|                    default:
  210|   500k|                        if (current_token.empty())
  211|   100k|                        {
  212|   100k|                            token_begin = i;
  213|   100k|                        }
  214|   500k|
  215|   500k|                        // simply append the character
  216|   500k|                        current_token.push_back(c);
  217|   758k|                }
  218|   758k|            }
  219|  2.82M|        }
  220|    671|
  221|    671|        // Checked the entire string. Parse whats left if anything
  222|    671|        if (!current_token.empty())
  223|    411|        {
  224|    411|            tokens.emplace_back(ParseToken(str.substr(token_begin.get(), current_token.length()),
  225|    411|                                           current_line_number, token_begin));
  226|    411|        }
  227|    671|
  228|    671|        return tokens;
  229|    671|    }
  230|       |
  231|       |    static phi::Boolean has_x_more_tokens(const std::vector<Token>& tokens, phi::usize index,
  232|       |                                          phi::u64 x)
  233|  22.3k|    {
  234|  22.3k|        return index + x <= tokens.size();
  235|  22.3k|    }
  236|       |
  237|       |    static phi::Boolean has_one_more_token(const std::vector<Token>& tokens, phi::usize index)
  238|  21.6k|    {
  239|  21.6k|        return has_x_more_tokens(tokens, index, 1u);
  240|  21.6k|    }
  241|       |
  242|       |    static phi::Boolean next_token_is(const std::vector<Token>& tokens, phi::usize index,
  243|       |                                      Token::Type token_type)
  244|      0|    {
  245|      0|        PHI_ASSERT(has_one_more_token(tokens, index));
  246|      0|
  247|      0|        const auto& next_token = tokens.at((index + 1u).get());
  248|      0|
  249|      0|        return next_token.GetType() == token_type;
  250|      0|    }
  251|       |
  252|       |    static phi::Boolean has_one_more_token_of_type(const std::vector<Token>& tokens,
  253|       |                                                   phi::usize index, Token::Type token_type)
  254|      0|    {
  255|      0|        if (!has_one_more_token(tokens, index))
  256|      0|        {
  257|      0|            return false;
  258|      0|        }
  259|      0|
  260|      0|        return (next_token_is(tokens, index, token_type));
  261|      0|    }
  262|       |
  263|       |    static void AddParseError(ParsedProgram& program, const std::string& message)
  264|  74.2k|    {
  265|  74.2k|        ParseError err;
  266|  74.2k|        err.message = message;
  267|  74.2k|
  268|  74.2k|        PHI_LOG_ERROR("Parsing error: {}", message);
  269|  74.2k|
  270|  74.2k|        program.m_ParseErrors.emplace_back(err);
  271|  74.2k|    }
  272|       |
  273|       |    static std::optional<InstructionArg> parse_instruction_argument(
  274|       |            const Token& token, ArgumentType expected_argument_type,
  275|       |            const std::vector<Token>& tokens, phi::usize& index, ParsedProgram& program)
  276|  20.0k|    {
  277|  20.0k|        PHI_LOG_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
  278|  20.0k|                     magic_enum::enum_name(expected_argument_type));
  279|  20.0k|
  280|  20.0k|        switch (token.GetType())
  281|  20.0k|        {
  282|    649|            case Token::Type::IntegerLiteral: {
  283|    649|                if (!ArgumentTypeIncludes(expected_argument_type,
  284|    649|                                          ArgumentType::AddressDisplacement))
  285|     11|                {
  286|     11|                    AddParseError(program,
  287|     11|                                  fmt::format("Expected {} but got address displacement",
  288|     11|                                              magic_enum::enum_name(expected_argument_type)));
  289|     11|                    return {};
  290|     11|                }
  291|    638|
  292|    638|                // Parse address displacement
  293|    638|                std::int32_t displacement_value{0};
  294|    638|                try
  295|    638|                {
  296|    638|                    displacement_value = std::stoi(token.GetTextString());
  297|    638|                }
  298|    638|                catch (std::invalid_argument& /*e*/)
  299|    638|                {
  300|      0|                    AddParseError(program,
  301|      0|                                  "Failed to parse displacement value for Address displacement");
  302|      0|                    return {};
  303|      0|                }
  304|      1|                catch (std::out_of_range& /*e*/)
  305|      1|                {
  306|      1|                    AddParseError(program, "Value is out of range");
  307|      1|                    return {};
  308|      1|                }
  309|    637|
  310|    637|                if (!has_x_more_tokens(tokens, index, 3u))
  311|      2|                {
  312|      2|                    AddParseError(program,
  313|      2|                                  "Not enough arguments left to parse address displacement");
  314|      2|                    return {};
  315|      2|                }
  316|    635|
  317|    635|                const Token& first_token  = tokens.at(index.get());
  318|    635|                const Token& second_token = tokens.at((index + 1u).get());
  319|    635|                const Token& third_token  = tokens.at((index + 2u).get());
  320|    635|
  321|    635|                if (first_token.GetType() != Token::Type::OpenBracket)
  322|      0|                {
  323|      0|                    AddParseError(program, "Expected open bracket");
  324|      0|                    return {};
  325|      0|                }
  326|    635|
  327|    635|                // Second token is the address
  328|    635|                IntRegisterID reg_id = StringToIntRegister(
  329|    635|                        {second_token.GetText().data(), second_token.GetText().size()});
  330|    635|
  331|    635|                if (reg_id == IntRegisterID::None)
  332|      0|                {
  333|      0|                    AddParseError(program, "Expected IntRegister");
  334|      0|                    return {};
  335|      0|                }
  336|    635|
  337|    635|                if (third_token.GetType() != Token::Type::ClosingBracket)
  338|      1|                {
  339|      1|                    AddParseError(program, "Expected closing bracket");
  340|      1|                    return {};
  341|      1|                }
  342|    634|
  343|    634|                index += 3u;
  344|    634|
  345|    634|                PHI_LOG_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
  346|    634|                             displacement_value, magic_enum::enum_name(reg_id));
  347|    634|
  348|    634|                return ConstructInstructionArgAddressDisplacement(reg_id, displacement_value);
  349|    634|            }
  350|  15.6k|            case Token::Type::Identifier: {
  351|  15.6k|                IntRegisterID reg_id = StringToIntRegister(token.GetTextString());
  352|  15.6k|
  353|  15.6k|                if (reg_id != IntRegisterID::None)
  354|  15.1k|                {
  355|  15.1k|                    if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  356|     18|                    {
  357|     18|                        AddParseError(program,
  358|     18|                                      fmt::format("Got IntRegister but expected '{}'",
  359|     18|                                                  magic_enum::enum_name(expected_argument_type)));
  360|     18|                        return {};
  361|     18|                    }
  362|  15.1k|
  363|  15.1k|                    PHI_LOG_INFO("Parsed identifier as int register {}",
  364|  15.1k|                                 magic_enum::enum_name(reg_id));
  365|  15.1k|
  366|  15.1k|                    return ConstructInstructionArgRegisterInt(reg_id);
  367|  15.1k|                }
  368|    556|
  369|    556|                // Try parsing as FloatRegister
  370|    556|                FloatRegisterID float_reg_id = StringToFloatRegister(token.GetTextString());
  371|    556|
  372|    556|                if (float_reg_id != FloatRegisterID::None)
  373|      0|                {
  374|      0|                    if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  375|      0|                    {
  376|      0|                        AddParseError(program,
  377|      0|                                      fmt::format("Got FloatRegister but expected '{}'",
  378|      0|                                                  magic_enum::enum_name(expected_argument_type)));
  379|      0|                        return {};
  380|      0|                    }
  381|      0|
  382|      0|                    PHI_LOG_INFO("Parsed identifier as float register {}",
  383|      0|                                 magic_enum::enum_name(float_reg_id));
  384|      0|
  385|      0|                    return ConstructInstructionArgRegisterFloat(float_reg_id);
  386|      0|                }
  387|    556|
  388|    556|                // Parse as Label
  389|    556|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  390|    388|                {
  391|    388|                    AddParseError(program,
  392|    388|                                  fmt::format("Got Label but expected '{}'",
  393|    388|                                              magic_enum::enum_name(expected_argument_type)));
  394|    388|                    return {};
  395|    388|                }
  396|    168|
  397|    168|                if (!std::all_of(token.GetText().begin(), token.GetText().end(),
  398|    168|                                 CharIsValidForIdentifer))
  399|      7|                {
  400|      7|                    AddParseError(program, fmt::format("Invalid label identifier found {}",
  401|      7|                                                       token.GetText()));
  402|      7|                    return {};
  403|      7|                }
  404|    161|
  405|    161|                PHI_LOG_INFO("Parsed Label identifier as '{}'", token.GetText());
  406|    161|
  407|    161|                return ConstructInstructionArgLabel(token.GetText());
  408|    161|            }
  409|  3.32k|            case Token::Type::ImmediateInteger: {
  410|  3.32k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  411|      9|                {
  412|      9|                    AddParseError(program,
  413|      9|                                  fmt::format("Got ImmediateInteger but expected '{}'",
  414|      9|                                              magic_enum::enum_name(expected_argument_type)));
  415|      9|                    return {};
  416|      9|                }
  417|  3.32k|
  418|  3.32k|                std::int32_t value{0};
  419|  3.32k|                try
  420|  3.32k|                {
  421|  3.32k|                    value = std::stoi(token.GetTextString().substr(1));
  422|  3.32k|                }
  423|  3.32k|                catch (std::invalid_argument& /*e*/)
  424|  3.32k|                {
  425|      0|                    AddParseError(program, "Failed to parse immediate Integer value");
  426|      0|                    return {};
  427|      0|                }
  428|      0|                catch (std::out_of_range& /*e*/)
  429|      0|                {
  430|      0|                    AddParseError(program, "Value is out of range");
  431|      0|                    return {};
  432|      0|                }
  433|  3.32k|
  434|  3.32k|                PHI_LOG_INFO("Parsed Immediate Integer with value {}", value);
  435|  3.32k|
  436|  3.32k|                return ConstructInstructionArgImmediateValue(value);
  437|  3.32k|            }
  438|  3.32k|            default:
  439|    361|                AddParseError(program,
  440|    361|                              fmt::format("Unexpected token of type '{}'", token.GetTypeName()));
  441|    361|                return {};
  442|  20.0k|        }
  443|  20.0k|    }
  444|       |
  445|       |    static void consume_x_tokens(phi::usize& index, phi::usize x)
  446|   147k|    {
  447|   147k|        index += x;
  448|   147k|    }
  449|       |
  450|       |    static void consume_current_token(phi::usize& index)
  451|   147k|    {
  452|   147k|        consume_x_tokens(index, 1u);
  453|   147k|    }
  454|       |
  455|       |    ParsedProgram Parser::Parse(const InstructionLibrary& lib, std::vector<Token>& tokens)
  456|    671|    {
  457|    671|        ParsedProgram program;
  458|    671|
  459|    671|        phi::Boolean line_has_instruction{false};
  460|    671|
  461|   126k|        for (phi::usize index{0u}; index < tokens.size();)
  462|   125k|        {
  463|   125k|            Token& current_token = tokens.at(index.get());
  464|   125k|
  465|   125k|            consume_current_token(index);
  466|   125k|
  467|   125k|            PHI_LOG_INFO("Parsing '{}'", current_token.DebugInfo());
  468|   125k|
  469|   125k|            switch (current_token.GetType())
  470|   125k|            {
  471|      0|                // Ignore comments
  472|  2.79k|                case Token::Type::Comment:
  473|  2.79k|                    PHI_LOG_DEBUG("Ignoring comment");
  474|  2.79k|                    break;
  475|  23.5k|                case Token::Type::NewLine:
  476|  23.5k|                    PHI_LOG_DEBUG("Ignoring newline");
  477|  23.5k|                    line_has_instruction = false;
  478|  23.5k|                    break;
  479|  79.0k|                case Token::Type::Identifier: {
  480|  79.0k|                    if (line_has_instruction)
  481|    618|                    {
  482|    618|                        AddParseError(program, "Expected new line but got identifer");
  483|    618|                        break;
  484|    618|                    }
  485|  78.4k|
  486|  78.4k|                    // Handle jump labels
  487|  78.4k|                    // Check if the last character of the identifier is a colon
  488|  78.4k|                    if (current_token.GetText().at(current_token.GetText().size() - 1) == ':')
  489|  19.1k|                    {
  490|  19.1k|                        std::string_view label_name = current_token.GetText().substr(
  491|  19.1k|                                0, current_token.GetText().size() - 1);
  492|  19.1k|
  493|  19.1k|                        program.m_JumpData[label_name] =
  494|  19.1k|                                static_cast<std::uint32_t>(program.m_Instructions.size());
  495|  19.1k|
  496|  19.1k|                        PHI_LOG_INFO("Added jump label {} -> {}", label_name,
  497|  19.1k|                                     program.m_Instructions.size());
  498|  19.1k|                        break;
  499|  19.1k|                    }
  500|  59.3k|
  501|  59.3k|                    // Handle normal instructions
  502|  59.3k|                    // First we need to parse the instruction itself so we know how many arguments it expects
  503|  59.3k|                    OpCode opcode = StringToOpCode(current_token.GetTextString());
  504|  59.3k|
  505|  59.3k|                    if (opcode == OpCode::NONE)
  506|  51.5k|                    {
  507|  51.5k|                        AddParseError(program,
  508|  51.5k|                                      fmt::format("Failed to parse instruction '{}' not found.",
  509|  51.5k|                                                  current_token.GetText()));
  510|  51.5k|                        break;
  511|  51.5k|                    }
  512|  7.84k|
  513|  7.84k|                    PHI_LOG_INFO("Instruction opcode: {}", magic_enum::enum_name(opcode));
  514|  7.84k|
  515|  7.84k|                    const InstructionInfo& info = lib.LookUp(opcode);
  516|  7.84k|
  517|  7.84k|                    // Make sure we got no problems here
  518|  7.84k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  519|  7.84k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  520|  7.84k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  521|  7.84k|                    PHI_ASSERT(info.GetExecutor());
  522|  7.84k|
  523|  7.84k|                    phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  524|  7.84k|                    PHI_LOG_INFO("Instruction requires {} arguments",
  525|  7.84k|                                 number_of_argument_required.get());
  526|  7.84k|
  527|  7.84k|                    // Create instruction
  528|  7.84k|                    Instruction instruction(info);
  529|  7.84k|
  530|  7.84k|                    // Parse arguments
  531|  28.6k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  532|  21.6k|                    {
  533|  21.6k|                        // Get next token
  534|  21.6k|                        if (!has_one_more_token(tokens, index))
  535|     29|                        {
  536|     29|                            AddParseError(
  537|     29|                                    program,
  538|     29|                                    fmt::format("Missing {} arguments for instruction {}",
  539|     29|                                                (number_of_argument_required - argument_num).get(),
  540|     29|                                                magic_enum::enum_name(opcode)));
  541|     29|                            break;
  542|     29|                        }
  543|  21.6k|
  544|  21.6k|                        current_token = tokens.at(index.get());
  545|  21.6k|                        consume_current_token(index);
  546|  21.6k|
  547|  21.6k|                        // Skip commas
  548|  21.6k|                        if (current_token.GetType() == Token::Type::Comma)
  549|  1.57k|                        {
  550|  1.57k|                            PHI_LOG_DEBUG("Skipping comma");
  551|  1.57k|                            continue;
  552|  1.57k|                        }
  553|  20.0k|
  554|  20.0k|                        if (current_token.GetType() == Token::Type::NewLine)
  555|     40|                        {
  556|     40|                            AddParseError(program, "Unexpected end of line");
  557|     40|                            break;
  558|     40|                        }
  559|  20.0k|
  560|  20.0k|                        std::optional<InstructionArg> optional_parsed_argument =
  561|  20.0k|                                parse_instruction_argument(current_token,
  562|  20.0k|                                                           info.GetArgumentType(argument_num),
  563|  20.0k|                                                           tokens, index, program);
  564|  20.0k|                        if (!optional_parsed_argument.has_value())
  565|    798|                        {
  566|    798|                            AddParseError(program, fmt::format("Failed to parse argument number {}",
  567|    798|                                                               argument_num.get()));
  568|    798|                            break;
  569|    798|                        }
  570|  19.2k|
  571|  19.2k|                        // Successfully parsed one argument
  572|  19.2k|                        InstructionArg parsed_argument = optional_parsed_argument.value();
  573|  19.2k|
  574|  19.2k|                        instruction.SetArgument(argument_num, parsed_argument);
  575|  19.2k|                        argument_num++;
  576|  19.2k|
  577|  19.2k|                        PHI_LOG_INFO("Successfully parsed argument {}", argument_num.get());
  578|  19.2k|                    }
  579|  7.84k|
  580|  7.84k|                    // Only add the instruction if we got no parsing errors
  581|  7.84k|                    if (program.m_ParseErrors.empty())
  582|  5.60k|                    {
  583|  5.60k|                        PHI_LOG_INFO("Successfully parsed instruction '{}'",
  584|  5.60k|                                     instruction.DebugInfo());
  585|  5.60k|                        program.m_Instructions.emplace_back(std::move(instruction));
  586|  5.60k|                        line_has_instruction = true;
  587|  5.60k|                    }
  588|  7.84k|                    break;
  589|  7.84k|                }
  590|  7.84k|
  591|  20.4k|                default:
  592|  20.4k|                    AddParseError(program, "Unexpected token");
  593|  20.4k|                    break;
  594|   125k|            }
  595|   125k|        }
  596|    671|
  597|    671|        return program;
  598|    671|    }
  599|       |
  600|       |    ParsedProgram Parser::Parse(const InstructionLibrary& lib, std::string_view source)
  601|    671|    {
  602|    671|        std::vector<Token> tokens = Tokenize(source);
  603|    671|        return Parse(lib, tokens);
  604|    671|    }
  605|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/OpCode.cpp:
    1|       |#include "DLX/OpCode.hpp"
    2|       |
    3|       |#include <magic_enum.hpp>
    4|       |#include <algorithm>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    OpCode StringToOpCode(std::string token)
    9|  59.3k|    {
   10|  59.3k|        std::transform(token.begin(), token.end(), token.begin(), ::toupper);
   11|  59.3k|        std::optional<OpCode> opcode_casted = magic_enum::enum_cast<OpCode>(token);
   12|  59.3k|        if (opcode_casted.has_value())
   13|  8.02k|        {
   14|  8.02k|            // TODO: Bit of a hacky way around magic_enum begin able to cast every member...
   15|  8.02k|            if (opcode_casted.value() == OpCode::NUMBER_OF_ELEMENTS)
   16|      2|            {
   17|      2|                return OpCode::NONE;
   18|      2|            }
   19|  8.02k|            return opcode_casted.value();
   20|  8.02k|        }
   21|  51.3k|
   22|  51.3k|        // None found
   23|  51.3k|        return OpCode::NONE;
   24|  51.3k|    }
   25|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionArg.cpp:
    1|       |#include "DLX/InstructionArg.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    InstructionArg::InstructionArg()
    6|       |        : m_Type(ArgumentType::None)
    7|       |        , address_displacement()
    8|  42.7k|    {}
    9|       |
   10|       |    ArgumentType InstructionArg::GetType() const
   11|   157k|    {
   12|   157k|        return m_Type;
   13|   157k|    }
   14|       |
   15|       |    std::string InstructionArg::DebugInfo() const
   16|      0|    {
   17|      0|        return "InstructionArgument";
   18|      0|    }
   19|       |
   20|       |    const InstructionArg::RegisterInt& InstructionArg::AsRegisterInt() const
   21|  69.0k|    {
   22|  69.0k|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   23|  69.0k|
   24|  69.0k|        return register_int;
   25|  69.0k|    }
   26|       |
   27|       |    const InstructionArg::RegisterFloat& InstructionArg::AsRegisterFloat() const
   28|      0|    {
   29|      0|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   30|      0|
   31|      0|        return register_float;
   32|      0|    }
   33|       |
   34|       |    const InstructionArg::ImmediateValue& InstructionArg::AsImmediateValue() const
   35|    287|    {
   36|    287|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   37|    287|
   38|    287|        return immediate_value;
   39|    287|    }
   40|       |
   41|       |    const InstructionArg::AddressDisplacement& InstructionArg::AsAddressDisplacement() const
   42|  2.51k|    {
   43|  2.51k|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
   44|  2.51k|
   45|  2.51k|        return address_displacement;
   46|  2.51k|    }
   47|       |
   48|       |    const InstructionArg::Label& InstructionArg::AsLabel() const
   49|  12.5k|    {
   50|  12.5k|        PHI_ASSERT(m_Type == ArgumentType::Label);
   51|  12.5k|
   52|  12.5k|        return label;
   53|  12.5k|    }
   54|       |
   55|       |    phi::Boolean operator==(const InstructionArg& lhs, const InstructionArg& rhs)
   56|      0|    {
   57|      0|        if (lhs.GetType() != rhs.GetType())
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|      0|
   62|      0|        switch (lhs.GetType())
   63|      0|        {
   64|      0|            case ArgumentType::AddressDisplacement:
   65|      0|                return (lhs.AsAddressDisplacement().displacement ==
   66|      0|                        rhs.AsAddressDisplacement().displacement) &&
   67|      0|                       (lhs.AsAddressDisplacement().register_id ==
   68|      0|                        rhs.AsAddressDisplacement().register_id);
   69|      0|            case ArgumentType::ImmediateInteger:
   70|      0|                return lhs.AsImmediateValue().signed_value == rhs.AsImmediateValue().signed_value;
   71|      0|            case ArgumentType::IntRegister:
   72|      0|                return lhs.AsRegisterInt().register_id == rhs.AsRegisterInt().register_id;
   73|      0|            case ArgumentType::FloatRegister:
   74|      0|                return lhs.AsRegisterFloat().register_id == rhs.AsRegisterFloat().register_id;
   75|      0|            case ArgumentType::Label:
   76|      0|                return lhs.AsLabel().label_name == rhs.AsLabel().label_name;
   77|      0|            case ArgumentType::None:
   78|      0|                return true;
   79|      0|            default:
   80|      0|                PHI_ASSERT_NOT_REACHED();
   81|      0|                break;
   82|      0|        }
   83|      0|
   84|      0|        PHI_ASSERT_NOT_REACHED();
   85|      0|        return false;
   86|      0|    }
   87|       |
   88|       |    phi::Boolean operator!=(const InstructionArg& lhs, const InstructionArg& rhs)
   89|      0|    {
   90|      0|        return !(lhs == rhs);
   91|      0|    }
   92|       |
   93|       |    InstructionArg ConstructInstructionArgRegisterInt(IntRegisterID id)
   94|  15.1k|    {
   95|  15.1k|        InstructionArg arg;
   96|  15.1k|        arg.m_Type                   = ArgumentType::IntRegister;
   97|  15.1k|        arg.register_int.register_id = id;
   98|  15.1k|        return arg;
   99|  15.1k|    }
  100|       |
  101|       |    InstructionArg ConstructInstructionArgRegisterFloat(FloatRegisterID id)
  102|      0|    {
  103|      0|        InstructionArg arg;
  104|      0|        arg.m_Type                     = ArgumentType::FloatRegister;
  105|      0|        arg.register_float.register_id = id;
  106|      0|        return arg;
  107|      0|    }
  108|       |
  109|       |    InstructionArg ConstructInstructionArgImmediateValue(phi::i32 value)
  110|  3.32k|    {
  111|  3.32k|        InstructionArg arg;
  112|  3.32k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  113|  3.32k|        arg.immediate_value.signed_value = value;
  114|  3.32k|        return arg;
  115|  3.32k|    }
  116|       |
  117|       |    InstructionArg ConstructInstructionArgAddressDisplacement(IntRegisterID id,
  118|       |                                                              phi::i32      displacement)
  119|    634|    {
  120|    634|        InstructionArg arg;
  121|    634|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  122|    634|        arg.address_displacement.register_id  = id;
  123|    634|        arg.address_displacement.displacement = displacement;
  124|    634|        return arg;
  125|    634|    }
  126|       |
  127|       |    InstructionArg ConstructInstructionArgLabel(std::string_view label_name)
  128|    161|    {
  129|    161|        InstructionArg arg;
  130|    161|        arg.m_Type           = ArgumentType::Label;
  131|    161|        arg.label.label_name = label_name;
  132|    161|        return arg;
  133|    161|    }
  134|       |} // namespace dlx

