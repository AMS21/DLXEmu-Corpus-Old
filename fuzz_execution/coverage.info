/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Processor.cpp:
    1|       |#include "DLX/Processor.hpp"
    2|       |
    3|       |#include "DLX/FloatRegister.hpp"
    4|       |#include "DLX/InstructionInfo.hpp"
    5|       |#include "DLX/Parser.hpp"
    6|       |#include "DLX/RegisterNames.hpp"
    7|       |#include "DLX/StatusRegister.hpp"
    8|       |#include "Phi/Core/Log.hpp"
    9|       |#include "Phi/Core/Types.hpp"
   10|       |
   11|       |namespace dlx
   12|       |{
   13|       |    static phi::Boolean RegisterAccessTypeMatches(RegisterAccessType expected_access,
   14|       |                                                  RegisterAccessType access)
   15|   102k|    {
   16|   102k|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   17|   102k|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   18|   102k|
   19|   102k|        switch (expected_access)
   20|   102k|        {
   21|    436|            case RegisterAccessType::Ignored:
   22|    436|                return true;
   23|      0|            case RegisterAccessType::None:
   24|      0|                return false;
   25|      0|            case RegisterAccessType::MixedFloatDouble:
   26|      0|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
   27|   101k|            default:
   28|   101k|                return expected_access == access;
   29|   102k|        }
   30|   102k|    }
   31|       |
   32|       |    Processor::Processor()
   33|       |        : m_MemoryBlock(1000u, 1000u)
   34|  14.1k|    {
   35|  14.1k|        // Mark R0 as ready only
   36|  14.1k|        m_IntRegisters.at(0).SetReadOnly(true);
   37|  14.1k|    }
   38|       |
   39|       |    IntRegister& Processor::GetIntRegister(IntRegisterID id)
   40|  35.7k|    {
   41|  35.7k|        PHI_ASSERT(id != IntRegisterID::None);
   42|  35.7k|        std::underlying_type_t<IntRegisterID> id_value =
   43|  35.7k|                static_cast<std::underlying_type_t<IntRegisterID>>(id);
   44|  35.7k|
   45|  35.7k|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
   46|  35.7k|
   47|  35.7k|        return m_IntRegisters.at(id_value);
   48|  35.7k|    }
   49|       |
   50|       |    const IntRegister& Processor::GetIntRegister(IntRegisterID id) const
   51|  66.3k|    {
   52|  66.3k|        PHI_ASSERT(id != IntRegisterID::None);
   53|  66.3k|        std::underlying_type_t<IntRegisterID> id_value =
   54|  66.3k|                static_cast<std::underlying_type_t<IntRegisterID>>(id);
   55|  66.3k|
   56|  66.3k|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
   57|  66.3k|
   58|  66.3k|        return m_IntRegisters.at(id_value);
   59|  66.3k|    }
   60|       |
   61|       |    phi::i32 Processor::IntRegisterGetSignedValue(IntRegisterID id) const
   62|  46.0k|    {
   63|  46.0k|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Signed))
   64|      6|        {
   65|      6|            PHI_LOG_WARN("Mismatch for instruction access type");
   66|      6|        }
   67|  46.0k|
   68|  46.0k|        return GetIntRegister(id).GetSignedValue();
   69|  46.0k|    }
   70|       |
   71|       |    phi::u32 Processor::IntRegisterGetUnsignedValue(IntRegisterID id) const
   72|  20.2k|    {
   73|  20.2k|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   74|  20.2k|                                       RegisterAccessType::Unsigned))
   75|      0|        {
   76|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   77|      0|        }
   78|  20.2k|
   79|  20.2k|        return GetIntRegister(id).GetUnsignedValue();
   80|  20.2k|    }
   81|       |
   82|       |    void Processor::IntRegisterSetSignedValue(IntRegisterID id, phi::i32 value)
   83|  25.5k|    {
   84|  25.5k|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Signed))
   85|      0|        {
   86|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   87|      0|        }
   88|  25.5k|
   89|  25.5k|        IntRegister& reg = GetIntRegister(id);
   90|  25.5k|
   91|  25.5k|        if (reg.IsReadOnly())
   92|  5.23k|        {
   93|  5.23k|            return;
   94|  5.23k|        }
   95|  20.3k|
   96|  20.3k|        reg.SetSignedValue(value);
   97|  20.3k|    }
   98|       |
   99|       |    void Processor::IntRegisterSetUnsignedValue(IntRegisterID id, phi::u32 value)
  100|  10.1k|    {
  101|  10.1k|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  102|  10.1k|                                       RegisterAccessType::Unsigned))
  103|      0|        {
  104|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  105|      0|        }
  106|  10.1k|
  107|  10.1k|        IntRegister& reg = GetIntRegister(id);
  108|  10.1k|
  109|  10.1k|        if (reg.IsReadOnly())
  110|    137|        {
  111|    137|            return;
  112|    137|        }
  113|  10.0k|
  114|  10.0k|        reg.SetUnsignedValue(value);
  115|  10.0k|    }
  116|       |
  117|       |    FloatRegister& Processor::GetFloatRegister(FloatRegisterID id)
  118|      0|    {
  119|      0|        PHI_ASSERT(id != FloatRegisterID::None);
  120|      0|        std::underlying_type_t<FloatRegisterID> id_value =
  121|      0|                static_cast<std::underlying_type_t<FloatRegisterID>>(id);
  122|      0|
  123|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
  124|      0|
  125|      0|        return m_FloatRegisters.at(id_value);
  126|      0|    }
  127|       |
  128|       |    const FloatRegister& Processor::GetFloatRegister(FloatRegisterID id) const
  129|      0|    {
  130|      0|        PHI_ASSERT(id != FloatRegisterID::None);
  131|      0|        std::underlying_type_t<FloatRegisterID> id_value =
  132|      0|                static_cast<std::underlying_type_t<FloatRegisterID>>(id);
  133|      0|
  134|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
  135|      0|
  136|      0|        return m_FloatRegisters.at(id_value);
  137|      0|    }
  138|       |
  139|       |    [[nodiscard]] phi::f32 Processor::FloatRegisterGetFloatValue(FloatRegisterID id) const
  140|      0|    {
  141|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Float))
  142|      0|        {
  143|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  144|      0|        }
  145|      0|
  146|      0|        const FloatRegister& reg = GetFloatRegister(id);
  147|      0|
  148|      0|        return reg.GetValue();
  149|      0|    }
  150|       |
  151|       |    [[nodiscard]] phi::f64 Processor::FloatRegisterGetDoubleValue(FloatRegisterID id)
  152|      0|    {
  153|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Double))
  154|      0|        {
  155|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  156|      0|        }
  157|      0|
  158|      0|        if (id == FloatRegisterID::F31)
  159|      0|        {
  160|      0|            Raise(Exception::RegisterOutOfBounds);
  161|      0|            return phi::f64(0.0);
  162|      0|        }
  163|      0|
  164|      0|        const FloatRegister& first_reg = GetFloatRegister(id);
  165|      0|        const FloatRegister& second_reg =
  166|      0|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  167|      0|
  168|      0|        const float first_value  = first_reg.GetValue().get();
  169|      0|        const float second_value = second_reg.GetValue().get();
  170|      0|
  171|      0|        const std::uint32_t first_value_bits =
  172|      0|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  173|      0|        const std::uint32_t second_value_bits =
  174|      0|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  175|      0|
  176|      0|        std::uint64_t final_value_bits =
  177|      0|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  178|      0|
  179|      0|        return *reinterpret_cast<double*>(&final_value_bits);
  180|      0|    }
  181|       |
  182|       |    void Processor::FloatRegisterSetFloatValue(FloatRegisterID id, phi::f32 value)
  183|      0|    {
  184|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Float))
  185|      0|        {
  186|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  187|      0|        }
  188|      0|
  189|      0|        FloatRegister& reg = GetFloatRegister(id);
  190|      0|
  191|      0|        reg.SetValue(value);
  192|      0|    }
  193|       |
  194|       |    void Processor::FloatRegisterSetDoubleValue(FloatRegisterID id, phi::f64 value)
  195|      0|    {
  196|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Double))
  197|      0|        {
  198|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  199|      0|        }
  200|      0|
  201|      0|        if (id == FloatRegisterID::F31)
  202|      0|        {
  203|      0|            Raise(Exception::RegisterOutOfBounds);
  204|      0|            return;
  205|      0|        }
  206|      0|
  207|      0|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  208|      0|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  209|      0|
  210|      0|        double              value_raw  = value.get();
  211|      0|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  212|      0|
  213|      0|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  214|      0|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  215|      0|
  216|      0|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  217|      0|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  218|      0|
  219|      0|        FloatRegister& first_reg = GetFloatRegister(id);
  220|      0|        FloatRegister& second_reg =
  221|      0|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  222|      0|
  223|      0|        first_reg.SetValue(first_value);
  224|      0|        second_reg.SetValue(second_value);
  225|      0|    }
  226|       |
  227|       |    StatusRegister& Processor::GetFPSR()
  228|      0|    {
  229|      0|        return m_FPSR;
  230|      0|    }
  231|       |
  232|       |    const StatusRegister& Processor::GetFPSR() const
  233|      0|    {
  234|      0|        return m_FPSR;
  235|      0|    }
  236|       |
  237|       |    phi::Boolean Processor::GetFPSRValue() const
  238|      0|    {
  239|      0|        const StatusRegister& status_reg = GetFPSR();
  240|      0|
  241|      0|        return status_reg.Get();
  242|      0|    }
  243|       |
  244|       |    void Processor::SetFPSRValue(phi::Boolean value)
  245|      0|    {
  246|      0|        StatusRegister& status_reg = GetFPSR();
  247|      0|
  248|      0|        status_reg.SetStatus(value);
  249|      0|    }
  250|       |
  251|       |    void Processor::ExecuteInstruction(const Instruction& inst)
  252|   130k|    {
  253|   130k|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  254|   130k|
  255|   130k|        inst.Execute(*this);
  256|   130k|    }
  257|       |
  258|       |    void Processor::LoadProgram(ParsedProgram& programm)
  259|  14.1k|    {
  260|  14.1k|        m_CurrentProgram = &programm;
  261|  14.1k|
  262|  14.1k|        m_ProgramCounter               = 0u;
  263|  14.1k|        m_Halted                       = false;
  264|  14.1k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  265|  14.1k|    }
  266|       |
  267|       |    phi::ObserverPtr<ParsedProgram> Processor::GetCurrentProgramm() const noexcept
  268|   100k|    {
  269|   100k|        return m_CurrentProgram;
  270|   100k|    }
  271|       |
  272|       |    void Processor::ExecuteCurrentProgram()
  273|  14.1k|    {
  274|  14.1k|        PHI_ASSERT(m_CurrentProgram);
  275|  14.1k|
  276|  14.1k|        // Don't execute a program with parsing errors
  277|  14.1k|        if (!m_CurrentProgram->m_ParseErrors.empty())
  278|  13.1k|        {
  279|  13.1k|            return;
  280|  13.1k|        }
  281|    957|
  282|    957|        m_ProgramCounter      = 0u;
  283|    957|        m_Halted              = false;
  284|    957|        m_LastRaisedException = Exception::None;
  285|    957|
  286|    957|        phi::usize StepCount{0u};
  287|    957|
  288|   131k|        while (m_ProgramCounter < m_CurrentProgram->m_Instructions.size() && !m_Halted &&
  289|   131k|               (m_MaxNumberOfSteps != 0u && StepCount < m_MaxNumberOfSteps))
  290|   130k|        {
  291|   130k|            m_NextProgramCounter = m_ProgramCounter + 1u;
  292|   130k|
  293|   130k|            const auto& current_instruction =
  294|   130k|                    m_CurrentProgram->m_Instructions.at(m_ProgramCounter.get());
  295|   130k|            ExecuteInstruction(current_instruction);
  296|   130k|
  297|   130k|            m_ProgramCounter = m_NextProgramCounter;
  298|   130k|
  299|   130k|            ++StepCount;
  300|   130k|        }
  301|    957|    }
  302|       |
  303|       |    void Processor::ClearRegisters()
  304|  14.1k|    {
  305|  14.1k|        for (auto& reg : m_IntRegisters)
  306|   452k|        {
  307|   452k|            reg.SetSignedValue(0);
  308|   452k|        }
  309|  14.1k|
  310|  14.1k|        for (auto& reg : m_FloatRegisters)
  311|   452k|        {
  312|   452k|            reg.SetValue(0.0f);
  313|   452k|        }
  314|  14.1k|
  315|  14.1k|        m_FPSR.SetStatus(false);
  316|  14.1k|    }
  317|       |
  318|       |    void Processor::ClearMemory()
  319|  14.1k|    {
  320|  14.1k|        m_MemoryBlock.Clear();
  321|  14.1k|    }
  322|       |
  323|       |    void Processor::Raise(Exception exception)
  324|    110|    {
  325|    110|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  326|    110|
  327|    110|        m_LastRaisedException = exception;
  328|    110|
  329|    110|        switch (exception)
  330|    110|        {
  331|      0|            case Exception::None:
  332|      0|                PHI_ASSERT_NOT_REACHED();
  333|      0|                return;
  334|     68|            case Exception::DivideByZero:
  335|     68|                m_Halted = true;
  336|     68|                PHI_LOG_ERROR("Division through zero");
  337|     68|                return;
  338|      0|            case Exception::Overflow:
  339|      0|                PHI_LOG_WARN("Overflow");
  340|      0|                return;
  341|      1|            case Exception::Underflow:
  342|      1|                PHI_LOG_WARN("Underflow");
  343|      1|                return;
  344|      1|            case Exception::Trap:
  345|      1|                m_Halted = true;
  346|      1|                PHI_LOG_ERROR("Trapped");
  347|      1|                return;
  348|      1|            case Exception::Halt:
  349|      1|                m_Halted = true;
  350|      1|                return;
  351|     23|            case Exception::UnknownLabel:
  352|     23|                m_Halted = true;
  353|     23|                PHI_LOG_ERROR("Unknown label");
  354|     23|                return;
  355|      8|            case Exception::BadShift:
  356|      8|                PHI_LOG_ERROR("Bad shift");
  357|      8|                return;
  358|      8|            case Exception::AddressOutOfBounds:
  359|      8|                PHI_LOG_ERROR("Address out of bounds");
  360|      8|                m_Halted = true;
  361|      8|                return;
  362|      0|            case Exception::RegisterOutOfBounds:
  363|      0|                PHI_LOG_ERROR("Register out of bounds");
  364|      0|                m_Halted = true;
  365|      0|                return;
  366|      0|        }
  367|      0|
  368|      0|        PHI_ASSERT_NOT_REACHED();
  369|      0|    }
  370|       |
  371|       |    Exception Processor::GetLastRaisedException() const noexcept
  372|      0|    {
  373|      0|        return m_LastRaisedException;
  374|      0|    }
  375|       |
  376|       |    [[nodiscard]] phi::Boolean Processor::IsHalted() const noexcept
  377|      0|    {
  378|      0|        return m_Halted;
  379|      0|    }
  380|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/RegisterNames.cpp:
    1|       |#include "DLX/RegisterNames.hpp"
    2|       |
    3|       |#include "DLX/Containers/LookUpMap.hpp"
    4|       |#include <algorithm>
    5|       |#include <cctype>
    6|       |#include <string_view>
    7|       |
    8|       |namespace dlx
    9|       |{
   10|       |    static constexpr std::array<std::pair<std::string_view, IntRegisterID>, 32> IntRegisterValues{
   11|       |            {{"R0", IntRegisterID::R0},   {"R1", IntRegisterID::R1},   {"R2", IntRegisterID::R2},
   12|       |             {"R3", IntRegisterID::R3},   {"R4", IntRegisterID::R4},   {"R5", IntRegisterID::R5},
   13|       |             {"R6", IntRegisterID::R6},   {"R7", IntRegisterID::R7},   {"R8", IntRegisterID::R8},
   14|       |             {"R9", IntRegisterID::R9},   {"R10", IntRegisterID::R10}, {"R11", IntRegisterID::R11},
   15|       |             {"R12", IntRegisterID::R12}, {"R13", IntRegisterID::R13}, {"R14", IntRegisterID::R14},
   16|       |             {"R15", IntRegisterID::R15}, {"R16", IntRegisterID::R16}, {"R17", IntRegisterID::R17},
   17|       |             {"R18", IntRegisterID::R18}, {"R19", IntRegisterID::R19}, {"R20", IntRegisterID::R20},
   18|       |             {"R21", IntRegisterID::R21}, {"R22", IntRegisterID::R22}, {"R23", IntRegisterID::R23},
   19|       |             {"R24", IntRegisterID::R24}, {"R25", IntRegisterID::R25}, {"R26", IntRegisterID::R26},
   20|       |             {"R27", IntRegisterID::R27}, {"R28", IntRegisterID::R28}, {"R29", IntRegisterID::R29},
   21|       |             {"R30", IntRegisterID::R30}, {"R31", IntRegisterID::R31}}};
   22|       |
   23|       |    static constexpr std::array<std::pair<std::string_view, FloatRegisterID>, 32>
   24|       |            FloatRegisterValues{{{"F0", FloatRegisterID::F0},   {"F1", FloatRegisterID::F1},
   25|       |                                 {"F2", FloatRegisterID::F2},   {"F3", FloatRegisterID::F3},
   26|       |                                 {"F4", FloatRegisterID::F4},   {"F5", FloatRegisterID::F5},
   27|       |                                 {"F6", FloatRegisterID::F6},   {"F7", FloatRegisterID::F7},
   28|       |                                 {"F8", FloatRegisterID::F8},   {"F9", FloatRegisterID::F9},
   29|       |                                 {"F10", FloatRegisterID::F10}, {"F11", FloatRegisterID::F11},
   30|       |                                 {"F12", FloatRegisterID::F12}, {"F13", FloatRegisterID::F13},
   31|       |                                 {"F14", FloatRegisterID::F14}, {"F15", FloatRegisterID::F15},
   32|       |                                 {"F16", FloatRegisterID::F16}, {"F17", FloatRegisterID::F17},
   33|       |                                 {"F18", FloatRegisterID::F18}, {"F19", FloatRegisterID::F19},
   34|       |                                 {"F20", FloatRegisterID::F20}, {"F21", FloatRegisterID::F21},
   35|       |                                 {"F22", FloatRegisterID::F22}, {"F23", FloatRegisterID::F23},
   36|       |                                 {"F24", FloatRegisterID::F24}, {"F25", FloatRegisterID::F25},
   37|       |                                 {"F26", FloatRegisterID::F26}, {"F27", FloatRegisterID::F27},
   38|       |                                 {"F28", FloatRegisterID::F28}, {"F29", FloatRegisterID::F29},
   39|       |                                 {"F30", FloatRegisterID::F30}, {"F31", FloatRegisterID::F31}}};
   40|       |
   41|       |    IntRegisterID StringToIntRegister(std::string_view token)
   42|  1.14M|    {
   43|  1.14M|        static constexpr auto map =
   44|  1.14M|                LookUpMap<std::string_view, IntRegisterID, IntRegisterValues.size()>(
   45|  1.14M|                        IntRegisterValues, IntRegisterID::None);
   46|  1.14M|
   47|  1.14M|        return map.at(token);
   48|  1.14M|    }
   49|       |
   50|       |    FloatRegisterID StringToFloatRegister(std::string_view token)
   51|   976k|    {
   52|   976k|        static constexpr auto map =
   53|   976k|                LookUpMap<std::string_view, FloatRegisterID, FloatRegisterValues.size()>(
   54|   976k|                        FloatRegisterValues, FloatRegisterID::None);
   55|   976k|
   56|   976k|        return map.at(token);
   57|   976k|    }
   58|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionLibrary.cpp:
    1|       |#include "DLX/InstructionLibrary.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/InstructionImplementation.hpp"
    5|       |#include "DLX/InstructionInfo.hpp"
    6|       |#include <magic_enum.hpp>
    7|       |
    8|       |namespace dlx
    9|       |{
   10|       |    InstructionLibrary::InstructionLibrary()
   11|       |        : m_Instructions()
   12|  14.1k|    {
   13|  14.1k|        PHI_ASSERT(Initialize());
   14|  14.1k|    }
   15|       |
   16|       |    phi::Boolean InstructionLibrary::Initialize()
   17|  14.1k|    {
   18|  14.1k|        /* Arithmetic */
   19|  14.1k|
   20|  14.1k|        // Addition
   21|  14.1k|        InitInstruction(OpCode::ADD, ArgumentType::IntRegister, ArgumentType::IntRegister,
   22|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::ADD);
   23|  14.1k|        InitInstruction(OpCode::ADDI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   24|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::ADDI);
   25|  14.1k|        InitInstruction(OpCode::ADDU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   26|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::ADDU);
   27|  14.1k|        InitInstruction(OpCode::ADDUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   28|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::ADDUI);
   29|  14.1k|        InitInstruction(OpCode::ADDF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   30|  14.1k|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::ADDF);
   31|  14.1k|        InitInstruction(OpCode::ADDD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   32|  14.1k|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::ADDD);
   33|  14.1k|
   34|  14.1k|        // Subtraction
   35|  14.1k|        InitInstruction(OpCode::SUB, ArgumentType::IntRegister, ArgumentType::IntRegister,
   36|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SUB);
   37|  14.1k|        InitInstruction(OpCode::SUBI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   38|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SUBI);
   39|  14.1k|        InitInstruction(OpCode::SUBU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   40|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SUBU);
   41|  14.1k|        InitInstruction(OpCode::SUBUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   42|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SUBUI);
   43|  14.1k|        InitInstruction(OpCode::SUBF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   44|  14.1k|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::SUBF);
   45|  14.1k|        InitInstruction(OpCode::SUBD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   46|  14.1k|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::SUBD);
   47|  14.1k|
   48|  14.1k|        // Multiplikation
   49|  14.1k|        InitInstruction(OpCode::MULT, ArgumentType::IntRegister, ArgumentType::IntRegister,
   50|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::MULT);
   51|  14.1k|        InitInstruction(OpCode::MULTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   52|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::MULTI);
   53|  14.1k|        InitInstruction(OpCode::MULTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   54|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::MULTU);
   55|  14.1k|        InitInstruction(OpCode::MULTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   56|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::MULTUI);
   57|  14.1k|        InitInstruction(OpCode::MULTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   58|  14.1k|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::MULTF);
   59|  14.1k|        InitInstruction(OpCode::MULTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   60|  14.1k|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::MULTD);
   61|  14.1k|
   62|  14.1k|        // Division
   63|  14.1k|        InitInstruction(OpCode::DIV, ArgumentType::IntRegister, ArgumentType::IntRegister,
   64|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::DIV);
   65|  14.1k|        InitInstruction(OpCode::DIVI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   66|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::DIVI);
   67|  14.1k|        InitInstruction(OpCode::DIVU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   68|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::DIVU);
   69|  14.1k|        InitInstruction(OpCode::DIVUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   70|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::DIVUI);
   71|  14.1k|        InitInstruction(OpCode::DIVF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   72|  14.1k|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::DIVF);
   73|  14.1k|        InitInstruction(OpCode::DIVD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   74|  14.1k|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::DIVD);
   75|  14.1k|
   76|  14.1k|        // Shift left logical
   77|  14.1k|        InitInstruction(OpCode::SLL, ArgumentType::IntRegister, ArgumentType::IntRegister,
   78|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SLL);
   79|  14.1k|        InitInstruction(OpCode::SLLI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   80|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SLLI);
   81|  14.1k|
   82|  14.1k|        // Shift right logical
   83|  14.1k|        InitInstruction(OpCode::SRL, ArgumentType::IntRegister, ArgumentType::IntRegister,
   84|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SRL);
   85|  14.1k|        InitInstruction(OpCode::SRLI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   86|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SRLI);
   87|  14.1k|
   88|  14.1k|        // Shift left arithmetic
   89|  14.1k|        InitInstruction(OpCode::SLA, ArgumentType::IntRegister, ArgumentType::IntRegister,
   90|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SLA);
   91|  14.1k|        InitInstruction(OpCode::SLAI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   92|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SLAI);
   93|  14.1k|
   94|  14.1k|        // Shift right arithmetic
   95|  14.1k|        InitInstruction(OpCode::SRA, ArgumentType::IntRegister, ArgumentType::IntRegister,
   96|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SRA);
   97|  14.1k|        InitInstruction(OpCode::SRAI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   98|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SRAI);
   99|  14.1k|
  100|  14.1k|        /* Logical */
  101|  14.1k|
  102|  14.1k|        // And
  103|  14.1k|        InitInstruction(OpCode::AND, ArgumentType::IntRegister, ArgumentType::IntRegister,
  104|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::AND);
  105|  14.1k|        InitInstruction(OpCode::ANDI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  106|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::ANDI);
  107|  14.1k|
  108|  14.1k|        // Or
  109|  14.1k|        InitInstruction(OpCode::OR, ArgumentType::IntRegister, ArgumentType::IntRegister,
  110|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::OR);
  111|  14.1k|        InitInstruction(OpCode::ORI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  112|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::ORI);
  113|  14.1k|
  114|  14.1k|        // Xor
  115|  14.1k|        InitInstruction(OpCode::XOR, ArgumentType::IntRegister, ArgumentType::IntRegister,
  116|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::XOR);
  117|  14.1k|        InitInstruction(OpCode::XORI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  118|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::XORI);
  119|  14.1k|
  120|  14.1k|        /* Conditionals */
  121|  14.1k|
  122|  14.1k|        // Set less than
  123|  14.1k|        InitInstruction(OpCode::SLT, ArgumentType::IntRegister, ArgumentType::IntRegister,
  124|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SLT);
  125|  14.1k|        InitInstruction(OpCode::SLTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  126|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SLTI);
  127|  14.1k|        InitInstruction(OpCode::SLTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  128|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SLTU);
  129|  14.1k|        InitInstruction(OpCode::SLTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  130|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SLTUI);
  131|  14.1k|        InitInstruction(OpCode::LTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  132|  14.1k|                        ArgumentType::None, RegisterAccessType::Float, impl::LTF);
  133|  14.1k|        InitInstruction(OpCode::LTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  134|  14.1k|                        ArgumentType::None, RegisterAccessType::Double, impl::LTD);
  135|  14.1k|
  136|  14.1k|        // Set greater than
  137|  14.1k|        InitInstruction(OpCode::SGT, ArgumentType::IntRegister, ArgumentType::IntRegister,
  138|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SGT);
  139|  14.1k|        InitInstruction(OpCode::SGTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  140|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SGTI);
  141|  14.1k|        InitInstruction(OpCode::SGTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  142|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SGTU);
  143|  14.1k|        InitInstruction(OpCode::SGTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  144|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SGTUI);
  145|  14.1k|        InitInstruction(OpCode::GTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  146|  14.1k|                        ArgumentType::None, RegisterAccessType::Float, impl::GTF);
  147|  14.1k|        InitInstruction(OpCode::GTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  148|  14.1k|                        ArgumentType::None, RegisterAccessType::Double, impl::GTD);
  149|  14.1k|
  150|  14.1k|        // Set less than or equal
  151|  14.1k|        InitInstruction(OpCode::SLE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  152|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SLE);
  153|  14.1k|        InitInstruction(OpCode::SLEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  154|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SLEI);
  155|  14.1k|        InitInstruction(OpCode::SLEU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  156|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SLEU);
  157|  14.1k|        InitInstruction(OpCode::SLEUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  158|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SLEUI);
  159|  14.1k|        InitInstruction(OpCode::LEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  160|  14.1k|                        ArgumentType::None, RegisterAccessType::Float, impl::LEF);
  161|  14.1k|        InitInstruction(OpCode::LED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  162|  14.1k|                        ArgumentType::None, RegisterAccessType::Double, impl::LED);
  163|  14.1k|
  164|  14.1k|        // Set greater than or equal
  165|  14.1k|        InitInstruction(OpCode::SGE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  166|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SGE);
  167|  14.1k|        InitInstruction(OpCode::SGEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  168|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SGEI);
  169|  14.1k|        InitInstruction(OpCode::SGEU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  170|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SGEU);
  171|  14.1k|        InitInstruction(OpCode::SGEUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  172|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SGEUI);
  173|  14.1k|        InitInstruction(OpCode::GEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  174|  14.1k|                        ArgumentType::None, RegisterAccessType::Float, impl::GEF);
  175|  14.1k|        InitInstruction(OpCode::GED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  176|  14.1k|                        ArgumentType::None, RegisterAccessType::Double, impl::GED);
  177|  14.1k|
  178|  14.1k|        // Set equal
  179|  14.1k|        InitInstruction(OpCode::SEQ, ArgumentType::IntRegister, ArgumentType::IntRegister,
  180|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SEQ);
  181|  14.1k|        InitInstruction(OpCode::SEQI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  182|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SEQI);
  183|  14.1k|        InitInstruction(OpCode::SEQU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  184|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SEQU);
  185|  14.1k|        InitInstruction(OpCode::SEQUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  186|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SEQUI);
  187|  14.1k|        InitInstruction(OpCode::EQF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  188|  14.1k|                        ArgumentType::None, RegisterAccessType::Float, impl::EQF);
  189|  14.1k|        InitInstruction(OpCode::EQD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  190|  14.1k|                        ArgumentType::None, RegisterAccessType::Double, impl::EQD);
  191|  14.1k|
  192|  14.1k|        // Set not equal
  193|  14.1k|        InitInstruction(OpCode::SNE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  194|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SNE);
  195|  14.1k|        InitInstruction(OpCode::SNEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  196|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SNEI);
  197|  14.1k|        InitInstruction(OpCode::SNEU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  198|  14.1k|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SNEU);
  199|  14.1k|        InitInstruction(OpCode::SNEUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  200|  14.1k|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SNEUI);
  201|  14.1k|        InitInstruction(OpCode::NEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  202|  14.1k|                        ArgumentType::None, RegisterAccessType::Float, impl::NEF);
  203|  14.1k|        InitInstruction(OpCode::NED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  204|  14.1k|                        ArgumentType::None, RegisterAccessType::Double, impl::NED);
  205|  14.1k|
  206|  14.1k|        /* Conditional branching */
  207|  14.1k|
  208|  14.1k|        // Branch equal zero
  209|  14.1k|        InitInstruction(OpCode::BEQZ, ArgumentType::IntRegister, ArgumentType::Label,
  210|  14.1k|                        ArgumentType::None, RegisterAccessType::Ignored, impl::BEQZ);
  211|  14.1k|
  212|  14.1k|        // Branch not equal zero
  213|  14.1k|        InitInstruction(OpCode::BNEZ, ArgumentType::IntRegister, ArgumentType::Label,
  214|  14.1k|                        ArgumentType::None, RegisterAccessType::Ignored, impl::BNEZ);
  215|  14.1k|
  216|  14.1k|        // Branch floating point true
  217|  14.1k|        InitInstruction(OpCode::BFPT, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  218|  14.1k|                        RegisterAccessType::Ignored, impl::BFPT);
  219|  14.1k|
  220|  14.1k|        // Branch floating point false
  221|  14.1k|        InitInstruction(OpCode::BFPF, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  222|  14.1k|                        RegisterAccessType::Ignored, impl::BFPF);
  223|  14.1k|
  224|  14.1k|        /* Unconditional branching */
  225|  14.1k|
  226|  14.1k|        // Jump
  227|  14.1k|        InitInstruction(OpCode::J, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  228|  14.1k|                        RegisterAccessType::None, impl::J);
  229|  14.1k|
  230|  14.1k|        // Jump to register
  231|  14.1k|        InitInstruction(OpCode::JR, ArgumentType::IntRegister, ArgumentType::None,
  232|  14.1k|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::JR);
  233|  14.1k|
  234|  14.1k|        // Jump and link
  235|  14.1k|        InitInstruction(OpCode::JAL, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  236|  14.1k|                        RegisterAccessType::Unsigned, impl::JAL);
  237|  14.1k|
  238|  14.1k|        // Jump and link to register
  239|  14.1k|        InitInstruction(OpCode::JALR, ArgumentType::IntRegister, ArgumentType::None,
  240|  14.1k|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::JALR);
  241|  14.1k|
  242|  14.1k|        /* Loading data */
  243|  14.1k|
  244|  14.1k|        // Load high immediate
  245|  14.1k|        InitInstruction(OpCode::LHI, ArgumentType::IntRegister, ArgumentType::ImmediateInteger,
  246|  14.1k|                        ArgumentType::None, RegisterAccessType::Signed, impl::LHI);
  247|  14.1k|
  248|  14.1k|        // Load byte
  249|  14.1k|        InitInstruction(OpCode::LB, ArgumentType::IntRegister,
  250|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  251|  14.1k|                        ArgumentType::None, RegisterAccessType::Signed, impl::LB);
  252|  14.1k|
  253|  14.1k|        // Load byte unsigned
  254|  14.1k|        InitInstruction(OpCode::LBU, ArgumentType::IntRegister,
  255|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  256|  14.1k|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LBU);
  257|  14.1k|
  258|  14.1k|        // Load half word
  259|  14.1k|        InitInstruction(OpCode::LH, ArgumentType::IntRegister,
  260|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  261|  14.1k|                        ArgumentType::None, RegisterAccessType::Signed, impl::LH);
  262|  14.1k|
  263|  14.1k|        // Load half word unsigned
  264|  14.1k|        InitInstruction(OpCode::LHU, ArgumentType::IntRegister,
  265|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  266|  14.1k|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LHU);
  267|  14.1k|
  268|  14.1k|        // Load word
  269|  14.1k|        InitInstruction(OpCode::LW, ArgumentType::IntRegister,
  270|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  271|  14.1k|                        ArgumentType::None, RegisterAccessType::Signed, impl::LW);
  272|  14.1k|
  273|  14.1k|        // Load word unsigned
  274|  14.1k|        InitInstruction(OpCode::LWU, ArgumentType::IntRegister,
  275|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  276|  14.1k|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LWU);
  277|  14.1k|
  278|  14.1k|        // Load float
  279|  14.1k|        InitInstruction(OpCode::LF, ArgumentType::FloatRegister,
  280|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  281|  14.1k|                        ArgumentType::None, RegisterAccessType::Float, impl::LF);
  282|  14.1k|
  283|  14.1k|        // Load double
  284|  14.1k|        InitInstruction(OpCode::LD, ArgumentType::FloatRegister,
  285|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  286|  14.1k|                        ArgumentType::None, RegisterAccessType::Double, impl::LD);
  287|  14.1k|
  288|  14.1k|        /* Storing data */
  289|  14.1k|
  290|  14.1k|        // Store byte
  291|  14.1k|        InitInstruction(OpCode::SB,
  292|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  293|  14.1k|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  294|  14.1k|                        impl::SB);
  295|  14.1k|
  296|  14.1k|        // Store byte unsigned
  297|  14.1k|        InitInstruction(OpCode::SBU,
  298|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  299|  14.1k|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  300|  14.1k|                        impl::SBU);
  301|  14.1k|
  302|  14.1k|        // Store half word
  303|  14.1k|        InitInstruction(OpCode::SH,
  304|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  305|  14.1k|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  306|  14.1k|                        impl::SH);
  307|  14.1k|
  308|  14.1k|        // Store half word unsigned
  309|  14.1k|        InitInstruction(OpCode::SHU,
  310|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  311|  14.1k|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  312|  14.1k|                        impl::SHU);
  313|  14.1k|
  314|  14.1k|        // Store word
  315|  14.1k|        InitInstruction(OpCode::SW,
  316|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  317|  14.1k|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  318|  14.1k|                        impl::SW);
  319|  14.1k|
  320|  14.1k|        // Store word unsigned
  321|  14.1k|        InitInstruction(OpCode::SWU,
  322|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  323|  14.1k|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  324|  14.1k|                        impl::SWU);
  325|  14.1k|
  326|  14.1k|        // Store float
  327|  14.1k|        InitInstruction(OpCode::SF,
  328|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  329|  14.1k|                        ArgumentType::FloatRegister, ArgumentType::None, RegisterAccessType::Float,
  330|  14.1k|                        impl::SF);
  331|  14.1k|
  332|  14.1k|        // Store double
  333|  14.1k|        InitInstruction(OpCode::SD,
  334|  14.1k|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  335|  14.1k|                        ArgumentType::FloatRegister, ArgumentType::None, RegisterAccessType::Double,
  336|  14.1k|                        impl::SD);
  337|  14.1k|
  338|  14.1k|        /* Moving data */
  339|  14.1k|
  340|  14.1k|        // Move float
  341|  14.1k|        InitInstruction(OpCode::MOVF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  342|  14.1k|                        ArgumentType::None, RegisterAccessType::Float, impl::MOVF);
  343|  14.1k|
  344|  14.1k|        // Move double
  345|  14.1k|        InitInstruction(OpCode::MOVD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  346|  14.1k|                        ArgumentType::None, RegisterAccessType::Double, impl::MOVD);
  347|  14.1k|
  348|  14.1k|        // Move float to int
  349|  14.1k|        InitInstruction(OpCode::MOVFP2I, ArgumentType::IntRegister, ArgumentType::FloatRegister,
  350|  14.1k|                        ArgumentType::None, RegisterAccessType::Float, impl::MOVFP2I);
  351|  14.1k|
  352|  14.1k|        // Move int to float
  353|  14.1k|        InitInstruction(OpCode::MOVI2FP, ArgumentType::FloatRegister, ArgumentType::IntRegister,
  354|  14.1k|                        ArgumentType::None, RegisterAccessType::Float, impl::MOVI2FP);
  355|  14.1k|
  356|  14.1k|        /* Converting data */
  357|  14.1k|
  358|  14.1k|        // Convert float to double
  359|  14.1k|        InitInstruction(OpCode::CVTF2D, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  360|  14.1k|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTF2D);
  361|  14.1k|
  362|  14.1k|        // Convert float to int
  363|  14.1k|        InitInstruction(OpCode::CVTF2I, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  364|  14.1k|                        ArgumentType::None, RegisterAccessType::Float, impl::CVTF2I);
  365|  14.1k|
  366|  14.1k|        // Convert double to float
  367|  14.1k|        InitInstruction(OpCode::CVTD2F, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  368|  14.1k|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTD2F);
  369|  14.1k|
  370|  14.1k|        // Convert double to int
  371|  14.1k|        InitInstruction(OpCode::CVTD2I, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  372|  14.1k|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTD2I);
  373|  14.1k|
  374|  14.1k|        // Convert int to float
  375|  14.1k|        InitInstruction(OpCode::CVTI2F, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  376|  14.1k|                        ArgumentType::None, RegisterAccessType::Float, impl::CVTI2F);
  377|  14.1k|
  378|  14.1k|        // Convert int to double
  379|  14.1k|        InitInstruction(OpCode::CVTI2D, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  380|  14.1k|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTI2D);
  381|  14.1k|
  382|  14.1k|        /* Special */
  383|  14.1k|
  384|  14.1k|        // Trap
  385|  14.1k|        InitInstruction(OpCode::TRAP, ArgumentType::ImmediateInteger, ArgumentType::None,
  386|  14.1k|                        ArgumentType::None, RegisterAccessType::None, impl::TRAP);
  387|  14.1k|
  388|  14.1k|        // Halt
  389|  14.1k|        InitInstruction(OpCode::HALT, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  390|  14.1k|                        RegisterAccessType::None, impl::HALT);
  391|  14.1k|
  392|  14.1k|        // No operation
  393|  14.1k|        InitInstruction(OpCode::NOP, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  394|  14.1k|                        RegisterAccessType::None, impl::NOP);
  395|  14.1k|
  396|  14.1k|        return true;
  397|  14.1k|    }
  398|       |
  399|       |    const InstructionInfo& InstructionLibrary::LookUp(OpCode instruction) const noexcept
  400|  1.65M|    {
  401|  1.65M|        return m_Instructions.at(static_cast<std::size_t>(instruction));
  402|  1.65M|    }
  403|       |
  404|       |    void InstructionLibrary::InitInstruction(OpCode opcode, ArgumentType arg1, ArgumentType arg2,
  405|       |                                             ArgumentType        arg3,
  406|       |                                             RegisterAccessType  register_access_type,
  407|       |                                             InstructionExecutor executor)
  408|  1.58M|    {
  409|  1.58M|        PHI_ASSERT(LookUp(opcode).GetExecutor() == nullptr, "Already registered instruction {}",
  410|  1.58M|                   magic_enum::enum_name(opcode));
  411|  1.58M|
  412|  1.58M|        m_Instructions.at(static_cast<std::size_t>(opcode)) =
  413|  1.58M|                InstructionInfo(opcode, arg1, arg2, arg3, register_access_type, executor);
  414|  1.58M|    }
  415|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/StatusRegister.cpp:
    1|       |#include "DLX/StatusRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void StatusRegister::SetStatus(phi::Boolean value)
    6|  14.1k|    {
    7|  14.1k|        m_Value = value;
    8|  14.1k|    }
    9|       |
   10|       |    phi::Boolean StatusRegister::Get() const
   11|      0|    {
   12|      0|        return m_Value;
   13|      0|    }
   14|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/IntRegister.cpp:
    1|       |#include "DLX/IntRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    IntRegister::IntRegister()
    6|       |        : m_ValueSigned{0}
    7|       |        , m_IsReadOnly{false}
    8|   452k|    {}
    9|       |
   10|       |    void IntRegister::SetSignedValue(phi::i32 val)
   11|   473k|    {
   12|   473k|        m_ValueSigned = val;
   13|   473k|    }
   14|       |
   15|       |    void IntRegister::SetUnsignedValue(phi::u32 val)
   16|  10.0k|    {
   17|  10.0k|        m_ValueUnsigned = val;
   18|  10.0k|    }
   19|       |
   20|       |    phi::i32 IntRegister::GetSignedValue() const
   21|  46.0k|    {
   22|  46.0k|        return m_ValueSigned;
   23|  46.0k|    }
   24|       |
   25|       |    phi::u32 IntRegister::GetUnsignedValue() const
   26|  20.2k|    {
   27|  20.2k|        return m_ValueUnsigned;
   28|  20.2k|    }
   29|       |
   30|       |    phi::Boolean IntRegister::IsReadOnly() const
   31|  35.7k|    {
   32|  35.7k|        return m_IsReadOnly;
   33|  35.7k|    }
   34|       |
   35|       |    void IntRegister::SetReadOnly(phi::Boolean read_only)
   36|  14.1k|    {
   37|  14.1k|        m_IsReadOnly = read_only;
   38|  14.1k|    }
   39|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionInfo.cpp:
    1|       |#include "DLX/InstructionInfo.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void InstructionInfo::Execute(Processor& processor, const InstructionArg& arg1,
    6|       |                                  const InstructionArg& arg2,
    7|       |                                  const InstructionArg& arg3) const noexcept
    8|   130k|    {
    9|   130k|        PHI_ASSERT(m_Executor, "No execution function defined");
   10|   130k|
   11|   130k|        m_Executor(processor, arg1, arg2, arg3);
   12|   130k|    }
   13|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionImplementation.cpp:
    1|       |#include "DLX/InstructionImplementation.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/InstructionInfo.hpp"
    5|       |#include "DLX/Parser.hpp"
    6|       |#include "DLX/Processor.hpp"
    7|       |#include "DLX/RegisterNames.hpp"
    8|       |#include "Phi/Core/Assert.hpp"
    9|       |#include "Phi/Core/Boolean.hpp"
   10|       |#include "Phi/Core/Types.hpp"
   11|       |#include <string_view>
   12|       |
   13|       |namespace dlx
   14|       |{
   15|       |    static std::int32_t clear_top_n_bits(std::int32_t value, std::int32_t n)
   16|     20|    {
   17|     20|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behaviour");
   18|     20|
   19|     20|        return value & ~(-1 << (32 - n));
   20|     20|    }
   21|       |
   22|       |    static void JumpToLabel(Processor& processor, std::string_view label_name)
   23|  80.0k|    {
   24|  80.0k|        // Lookup the label
   25|  80.0k|        const phi::ObserverPtr<ParsedProgram> program = processor.GetCurrentProgramm();
   26|  80.0k|        PHI_ASSERT(program);
   27|  80.0k|
   28|  80.0k|        std::string label(label_name.data(), label_name.size());
   29|  80.0k|        if (program->m_JumpData.find(label) == program->m_JumpData.end())
   30|     23|        {
   31|     23|            PHI_LOG_ERROR("Unable to find jump label {}", label_name);
   32|     23|            processor.Raise(Exception::UnknownLabel);
   33|     23|            return;
   34|     23|        }
   35|  80.0k|
   36|  80.0k|        // Set program counter
   37|  80.0k|        processor.m_NextProgramCounter = program->m_JumpData.at(label);
   38|  80.0k|    }
   39|       |
   40|       |    static void JumpToRegister(Processor& processor, IntRegisterID reg_id)
   41|  20.0k|    {
   42|  20.0k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   43|  20.0k|
   44|  20.0k|        phi::u32 max_address =
   45|  20.0k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   46|  20.0k|        if (address >= max_address)
   47|      0|        {
   48|      0|            processor.Raise(Exception::AddressOutOfBounds);
   49|      0|            return;
   50|      0|        }
   51|  20.0k|
   52|  20.0k|        processor.m_NextProgramCounter = address.get();
   53|  20.0k|    }
   54|       |
   55|       |    static std::optional<phi::i32> CalculateDisplacementAddress(
   56|       |            Processor& processor, const InstructionArg::AddressDisplacement& adr_displacement)
   57|  5.04k|    {
   58|  5.04k|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   59|  5.04k|
   60|  5.04k|        phi::i32 address = adr_displacement.displacement + register_value;
   61|  5.04k|
   62|  5.04k|        if (address < 0)
   63|      0|        {
   64|      0|            processor.Raise(Exception::AddressOutOfBounds);
   65|      0|            return {};
   66|      0|        }
   67|  5.04k|
   68|  5.04k|        return address;
   69|  5.04k|    }
   70|       |
   71|       |    static std::optional<phi::i32> GetLoadStoreAddress(Processor&           processor,
   72|       |                                                       const InstructionArg argument)
   73|  5.06k|    {
   74|  5.06k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
   75|     20|        {
   76|     20|            const auto& imm_value = argument.AsImmediateValue();
   77|     20|
   78|     20|            if (imm_value.signed_value < 0)
   79|      2|            {
   80|      2|                return {};
   81|      2|            }
   82|     18|
   83|     18|            return imm_value.signed_value;
   84|     18|        }
   85|  5.04k|
   86|  5.04k|        if (argument.GetType() == ArgumentType::AddressDisplacement)
   87|  5.04k|        {
   88|  5.04k|            const auto& adr_displacement = argument.AsAddressDisplacement();
   89|  5.04k|            return CalculateDisplacementAddress(processor, adr_displacement);
   90|  5.04k|        }
   91|      0|
   92|      0|        PHI_ASSERT_NOT_REACHED();
   93|      0|    }
   94|       |
   95|       |    static void SafeWriteInteger(Processor& processor, IntRegisterID dest_reg, phi::i64 value)
   96|  5.33k|    {
   97|  5.33k|        constexpr phi::i64 min = phi::i32::limits_type::min();
   98|  5.33k|        constexpr phi::i64 max = phi::i32::limits_type::max();
   99|  5.33k|
  100|  5.33k|        // Check for underflow
  101|  5.33k|        if (value < min)
  102|      0|        {
  103|      0|            processor.Raise(Exception::Underflow);
  104|      0|
  105|      0|            value = max + (value % (min - 1));
  106|      0|        }
  107|  5.33k|        // Check for overflow
  108|  5.33k|        else if (value > max)
  109|      0|        {
  110|      0|            processor.Raise(Exception::Overflow);
  111|      0|
  112|      0|            value = min + (value % (max + 1));
  113|      0|        }
  114|  5.33k|
  115|  5.33k|        PHI_ASSERT(value >= min);
  116|  5.33k|        PHI_ASSERT(value <= max);
  117|  5.33k|
  118|  5.33k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.get()));
  119|  5.33k|    }
  120|       |
  121|       |    static void SafeWriteInteger(Processor& processor, IntRegisterID dest_reg, phi::u64 value)
  122|    179|    {
  123|    179|        constexpr phi::u64 min = phi::u32::limits_type::min();
  124|    179|        constexpr phi::u64 max = phi::u32::limits_type::max();
  125|    179|
  126|    179|        // Check for overflow
  127|    179|        if (value > max)
  128|      0|        {
  129|      0|            processor.Raise(Exception::Overflow);
  130|      0|
  131|      0|            value %= max + 1u;
  132|      0|        }
  133|    179|
  134|    179|        PHI_ASSERT(value <= max);
  135|    179|
  136|    179|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.get()));
  137|    179|    }
  138|       |
  139|       |    static void Addition(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs, phi::i32 rhs)
  140|  5.16k|    {
  141|  5.16k|        phi::i64 res = phi::i64(lhs) + rhs;
  142|  5.16k|
  143|  5.16k|        SafeWriteInteger(processor, dest_reg, res);
  144|  5.16k|    }
  145|       |
  146|       |    static void Addition(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs, phi::u32 rhs)
  147|    116|    {
  148|    116|        phi::u64 res = phi::u64(lhs) + rhs;
  149|    116|
  150|    116|        SafeWriteInteger(processor, dest_reg, res);
  151|    116|    }
  152|       |
  153|       |    static void Subtraction(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  154|       |                            phi::i32 rhs)
  155|    122|    {
  156|    122|        phi::i64 res = phi::i64(lhs) - rhs;
  157|    122|
  158|    122|        SafeWriteInteger(processor, dest_reg, res);
  159|    122|    }
  160|       |
  161|       |    static void Subtraction(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  162|       |                            phi::u32 rhs)
  163|     37|    {
  164|     37|        constexpr phi::u32 max = phi::u32::limits_type::max();
  165|     37|
  166|     37|        if (lhs < rhs)
  167|      1|        {
  168|      1|            processor.Raise(Exception::Underflow);
  169|      1|
  170|      1|            phi::u64 res = max - rhs + lhs + 1u;
  171|      1|            SafeWriteInteger(processor, dest_reg, res);
  172|      1|            return;
  173|      1|        }
  174|     36|
  175|     36|        phi::u64 res = phi::u64(lhs) - rhs;
  176|     36|
  177|     36|        SafeWriteInteger(processor, dest_reg, res);
  178|     36|    }
  179|       |
  180|       |    static void Multiplication(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  181|       |                               phi::i32 rhs)
  182|     48|    {
  183|     48|        phi::i64 res = phi::i64(lhs) * rhs;
  184|     48|
  185|     48|        SafeWriteInteger(processor, dest_reg, res);
  186|     48|    }
  187|       |
  188|       |    static void Multiplication(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  189|       |                               phi::u32 rhs)
  190|     25|    {
  191|     25|        phi::u64 res = phi::u64(lhs) * rhs;
  192|     25|
  193|     25|        SafeWriteInteger(processor, dest_reg, res);
  194|     25|    }
  195|       |
  196|       |    static void Division(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs, phi::i32 rhs)
  197|     67|    {
  198|     67|        if (rhs == 0)
  199|     66|        {
  200|     66|            processor.Raise(Exception::DivideByZero);
  201|     66|            return;
  202|     66|        }
  203|      1|
  204|      1|        phi::i64 res = phi::i64(lhs) / rhs;
  205|      1|
  206|      1|        SafeWriteInteger(processor, dest_reg, res);
  207|      1|    }
  208|       |
  209|       |    static void Division(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs, phi::u32 rhs)
  210|      3|    {
  211|      3|        if (rhs == 0u)
  212|      2|        {
  213|      2|            processor.Raise(Exception::DivideByZero);
  214|      2|            return;
  215|      2|        }
  216|      1|
  217|      1|        phi::u64 res = phi::u64(lhs) / rhs;
  218|      1|
  219|      1|        SafeWriteInteger(processor, dest_reg, res);
  220|      1|    }
  221|       |
  222|       |    static void ShiftRightLogical(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  223|       |                                  phi::i32 shift)
  224|     42|    {
  225|     42|        // Prevent undefined behavior by shifting by more than 31
  226|     42|        if (shift > 31)
  227|      1|        {
  228|      1|            processor.Raise(Exception::BadShift);
  229|      1|
  230|      1|            // Just set register to 0
  231|      1|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  232|      1|            return;
  233|      1|        }
  234|     41|
  235|     41|        // Do nothing when shifting by zero to prevent undefined behavior
  236|     41|        if (shift == 0)
  237|     20|        {
  238|     20|            return;
  239|     20|        }
  240|     21|
  241|     21|        // Negative shifts are undefiend behaviour
  242|     21|        if (shift < 0)
  243|      1|        {
  244|      1|            processor.Raise(Exception::BadShift);
  245|      1|            return;
  246|      1|        }
  247|     20|
  248|     20|        phi::i32 new_value = base.get() >> shift.get();
  249|     20|
  250|     20|        new_value = clear_top_n_bits(new_value.get(), shift.get());
  251|     20|
  252|     20|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  253|     20|    }
  254|       |
  255|       |    static void ShiftRightArithmetic(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  256|       |                                     phi::i32 shift)
  257|      6|    {
  258|      6|        // Prevent undefined behavior by shifting by more than 31
  259|      6|        if (shift > 31)
  260|      1|        {
  261|      1|            processor.Raise(Exception::BadShift);
  262|      1|
  263|      1|            // Is negative ie. sign bit is set
  264|      1|            if (base < 0)
  265|      0|            {
  266|      0|                // Set every byte to 1
  267|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  268|      0|            }
  269|      1|            else
  270|      1|            {
  271|      1|                // Set every byte to 0
  272|      1|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  273|      1|            }
  274|      1|            return;
  275|      1|        }
  276|      5|
  277|      5|        // Negative shifts are undefined behaviour
  278|      5|        if (shift < 0)
  279|      1|        {
  280|      1|            processor.Raise(Exception::BadShift);
  281|      1|            return;
  282|      1|        }
  283|      4|
  284|      4|        phi::i32 new_value = base.get() >> shift.get();
  285|      4|
  286|      4|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  287|      4|    }
  288|       |
  289|       |    // Behavior is the same for logical and arithmetic shifts
  290|       |    static void ShiftLeft(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  291|       |                          phi::i32 shift)
  292|     47|    {
  293|     47|        if (shift > 31)
  294|      2|        {
  295|      2|            processor.Raise(Exception::BadShift);
  296|      2|
  297|      2|            // Just set register to 0
  298|      2|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  299|      2|            return;
  300|      2|        }
  301|     45|
  302|     45|        // Negative shifts are undefined behaviour
  303|     45|        if (shift < 0)
  304|      2|        {
  305|      2|            processor.Raise(Exception::BadShift);
  306|      2|            return;
  307|      2|        }
  308|     43|
  309|     43|        phi::i32 new_value = base.get() << shift.get();
  310|     43|
  311|     43|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  312|     43|    }
  313|       |
  314|       |    namespace impl
  315|       |    {
  316|       |        void ADD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  317|       |                 const InstructionArg& arg3)
  318|  5.09k|        {
  319|  5.09k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  320|  5.09k|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  321|  5.09k|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  322|  5.09k|
  323|  5.09k|            const auto& dest_reg = arg1.AsRegisterInt();
  324|  5.09k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  325|  5.09k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  326|  5.09k|
  327|  5.09k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  328|  5.09k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  329|  5.09k|
  330|  5.09k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  331|  5.09k|        }
  332|       |
  333|       |        void ADDI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  334|       |                  const InstructionArg& arg3)
  335|     71|        {
  336|     71|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  337|     71|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  338|     71|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  339|     71|
  340|     71|            const auto& dest_reg  = arg1.AsRegisterInt();
  341|     71|            const auto& src_reg   = arg2.AsRegisterInt();
  342|     71|            const auto& imm_value = arg3.AsImmediateValue();
  343|     71|
  344|     71|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  345|     71|
  346|     71|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  347|     71|        }
  348|       |
  349|       |        void ADDU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  350|       |                  const InstructionArg& arg3)
  351|     56|        {
  352|     56|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  353|     56|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  354|     56|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  355|     56|
  356|     56|            const auto& dest_reg = arg1.AsRegisterInt();
  357|     56|            const auto& lhs_reg  = arg2.AsRegisterInt();
  358|     56|            const auto& rhs_reg  = arg3.AsRegisterInt();
  359|     56|
  360|     56|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  361|     56|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  362|     56|
  363|     56|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  364|     56|        }
  365|       |
  366|       |        void ADDUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  367|       |                   const InstructionArg& arg3)
  368|     60|        {
  369|     60|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  370|     60|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  371|     60|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  372|     60|
  373|     60|            const auto& dest_reg  = arg1.AsRegisterInt();
  374|     60|            const auto& src_reg   = arg2.AsRegisterInt();
  375|     60|            const auto& imm_value = arg3.AsImmediateValue();
  376|     60|
  377|     60|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  378|     60|
  379|     60|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  380|     60|        }
  381|       |
  382|       |        void ADDF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  383|       |                  const InstructionArg& arg3)
  384|      0|        {
  385|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  386|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  387|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  388|      0|
  389|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  390|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  391|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  392|      0|
  393|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  394|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  395|      0|
  396|      0|            const phi::f32 new_value = lhs_value + rhs_value;
  397|      0|
  398|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  399|      0|        }
  400|       |
  401|       |        void ADDD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  402|       |                  const InstructionArg& arg3)
  403|      0|        {
  404|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  405|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  406|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  407|      0|
  408|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  409|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  410|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  411|      0|
  412|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  413|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  414|      0|
  415|      0|            const phi::f64 new_value = lhs_value + rhs_value;
  416|      0|
  417|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  418|      0|        }
  419|       |
  420|       |        void SUB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  421|       |                 const InstructionArg& arg3)
  422|     65|        {
  423|     65|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  424|     65|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  425|     65|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  426|     65|
  427|     65|            const auto& dest_reg = arg1.AsRegisterInt();
  428|     65|            const auto& lhs_reg  = arg2.AsRegisterInt();
  429|     65|            const auto& rhs_reg  = arg3.AsRegisterInt();
  430|     65|
  431|     65|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  432|     65|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  433|     65|
  434|     65|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  435|     65|        }
  436|       |
  437|       |        void SUBI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  438|       |                  const InstructionArg& arg3)
  439|     57|        {
  440|     57|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  441|     57|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  442|     57|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  443|     57|
  444|     57|            const auto& dest_reg  = arg1.AsRegisterInt();
  445|     57|            const auto& src_reg   = arg2.AsRegisterInt();
  446|     57|            const auto& imm_value = arg3.AsImmediateValue();
  447|     57|
  448|     57|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  449|     57|
  450|     57|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  451|     57|        }
  452|       |
  453|       |        void SUBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  454|       |                  const InstructionArg& arg3)
  455|     24|        {
  456|     24|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  457|     24|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  458|     24|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  459|     24|
  460|     24|            const auto& dest_reg = arg1.AsRegisterInt();
  461|     24|            const auto& lhs_reg  = arg2.AsRegisterInt();
  462|     24|            const auto& rhs_reg  = arg3.AsRegisterInt();
  463|     24|
  464|     24|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  465|     24|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  466|     24|
  467|     24|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  468|     24|        }
  469|       |
  470|       |        void SUBUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  471|       |                   const InstructionArg& arg3)
  472|     13|        {
  473|     13|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  474|     13|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  475|     13|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  476|     13|
  477|     13|            const auto& dest_reg  = arg1.AsRegisterInt();
  478|     13|            const auto& src_reg   = arg2.AsRegisterInt();
  479|     13|            const auto& imm_value = arg3.AsImmediateValue();
  480|     13|
  481|     13|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  482|     13|
  483|     13|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  484|     13|        }
  485|       |
  486|       |        void SUBF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  487|       |                  const InstructionArg& arg3)
  488|      0|        {
  489|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  490|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  491|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  492|      0|
  493|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  494|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  495|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  496|      0|
  497|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  498|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  499|      0|
  500|      0|            const phi::f32 new_value = lhs_value - rhs_value;
  501|      0|
  502|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  503|      0|        }
  504|       |
  505|       |        void SUBD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  506|       |                  const InstructionArg& arg3)
  507|      0|        {
  508|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  509|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  510|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  511|      0|
  512|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  513|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  514|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  515|      0|
  516|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  517|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  518|      0|
  519|      0|            const phi::f64 new_value = lhs_value - rhs_value;
  520|      0|
  521|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  522|      0|        }
  523|       |
  524|       |        void MULT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  525|       |                  const InstructionArg& arg3)
  526|     24|        {
  527|     24|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  528|     24|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  529|     24|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  530|     24|
  531|     24|            const auto& dest_reg = arg1.AsRegisterInt();
  532|     24|            const auto& lhs_reg  = arg2.AsRegisterInt();
  533|     24|            const auto& rhs_reg  = arg3.AsRegisterInt();
  534|     24|
  535|     24|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  536|     24|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  537|     24|
  538|     24|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  539|     24|        }
  540|       |
  541|       |        void MULTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  542|       |                   const InstructionArg& arg3)
  543|     24|        {
  544|     24|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  545|     24|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  546|     24|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  547|     24|
  548|     24|            const auto& dest_reg  = arg1.AsRegisterInt();
  549|     24|            const auto& src_reg   = arg2.AsRegisterInt();
  550|     24|            const auto& imm_value = arg3.AsImmediateValue();
  551|     24|
  552|     24|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  553|     24|
  554|     24|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  555|     24|        }
  556|       |
  557|       |        void MULTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  558|       |                   const InstructionArg& arg3)
  559|     24|        {
  560|     24|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  561|     24|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  562|     24|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  563|     24|
  564|     24|            const auto& dest_reg = arg1.AsRegisterInt();
  565|     24|            const auto& lhs_reg  = arg2.AsRegisterInt();
  566|     24|            const auto& rhs_reg  = arg3.AsRegisterInt();
  567|     24|
  568|     24|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  569|     24|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  570|     24|
  571|     24|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  572|     24|        }
  573|       |
  574|       |        void MULTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  575|       |                    const InstructionArg& arg3)
  576|      1|        {
  577|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  578|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  579|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  580|      1|
  581|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  582|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  583|      1|            const auto& imm_value = arg3.AsImmediateValue();
  584|      1|
  585|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  586|      1|
  587|      1|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  588|      1|        }
  589|       |
  590|       |        void MULTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  591|       |                   const InstructionArg& arg3)
  592|      0|        {
  593|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  594|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  595|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  596|      0|
  597|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  598|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  599|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  600|      0|
  601|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  602|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  603|      0|
  604|      0|            const phi::f32 new_value = lhs_value * rhs_value;
  605|      0|
  606|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  607|      0|        }
  608|       |
  609|       |        void MULTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  610|       |                   const InstructionArg& arg3)
  611|      0|        {
  612|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  613|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  614|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  615|      0|
  616|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  617|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  618|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  619|      0|
  620|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  621|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  622|      0|
  623|      0|            const phi::f64 new_value = lhs_value * rhs_value;
  624|      0|
  625|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  626|      0|        }
  627|       |
  628|       |        void DIV(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  629|       |                 const InstructionArg& arg3)
  630|     65|        {
  631|     65|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  632|     65|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  633|     65|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  634|     65|
  635|     65|            const auto& dest_reg = arg1.AsRegisterInt();
  636|     65|            const auto& lhs_reg  = arg2.AsRegisterInt();
  637|     65|            const auto& rhs_reg  = arg3.AsRegisterInt();
  638|     65|
  639|     65|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  640|     65|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  641|     65|
  642|     65|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  643|     65|        }
  644|       |
  645|       |        void DIVI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  646|       |                  const InstructionArg& arg3)
  647|      2|        {
  648|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  649|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  650|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  651|      2|
  652|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  653|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  654|      2|            const auto& imm_value = arg3.AsImmediateValue();
  655|      2|
  656|      2|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  657|      2|
  658|      2|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  659|      2|        }
  660|       |
  661|       |        void DIVU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  662|       |                  const InstructionArg& arg3)
  663|      1|        {
  664|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  665|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  666|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  667|      1|
  668|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  669|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  670|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  671|      1|
  672|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  673|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  674|      1|
  675|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  676|      1|        }
  677|       |
  678|       |        void DIVUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  679|       |                   const InstructionArg& arg3)
  680|      2|        {
  681|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  682|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  683|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  684|      2|
  685|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  686|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  687|      2|            const auto& imm_value = arg3.AsImmediateValue();
  688|      2|
  689|      2|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  690|      2|
  691|      2|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  692|      2|        }
  693|       |
  694|       |        void DIVF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  695|       |                  const InstructionArg& arg3)
  696|      0|        {
  697|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  698|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  699|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  700|      0|
  701|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  702|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  703|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  704|      0|
  705|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  706|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  707|      0|
  708|      0|            if (rhs_value.get() == 0.0f)
  709|      0|            {
  710|      0|                processor.Raise(Exception::DivideByZero);
  711|      0|                return;
  712|      0|            }
  713|      0|
  714|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  715|      0|
  716|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  717|      0|        }
  718|       |
  719|       |        void DIVD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  720|       |                  const InstructionArg& arg3)
  721|      0|        {
  722|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  723|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  724|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  725|      0|
  726|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  727|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  728|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  729|      0|
  730|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  731|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  732|      0|
  733|      0|            if (rhs_value.get() == 0.0)
  734|      0|            {
  735|      0|                processor.Raise(Exception::DivideByZero);
  736|      0|                return;
  737|      0|            }
  738|      0|
  739|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  740|      0|
  741|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  742|      0|        }
  743|       |
  744|       |        void SLL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  745|       |                 const InstructionArg& arg3)
  746|      1|        {
  747|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  748|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  749|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  750|      1|
  751|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  752|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  753|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  754|      1|
  755|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  756|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  757|      1|
  758|      1|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  759|      1|        }
  760|       |
  761|       |        void SLLI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  762|       |                  const InstructionArg& arg3)
  763|     22|        {
  764|     22|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  765|     22|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  766|     22|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  767|     22|
  768|     22|            const auto& dest_reg  = arg1.AsRegisterInt();
  769|     22|            const auto& src_reg   = arg2.AsRegisterInt();
  770|     22|            const auto& imm_value = arg3.AsImmediateValue();
  771|     22|
  772|     22|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  773|     22|            phi::i32 shift_value = imm_value.signed_value;
  774|     22|
  775|     22|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  776|     22|        }
  777|       |
  778|       |        void SRL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  779|       |                 const InstructionArg& arg3)
  780|     20|        {
  781|     20|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  782|     20|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  783|     20|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  784|     20|
  785|     20|            const auto& dest_reg = arg1.AsRegisterInt();
  786|     20|            const auto& lhs_reg  = arg2.AsRegisterInt();
  787|     20|            const auto& rhs_reg  = arg3.AsRegisterInt();
  788|     20|
  789|     20|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  790|     20|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  791|     20|
  792|     20|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  793|     20|        }
  794|       |
  795|       |        void SRLI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  796|       |                  const InstructionArg& arg3)
  797|     22|        {
  798|     22|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  799|     22|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  800|     22|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  801|     22|
  802|     22|            const auto& dest_reg  = arg1.AsRegisterInt();
  803|     22|            const auto& src_reg   = arg2.AsRegisterInt();
  804|     22|            const auto& imm_value = arg3.AsImmediateValue();
  805|     22|
  806|     22|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  807|     22|            phi::i32 shift_value = imm_value.signed_value;
  808|     22|
  809|     22|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  810|     22|        }
  811|       |
  812|       |        void SLA(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  813|       |                 const InstructionArg& arg3)
  814|     20|        {
  815|     20|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  816|     20|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  817|     20|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  818|     20|
  819|     20|            const auto& dest_reg = arg1.AsRegisterInt();
  820|     20|            const auto& lhs_reg  = arg2.AsRegisterInt();
  821|     20|            const auto& rhs_reg  = arg3.AsRegisterInt();
  822|     20|
  823|     20|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  824|     20|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  825|     20|
  826|     20|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  827|     20|        }
  828|       |
  829|       |        void SLAI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  830|       |                  const InstructionArg& arg3)
  831|      4|        {
  832|      4|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  833|      4|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  834|      4|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  835|      4|
  836|      4|            const auto& dest_reg  = arg1.AsRegisterInt();
  837|      4|            const auto& src_reg   = arg2.AsRegisterInt();
  838|      4|            const auto& imm_value = arg3.AsImmediateValue();
  839|      4|
  840|      4|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  841|      4|            phi::i32 shift_value = imm_value.signed_value;
  842|      4|
  843|      4|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  844|      4|        }
  845|       |
  846|       |        void SRA(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  847|       |                 const InstructionArg& arg3)
  848|      2|        {
  849|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  850|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  851|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  852|      2|
  853|      2|            const auto& dest_reg = arg1.AsRegisterInt();
  854|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
  855|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
  856|      2|
  857|      2|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  858|      2|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  859|      2|
  860|      2|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  861|      2|        }
  862|       |
  863|       |        void SRAI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  864|       |                  const InstructionArg& arg3)
  865|      4|        {
  866|      4|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  867|      4|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  868|      4|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  869|      4|
  870|      4|            const auto& dest_reg  = arg1.AsRegisterInt();
  871|      4|            const auto& src_reg   = arg2.AsRegisterInt();
  872|      4|            const auto& imm_value = arg3.AsImmediateValue();
  873|      4|
  874|      4|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  875|      4|            phi::i32 shift_value = imm_value.signed_value;
  876|      4|
  877|      4|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  878|      4|        }
  879|       |
  880|       |        void AND(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  881|       |                 const InstructionArg& arg3)
  882|     25|        {
  883|     25|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  884|     25|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  885|     25|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  886|     25|
  887|     25|            const auto& dest_reg = arg1.AsRegisterInt();
  888|     25|            const auto& lhs_reg  = arg2.AsRegisterInt();
  889|     25|            const auto& rhs_reg  = arg3.AsRegisterInt();
  890|     25|
  891|     25|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  892|     25|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  893|     25|            phi::i32 new_value = lhs_value.get() & rhs_value.get();
  894|     25|
  895|     25|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  896|     25|        }
  897|       |
  898|       |        void ANDI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  899|       |                  const InstructionArg& arg3)
  900|     25|        {
  901|     25|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  902|     25|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  903|     25|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  904|     25|
  905|     25|            const auto& dest_reg  = arg1.AsRegisterInt();
  906|     25|            const auto& src_reg   = arg2.AsRegisterInt();
  907|     25|            const auto& imm_value = arg3.AsImmediateValue();
  908|     25|
  909|     25|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  910|     25|            phi::i32 new_value = src_value.get() & imm_value.signed_value.get();
  911|     25|
  912|     25|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  913|     25|        }
  914|       |
  915|       |        void OR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  916|       |                const InstructionArg& arg3)
  917|     25|        {
  918|     25|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  919|     25|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  920|     25|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  921|     25|
  922|     25|            const auto& dest_reg = arg1.AsRegisterInt();
  923|     25|            const auto& lhs_reg  = arg2.AsRegisterInt();
  924|     25|            const auto& rhs_reg  = arg3.AsRegisterInt();
  925|     25|
  926|     25|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  927|     25|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  928|     25|            phi::i32 new_value = lhs_value.get() | rhs_value.get();
  929|     25|
  930|     25|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  931|     25|        }
  932|       |
  933|       |        void ORI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  934|       |                 const InstructionArg& arg3)
  935|      3|        {
  936|      3|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  937|      3|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  938|      3|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  939|      3|
  940|      3|            const auto& dest_reg  = arg1.AsRegisterInt();
  941|      3|            const auto& src_reg   = arg2.AsRegisterInt();
  942|      3|            const auto& imm_value = arg3.AsImmediateValue();
  943|      3|
  944|      3|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  945|      3|            phi::i32 new_value = src_value.get() | imm_value.signed_value.get();
  946|      3|
  947|      3|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  948|      3|        }
  949|       |
  950|       |        void XOR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  951|       |                 const InstructionArg& arg3)
  952|      1|        {
  953|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  954|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  955|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  956|      1|
  957|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  958|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  959|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  960|      1|
  961|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  962|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  963|      1|            phi::i32 new_value = lhs_value.get() ^ rhs_value.get();
  964|      1|
  965|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  966|      1|        }
  967|       |
  968|       |        void XORI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  969|       |                  const InstructionArg& arg3)
  970|      1|        {
  971|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  972|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  973|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  974|      1|
  975|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  976|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  977|      1|            const auto& imm_value = arg3.AsImmediateValue();
  978|      1|
  979|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  980|      1|            phi::i32 new_value = src_value.get() ^ imm_value.signed_value.get();
  981|      1|
  982|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  983|      1|        }
  984|       |
  985|       |        void SLT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  986|       |                 const InstructionArg& arg3)
  987|      2|        {
  988|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  989|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  990|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  991|      2|
  992|      2|            const auto& dest_reg = arg1.AsRegisterInt();
  993|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
  994|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
  995|      2|
  996|      2|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  997|      2|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  998|      2|
  999|      2|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
 1000|      2|
 1001|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1002|      2|        }
 1003|       |
 1004|       |        void SLTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1005|       |                  const InstructionArg& arg3)
 1006|      3|        {
 1007|      3|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1008|      3|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1009|      3|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1010|      3|
 1011|      3|            const auto& dest_reg  = arg1.AsRegisterInt();
 1012|      3|            const auto& src_reg   = arg2.AsRegisterInt();
 1013|      3|            const auto& imm_value = arg3.AsImmediateValue();
 1014|      3|
 1015|      3|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1016|      3|
 1017|      3|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
 1018|      3|
 1019|      3|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1020|      3|        }
 1021|       |
 1022|       |        void SLTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1023|       |                  const InstructionArg& arg3)
 1024|      0|        {
 1025|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1026|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1027|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1028|      0|
 1029|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1030|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1031|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1032|      0|
 1033|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1034|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1035|      0|
 1036|      0|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
 1037|      0|
 1038|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1039|      0|        }
 1040|       |
 1041|       |        void SLTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1042|       |                   const InstructionArg& arg3)
 1043|      0|        {
 1044|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1045|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1046|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1047|      0|
 1048|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1049|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1050|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1051|      0|
 1052|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1053|      0|
 1054|      0|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
 1055|      0|
 1056|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1057|      0|        }
 1058|       |
 1059|       |        void LTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1060|       |                 const InstructionArg& arg3)
 1061|      0|        {
 1062|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1063|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1064|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1065|      0|
 1066|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1067|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1068|      0|
 1069|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1070|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1071|      0|
 1072|      0|            const phi::Boolean new_value = (lhs_value < rhs_value);
 1073|      0|
 1074|      0|            processor.SetFPSRValue(new_value);
 1075|      0|        }
 1076|       |
 1077|       |        void LTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1078|       |                 const InstructionArg& arg3)
 1079|      0|        {
 1080|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1081|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1082|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1083|      0|
 1084|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1085|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1086|      0|
 1087|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1088|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1089|      0|
 1090|      0|            const phi::Boolean new_value = (lhs_value < rhs_value);
 1091|      0|
 1092|      0|            processor.SetFPSRValue(new_value);
 1093|      0|        }
 1094|       |
 1095|       |        void SGT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1096|       |                 const InstructionArg& arg3)
 1097|      3|        {
 1098|      3|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1099|      3|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1100|      3|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1101|      3|
 1102|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1103|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1104|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1105|      3|
 1106|      3|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1107|      3|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1108|      3|
 1109|      3|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
 1110|      3|
 1111|      3|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1112|      3|        }
 1113|       |
 1114|       |        void SGTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1115|       |                  const InstructionArg& arg3)
 1116|      2|        {
 1117|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1118|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1119|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1120|      2|
 1121|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
 1122|      2|            const auto& src_reg   = arg2.AsRegisterInt();
 1123|      2|            const auto& imm_value = arg3.AsImmediateValue();
 1124|      2|
 1125|      2|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1126|      2|
 1127|      2|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
 1128|      2|
 1129|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1130|      2|        }
 1131|       |
 1132|       |        void SGTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1133|       |                  const InstructionArg& arg3)
 1134|      0|        {
 1135|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1136|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1137|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1138|      0|
 1139|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1140|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1141|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1142|      0|
 1143|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1144|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1145|      0|
 1146|      0|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
 1147|      0|
 1148|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1149|      0|        }
 1150|       |
 1151|       |        void SGTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1152|       |                   const InstructionArg& arg3)
 1153|      0|        {
 1154|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1155|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1156|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1157|      0|
 1158|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1159|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1160|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1161|      0|
 1162|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1163|      0|
 1164|      0|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
 1165|      0|
 1166|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1167|      0|        }
 1168|       |
 1169|       |        void GTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1170|       |                 const InstructionArg& arg3)
 1171|      0|        {
 1172|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1173|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1174|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1175|      0|
 1176|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1177|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1178|      0|
 1179|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1180|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1181|      0|
 1182|      0|            const phi::Boolean new_value = (lhs_value > rhs_value);
 1183|      0|
 1184|      0|            processor.SetFPSRValue(new_value);
 1185|      0|        }
 1186|       |
 1187|       |        void GTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1188|       |                 const InstructionArg& arg3)
 1189|      0|        {
 1190|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1191|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1192|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1193|      0|
 1194|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1195|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1196|      0|
 1197|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1198|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1199|      0|
 1200|      0|            const phi::Boolean new_value = (lhs_value > rhs_value);
 1201|      0|
 1202|      0|            processor.SetFPSRValue(new_value);
 1203|      0|        }
 1204|       |
 1205|       |        void SLE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1206|       |                 const InstructionArg& arg3)
 1207|      1|        {
 1208|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1209|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1210|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1211|      1|
 1212|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1213|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1214|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1215|      1|
 1216|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1217|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1218|      1|
 1219|      1|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
 1220|      1|
 1221|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1222|      1|        }
 1223|       |
 1224|       |        void SLEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1225|       |                  const InstructionArg& arg3)
 1226|      3|        {
 1227|      3|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1228|      3|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1229|      3|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1230|      3|
 1231|      3|            const auto& dest_reg  = arg1.AsRegisterInt();
 1232|      3|            const auto& src_reg   = arg2.AsRegisterInt();
 1233|      3|            const auto& imm_value = arg3.AsImmediateValue();
 1234|      3|
 1235|      3|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1236|      3|
 1237|      3|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
 1238|      3|
 1239|      3|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1240|      3|        }
 1241|       |
 1242|       |        void SLEU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1243|       |                  const InstructionArg& arg3)
 1244|      0|        {
 1245|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1246|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1247|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1248|      0|
 1249|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1250|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1251|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1252|      0|
 1253|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1254|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1255|      0|
 1256|      0|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
 1257|      0|
 1258|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1259|      0|        }
 1260|       |
 1261|       |        void SLEUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1262|       |                   const InstructionArg& arg3)
 1263|      0|        {
 1264|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1265|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1266|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1267|      0|
 1268|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1269|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1270|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1271|      0|
 1272|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1273|      0|
 1274|      0|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
 1275|      0|
 1276|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1277|      0|        }
 1278|       |
 1279|       |        void LEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1280|       |                 const InstructionArg& arg3)
 1281|      0|        {
 1282|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1283|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1284|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1285|      0|
 1286|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1287|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1288|      0|
 1289|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1290|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1291|      0|
 1292|      0|            const phi::Boolean new_value = (lhs_value <= rhs_value);
 1293|      0|
 1294|      0|            processor.SetFPSRValue(new_value);
 1295|      0|        }
 1296|       |
 1297|       |        void LED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1298|       |                 const InstructionArg& arg3)
 1299|      0|        {
 1300|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1301|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1302|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1303|      0|
 1304|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1305|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1306|      0|
 1307|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1308|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1309|      0|
 1310|      0|            const phi::Boolean new_value = (lhs_value <= rhs_value);
 1311|      0|
 1312|      0|            processor.SetFPSRValue(new_value);
 1313|      0|        }
 1314|       |
 1315|       |        void SGE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1316|       |                 const InstructionArg& arg3)
 1317|      3|        {
 1318|      3|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1319|      3|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1320|      3|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1321|      3|
 1322|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1323|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1324|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1325|      3|
 1326|      3|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1327|      3|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1328|      3|
 1329|      3|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
 1330|      3|
 1331|      3|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1332|      3|        }
 1333|       |
 1334|       |        void SGEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1335|       |                  const InstructionArg& arg3)
 1336|     24|        {
 1337|     24|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1338|     24|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1339|     24|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1340|     24|
 1341|     24|            const auto& dest_reg  = arg1.AsRegisterInt();
 1342|     24|            const auto& src_reg   = arg2.AsRegisterInt();
 1343|     24|            const auto& imm_value = arg3.AsImmediateValue();
 1344|     24|
 1345|     24|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1346|     24|
 1347|     24|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
 1348|     24|
 1349|     24|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1350|     24|        }
 1351|       |
 1352|       |        void SGEU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1353|       |                  const InstructionArg& arg3)
 1354|      0|        {
 1355|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1356|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1357|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1358|      0|
 1359|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1360|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1361|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1362|      0|
 1363|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1364|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1365|      0|
 1366|      0|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
 1367|      0|
 1368|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1369|      0|        }
 1370|       |
 1371|       |        void SGEUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1372|       |                   const InstructionArg& arg3)
 1373|      0|        {
 1374|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1375|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1376|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1377|      0|
 1378|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1379|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1380|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1381|      0|
 1382|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1383|      0|
 1384|      0|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
 1385|      0|
 1386|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1387|      0|        }
 1388|       |
 1389|       |        void GEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1390|       |                 const InstructionArg& arg3)
 1391|      0|        {
 1392|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1393|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1394|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1395|      0|
 1396|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1397|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1398|      0|
 1399|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1400|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1401|      0|
 1402|      0|            const phi::Boolean new_value = (lhs_value >= rhs_value);
 1403|      0|
 1404|      0|            processor.SetFPSRValue(new_value);
 1405|      0|        }
 1406|       |
 1407|       |        void GED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1408|       |                 const InstructionArg& arg3)
 1409|      0|        {
 1410|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1411|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1412|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1413|      0|
 1414|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1415|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1416|      0|
 1417|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1418|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1419|      0|
 1420|      0|            const phi::Boolean new_value = (lhs_value >= rhs_value);
 1421|      0|
 1422|      0|            processor.SetFPSRValue(new_value);
 1423|      0|        }
 1424|       |
 1425|       |        void SEQ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1426|       |                 const InstructionArg& arg3)
 1427|  15.0k|        {
 1428|  15.0k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1429|  15.0k|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1430|  15.0k|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1431|  15.0k|
 1432|  15.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1433|  15.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1434|  15.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1435|  15.0k|
 1436|  15.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1437|  15.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1438|  15.0k|
 1439|  15.0k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
 1440|  15.0k|
 1441|  15.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1442|  15.0k|        }
 1443|       |
 1444|       |        void SEQI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1445|       |                  const InstructionArg& arg3)
 1446|      1|        {
 1447|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1448|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1449|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1450|      1|
 1451|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1452|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1453|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1454|      1|
 1455|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1456|      1|
 1457|      1|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
 1458|      1|
 1459|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1460|      1|        }
 1461|       |
 1462|       |        void SEQU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1463|       |                  const InstructionArg& arg3)
 1464|      0|        {
 1465|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1466|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1467|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1468|      0|
 1469|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1470|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1471|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1472|      0|
 1473|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1474|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1475|      0|
 1476|      0|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
 1477|      0|
 1478|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1479|      0|        }
 1480|       |
 1481|       |        void SEQUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1482|       |                   const InstructionArg& arg3)
 1483|      0|        {
 1484|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1485|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1486|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1487|      0|
 1488|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1489|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1490|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1491|      0|
 1492|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1493|      0|
 1494|      0|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
 1495|      0|
 1496|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1497|      0|        }
 1498|       |
 1499|       |        void EQF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1500|       |                 const InstructionArg& arg3)
 1501|      0|        {
 1502|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1503|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1504|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1505|      0|
 1506|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1507|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1508|      0|
 1509|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1510|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1511|      0|
 1512|      0|            const phi::Boolean new_value = (lhs_value.get() == rhs_value.get());
 1513|      0|
 1514|      0|            processor.SetFPSRValue(new_value);
 1515|      0|        }
 1516|       |
 1517|       |        void EQD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1518|       |                 const InstructionArg& arg3)
 1519|      0|        {
 1520|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1521|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1522|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1523|      0|
 1524|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1525|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1526|      0|
 1527|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1528|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1529|      0|
 1530|      0|            const phi::Boolean new_value = (lhs_value.get() == rhs_value.get());
 1531|      0|
 1532|      0|            processor.SetFPSRValue(new_value);
 1533|      0|        }
 1534|       |
 1535|       |        void SNE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1536|       |                 const InstructionArg& arg3)
 1537|      1|        {
 1538|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1539|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1540|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1541|      1|
 1542|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1543|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1544|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1545|      1|
 1546|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1547|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1548|      1|
 1549|      1|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
 1550|      1|
 1551|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1552|      1|        }
 1553|       |
 1554|       |        void SNEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1555|       |                  const InstructionArg& arg3)
 1556|      1|        {
 1557|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1558|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1559|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1560|      1|
 1561|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1562|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1563|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1564|      1|
 1565|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1566|      1|
 1567|      1|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
 1568|      1|
 1569|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1570|      1|        }
 1571|       |
 1572|       |        void SNEU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1573|       |                  const InstructionArg& arg3)
 1574|      0|        {
 1575|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1576|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1577|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1578|      0|
 1579|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1580|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1581|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1582|      0|
 1583|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1584|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1585|      0|
 1586|      0|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
 1587|      0|
 1588|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1589|      0|        }
 1590|       |
 1591|       |        void SNEUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1592|       |                   const InstructionArg& arg3)
 1593|      0|        {
 1594|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1595|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1596|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1597|      0|
 1598|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1599|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1600|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1601|      0|
 1602|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1603|      0|
 1604|      0|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
 1605|      0|
 1606|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1607|      0|        }
 1608|       |
 1609|       |        void NEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1610|       |                 const InstructionArg& arg3)
 1611|      0|        {
 1612|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1613|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1614|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1615|      0|
 1616|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1617|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1618|      0|
 1619|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1620|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1621|      0|
 1622|      0|            const phi::Boolean new_value = (lhs_value.get() != rhs_value.get());
 1623|      0|
 1624|      0|            processor.SetFPSRValue(new_value);
 1625|      0|        }
 1626|       |
 1627|       |        void NED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1628|       |                 const InstructionArg& arg3)
 1629|      0|        {
 1630|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1631|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1632|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1633|      0|
 1634|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1635|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1636|      0|
 1637|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1638|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1639|      0|
 1640|      0|            const phi::Boolean new_value = (lhs_value.get() != rhs_value.get());
 1641|      0|
 1642|      0|            processor.SetFPSRValue(new_value);
 1643|      0|        }
 1644|       |
 1645|       |        void BEQZ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1646|       |                  const InstructionArg& arg3)
 1647|      9|        {
 1648|      9|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1649|      9|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1650|      9|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1651|      9|
 1652|      9|            const auto& test_reg   = arg1.AsRegisterInt();
 1653|      9|            const auto& jump_label = arg2.AsLabel();
 1654|      9|
 1655|      9|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1656|      9|
 1657|      9|            if (test_value == 0)
 1658|      9|            {
 1659|      9|                JumpToLabel(processor, jump_label.label_name);
 1660|      9|            }
 1661|      9|        }
 1662|       |
 1663|       |        void BNEZ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1664|       |                  const InstructionArg& arg3)
 1665|      7|        {
 1666|      7|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1667|      7|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1668|      7|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1669|      7|
 1670|      7|            const auto& test_reg   = arg1.AsRegisterInt();
 1671|      7|            const auto& jump_label = arg2.AsLabel();
 1672|      7|
 1673|      7|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1674|      7|
 1675|      7|            if (test_value != 0)
 1676|      6|            {
 1677|      6|                JumpToLabel(processor, jump_label.label_name);
 1678|      6|            }
 1679|      7|        }
 1680|       |
 1681|       |        void BFPT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1682|       |                  const InstructionArg& arg3)
 1683|      0|        {
 1684|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1685|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1686|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1687|      0|
 1688|      0|            const auto& jump_label = arg1.AsLabel();
 1689|      0|
 1690|      0|            phi::Boolean test_value = processor.GetFPSRValue();
 1691|      0|
 1692|      0|            if (test_value)
 1693|      0|            {
 1694|      0|                JumpToLabel(processor, jump_label.label_name);
 1695|      0|            }
 1696|      0|        }
 1697|       |
 1698|       |        void BFPF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1699|       |                  const InstructionArg& arg3)
 1700|      0|        {
 1701|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1702|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1703|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1704|      0|
 1705|      0|            const auto& jump_label = arg1.AsLabel();
 1706|      0|
 1707|      0|            phi::Boolean test_value = processor.GetFPSRValue();
 1708|      0|
 1709|      0|            if (!test_value)
 1710|      0|            {
 1711|      0|                JumpToLabel(processor, jump_label.label_name);
 1712|      0|            }
 1713|      0|        }
 1714|       |
 1715|       |        void J(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1716|       |               const InstructionArg& arg3)
 1717|  80.0k|        {
 1718|  80.0k|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1719|  80.0k|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1720|  80.0k|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1721|  80.0k|
 1722|  80.0k|            const auto& jump_label = arg1.AsLabel();
 1723|  80.0k|
 1724|  80.0k|            JumpToLabel(processor, jump_label.label_name);
 1725|  80.0k|        }
 1726|       |
 1727|       |        void JR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1728|       |                const InstructionArg& arg3)
 1729|  10.0k|        {
 1730|  10.0k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1731|  10.0k|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1732|  10.0k|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1733|  10.0k|
 1734|  10.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1735|  10.0k|
 1736|  10.0k|            JumpToRegister(processor, jump_register.register_id);
 1737|  10.0k|        }
 1738|       |
 1739|       |        void JAL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1740|       |                 const InstructionArg& arg3)
 1741|      1|        {
 1742|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1743|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1744|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1745|      1|
 1746|      1|            const auto& jump_label = arg1.AsLabel();
 1747|      1|
 1748|      1|            processor.IntRegisterSetUnsignedValue(
 1749|      1|                    IntRegisterID::R31,
 1750|      1|                    static_cast<std::uint32_t>(processor.m_NextProgramCounter.get()));
 1751|      1|
 1752|      1|            JumpToLabel(processor, jump_label.label_name);
 1753|      1|        }
 1754|       |
 1755|       |        void JALR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1756|       |                  const InstructionArg& arg3)
 1757|  10.0k|        {
 1758|  10.0k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1759|  10.0k|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1760|  10.0k|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1761|  10.0k|
 1762|  10.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1763|  10.0k|
 1764|  10.0k|            processor.IntRegisterSetUnsignedValue(
 1765|  10.0k|                    IntRegisterID::R31,
 1766|  10.0k|                    static_cast<std::uint32_t>(processor.m_NextProgramCounter.get()));
 1767|  10.0k|
 1768|  10.0k|            JumpToRegister(processor, jump_register.register_id);
 1769|  10.0k|        }
 1770|       |
 1771|       |        void LHI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1772|       |                 const InstructionArg& arg3)
 1773|      0|        {
 1774|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1775|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::ImmediateInteger);
 1776|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1777|      0|
 1778|      0|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1779|      0|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.get();
 1780|      0|
 1781|      0|            imm_value = (imm_value << 16) & 0xFFFF0000;
 1782|      0|
 1783|      0|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1784|      0|        }
 1785|       |
 1786|       |        void LB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1787|       |                const InstructionArg& arg3)
 1788|      1|        {
 1789|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1790|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1791|      1|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1792|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1793|      1|
 1794|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1795|      1|
 1796|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1797|      1|
 1798|      1|            if (!optional_address.has_value())
 1799|      0|            {
 1800|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1801|      0|                return;
 1802|      0|            }
 1803|      1|
 1804|      1|            phi::i32 address = optional_address.value();
 1805|      1|
 1806|      1|            auto optional_value =
 1807|      1|                    processor.m_MemoryBlock.LoadByte(static_cast<std::size_t>(address.get()));
 1808|      1|
 1809|      1|            if (!optional_value.has_value())
 1810|      0|            {
 1811|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1812|      0|                PHI_LOG_ERROR("Failed to load byte at address {}", address.get());
 1813|      0|                return;
 1814|      0|            }
 1815|      1|
 1816|      1|            phi::i32 value = optional_value.value();
 1817|      1|
 1818|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1819|      1|        }
 1820|       |
 1821|       |        void LBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1822|       |                 const InstructionArg& arg3)
 1823|      2|        {
 1824|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1825|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1826|      2|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1827|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1828|      2|
 1829|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1830|      2|
 1831|      2|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1832|      2|
 1833|      2|            if (!optional_address.has_value())
 1834|      0|            {
 1835|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1836|      0|                return;
 1837|      0|            }
 1838|      2|
 1839|      2|            phi::i32 address = optional_address.value();
 1840|      2|
 1841|      2|            auto optional_value = processor.m_MemoryBlock.LoadUnsignedByte(
 1842|      2|                    static_cast<std::size_t>(address.get()));
 1843|      2|
 1844|      2|            if (!optional_value.has_value())
 1845|      0|            {
 1846|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1847|      0|                PHI_LOG_ERROR("Failed to load unsigned byte at address {}", address.get());
 1848|      0|                return;
 1849|      0|            }
 1850|      2|
 1851|      2|            phi::i32 value = optional_value.value();
 1852|      2|
 1853|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1854|      2|        }
 1855|       |
 1856|       |        void LH(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1857|       |                const InstructionArg& arg3)
 1858|      2|        {
 1859|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1860|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1861|      2|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1862|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1863|      2|
 1864|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1865|      2|
 1866|      2|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1867|      2|
 1868|      2|            if (!optional_address.has_value())
 1869|      0|            {
 1870|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1871|      0|                return;
 1872|      0|            }
 1873|      2|
 1874|      2|            phi::i32 address = optional_address.value();
 1875|      2|
 1876|      2|            auto optional_value =
 1877|      2|                    processor.m_MemoryBlock.LoadHalfWord(static_cast<std::size_t>(address.get()));
 1878|      2|
 1879|      2|            if (!optional_value.has_value())
 1880|      0|            {
 1881|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1882|      0|                PHI_LOG_ERROR("Failed to load half byte at address {}", address.get());
 1883|      0|                return;
 1884|      0|            }
 1885|      2|
 1886|      2|            phi::i32 value = optional_value.value();
 1887|      2|
 1888|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1889|      2|        }
 1890|       |
 1891|       |        void LHU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1892|       |                 const InstructionArg& arg3)
 1893|      2|        {
 1894|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1895|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1896|      2|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1897|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1898|      2|
 1899|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1900|      2|
 1901|      2|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1902|      2|
 1903|      2|            if (!optional_address.has_value())
 1904|      0|            {
 1905|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1906|      0|                return;
 1907|      0|            }
 1908|      2|
 1909|      2|            phi::i32 address = optional_address.value();
 1910|      2|
 1911|      2|            auto optional_value = processor.m_MemoryBlock.LoadUnsignedHalfWord(
 1912|      2|                    static_cast<std::size_t>(address.get()));
 1913|      2|
 1914|      2|            if (!optional_value.has_value())
 1915|      0|            {
 1916|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1917|      0|                PHI_LOG_ERROR("Failed to load unsigned half byte at address {}", address.get());
 1918|      0|                return;
 1919|      0|            }
 1920|      2|
 1921|      2|            phi::i32 value = optional_value.value();
 1922|      2|
 1923|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1924|      2|        }
 1925|       |
 1926|       |        void LW(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1927|       |                const InstructionArg& arg3)
 1928|  5.03k|        {
 1929|  5.03k|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1930|  5.03k|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1931|  5.03k|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1932|  5.03k|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1933|  5.03k|
 1934|  5.03k|            const auto& dest_reg = arg1.AsRegisterInt();
 1935|  5.03k|
 1936|  5.03k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1937|  5.03k|
 1938|  5.03k|            if (!optional_address.has_value())
 1939|      1|            {
 1940|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1941|      1|                return;
 1942|      1|            }
 1943|  5.03k|
 1944|  5.03k|            phi::i32 address = optional_address.value();
 1945|  5.03k|
 1946|  5.03k|            auto optional_value =
 1947|  5.03k|                    processor.m_MemoryBlock.LoadWord(static_cast<std::size_t>(address.get()));
 1948|  5.03k|
 1949|  5.03k|            if (!optional_value.has_value())
 1950|      2|            {
 1951|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1952|      2|                PHI_LOG_ERROR("Failed to load word at address {}", address.get());
 1953|      2|                return;
 1954|      2|            }
 1955|  5.03k|
 1956|  5.03k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1957|  5.03k|        }
 1958|       |
 1959|       |        void LWU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1960|       |                 const InstructionArg& arg3)
 1961|      2|        {
 1962|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1963|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1964|      2|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1965|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1966|      2|
 1967|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1968|      2|
 1969|      2|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1970|      2|
 1971|      2|            if (!optional_address.has_value())
 1972|      0|            {
 1973|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1974|      0|                return;
 1975|      0|            }
 1976|      2|
 1977|      2|            phi::i32 address = optional_address.value();
 1978|      2|
 1979|      2|            auto optional_value = processor.m_MemoryBlock.LoadUnsignedWord(
 1980|      2|                    static_cast<std::size_t>(address.get()));
 1981|      2|
 1982|      2|            if (!optional_value.has_value())
 1983|      0|            {
 1984|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1985|      0|                PHI_LOG_ERROR("Failed to load unsigned word at address {}", address.get());
 1986|      0|                return;
 1987|      0|            }
 1988|      2|
 1989|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1990|      2|        }
 1991|       |
 1992|       |        void LF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1993|       |                const InstructionArg& arg3)
 1994|      0|        {
 1995|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1996|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1997|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1998|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1999|      0|
 2000|      0|            const auto& dest_reg = arg1.AsRegisterFloat();
 2001|      0|
 2002|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 2003|      0|
 2004|      0|            if (!optional_address.has_value())
 2005|      0|            {
 2006|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2007|      0|                return;
 2008|      0|            }
 2009|      0|
 2010|      0|            phi::i32 address = optional_address.value();
 2011|      0|
 2012|      0|            auto optional_value =
 2013|      0|                    processor.m_MemoryBlock.LoadFloat(static_cast<std::size_t>(address.get()));
 2014|      0|
 2015|      0|            if (!optional_value.has_value())
 2016|      0|            {
 2017|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2018|      0|                PHI_LOG_ERROR("Failed to load float at address {}", address.get());
 2019|      0|                return;
 2020|      0|            }
 2021|      0|
 2022|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 2023|      0|        }
 2024|       |
 2025|       |        void LD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2026|       |                const InstructionArg& arg3)
 2027|      0|        {
 2028|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2029|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 2030|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 2031|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2032|      0|
 2033|      0|            const auto& dest_reg = arg1.AsRegisterFloat();
 2034|      0|
 2035|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 2036|      0|
 2037|      0|            if (!optional_address.has_value())
 2038|      0|            {
 2039|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2040|      0|                return;
 2041|      0|            }
 2042|      0|
 2043|      0|            phi::i32 address = optional_address.value();
 2044|      0|
 2045|      0|            auto optional_value =
 2046|      0|                    processor.m_MemoryBlock.LoadDouble(static_cast<std::size_t>(address.get()));
 2047|      0|
 2048|      0|            if (!optional_value.has_value())
 2049|      0|            {
 2050|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2051|      0|                PHI_LOG_ERROR("Failed to load double at address {}", address.get());
 2052|      0|                return;
 2053|      0|            }
 2054|      0|
 2055|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 2056|      0|        }
 2057|       |
 2058|       |        void SB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2059|       |                const InstructionArg& arg3)
 2060|      4|        {
 2061|      4|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2062|      4|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2063|      4|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2064|      4|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2065|      4|
 2066|      4|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2067|      4|
 2068|      4|            if (!optional_address.has_value())
 2069|      0|            {
 2070|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2071|      0|                return;
 2072|      0|            }
 2073|      4|
 2074|      4|            phi::i32 address = optional_address.value();
 2075|      4|
 2076|      4|            const auto& src_reg = arg2.AsRegisterInt();
 2077|      4|
 2078|      4|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 2079|      4|
 2080|      4|            phi::Boolean success = processor.m_MemoryBlock.StoreByte(
 2081|      4|                    static_cast<std::size_t>(address.get()), static_cast<std::int8_t>(value.get()));
 2082|      4|
 2083|      4|            if (!success)
 2084|      2|            {
 2085|      2|                processor.Raise(Exception::AddressOutOfBounds);
 2086|      2|                PHI_LOG_ERROR("Failed to store byte at address {}", address.get());
 2087|      2|            }
 2088|      4|        }
 2089|       |
 2090|       |        void SBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2091|       |                 const InstructionArg& arg3)
 2092|      2|        {
 2093|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2094|      2|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2095|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2096|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2097|      2|
 2098|      2|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2099|      2|
 2100|      2|            if (!optional_address.has_value())
 2101|      0|            {
 2102|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2103|      0|                return;
 2104|      0|            }
 2105|      2|
 2106|      2|            phi::i32 address = optional_address.value();
 2107|      2|
 2108|      2|            const auto& src_reg = arg2.AsRegisterInt();
 2109|      2|
 2110|      2|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2111|      2|
 2112|      2|            phi::Boolean success = processor.m_MemoryBlock.StoreUnsignedByte(
 2113|      2|                    static_cast<std::size_t>(address.get()),
 2114|      2|                    static_cast<std::uint8_t>(value.get()));
 2115|      2|
 2116|      2|            if (!success)
 2117|      0|            {
 2118|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2119|      0|                PHI_LOG_ERROR("Failed to store unsigned byte at address {}", address.get());
 2120|      0|            }
 2121|      2|        }
 2122|       |
 2123|       |        void SH(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2124|       |                const InstructionArg& arg3)
 2125|      2|        {
 2126|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2127|      2|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2128|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2129|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2130|      2|
 2131|      2|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2132|      2|
 2133|      2|            if (!optional_address.has_value())
 2134|      0|            {
 2135|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2136|      0|                return;
 2137|      0|            }
 2138|      2|
 2139|      2|            phi::i32 address = optional_address.value();
 2140|      2|
 2141|      2|            const auto& src_reg = arg2.AsRegisterInt();
 2142|      2|
 2143|      2|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 2144|      2|
 2145|      2|            phi::Boolean success =
 2146|      2|                    processor.m_MemoryBlock.StoreHalfWord(static_cast<std::size_t>(address.get()),
 2147|      2|                                                          static_cast<std::int16_t>(value.get()));
 2148|      2|
 2149|      2|            if (!success)
 2150|      0|            {
 2151|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2152|      0|                PHI_LOG_ERROR("Failed to store half word at address {}", address.get());
 2153|      0|            }
 2154|      2|        }
 2155|       |
 2156|       |        void SHU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2157|       |                 const InstructionArg& arg3)
 2158|      2|        {
 2159|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2160|      2|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2161|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2162|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2163|      2|
 2164|      2|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2165|      2|
 2166|      2|            if (!optional_address.has_value())
 2167|      0|            {
 2168|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2169|      0|                return;
 2170|      0|            }
 2171|      2|
 2172|      2|            phi::i32 address = optional_address.value();
 2173|      2|
 2174|      2|            const auto& src_reg = arg2.AsRegisterInt();
 2175|      2|
 2176|      2|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2177|      2|
 2178|      2|            phi::Boolean success = processor.m_MemoryBlock.StoreUnsignedHalfWord(
 2179|      2|                    static_cast<std::size_t>(address.get()),
 2180|      2|                    static_cast<std::uint16_t>(value.get()));
 2181|      2|
 2182|      2|            if (!success)
 2183|      0|            {
 2184|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2185|      0|                PHI_LOG_ERROR("Failed to store unsigned half word at address {}", address.get());
 2186|      0|            }
 2187|      2|        }
 2188|       |
 2189|       |        void SW(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2190|       |                const InstructionArg& arg3)
 2191|     12|        {
 2192|     12|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2193|     12|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2194|     12|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2195|     12|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2196|     12|
 2197|     12|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2198|     12|
 2199|     12|            if (!optional_address.has_value())
 2200|      1|            {
 2201|      1|                processor.Raise(Exception::AddressOutOfBounds);
 2202|      1|                return;
 2203|      1|            }
 2204|     11|
 2205|     11|            phi::i32 address = optional_address.value();
 2206|     11|
 2207|     11|            const auto& src_reg = arg2.AsRegisterInt();
 2208|     11|
 2209|     11|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 2210|     11|
 2211|     11|            phi::Boolean success = processor.m_MemoryBlock.StoreWord(
 2212|     11|                    static_cast<std::size_t>(address.get()), value);
 2213|     11|
 2214|     11|            if (!success)
 2215|      2|            {
 2216|      2|                processor.Raise(Exception::AddressOutOfBounds);
 2217|      2|                PHI_LOG_ERROR("Failed to store word at address {}", address.get());
 2218|      2|            }
 2219|     11|        }
 2220|       |
 2221|       |        void SWU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2222|       |                 const InstructionArg& arg3)
 2223|      2|        {
 2224|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2225|      2|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2226|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2227|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2228|      2|
 2229|      2|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2230|      2|
 2231|      2|            if (!optional_address.has_value())
 2232|      0|            {
 2233|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2234|      0|                return;
 2235|      0|            }
 2236|      2|
 2237|      2|            phi::i32 address = optional_address.value();
 2238|      2|
 2239|      2|            const auto& src_reg = arg2.AsRegisterInt();
 2240|      2|
 2241|      2|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2242|      2|
 2243|      2|            phi::Boolean success = processor.m_MemoryBlock.StoreUnsignedWord(
 2244|      2|                    static_cast<std::size_t>(address.get()), value);
 2245|      2|
 2246|      2|            if (!success)
 2247|      0|            {
 2248|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2249|      0|                PHI_LOG_ERROR("Failed to store unsigned word at address {}", address.get());
 2250|      0|            }
 2251|      2|        }
 2252|       |
 2253|       |        void SF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2254|       |                const InstructionArg& arg3)
 2255|      0|        {
 2256|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2257|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2258|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2259|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2260|      0|
 2261|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2262|      0|
 2263|      0|            if (!optional_address.has_value())
 2264|      0|            {
 2265|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2266|      0|                return;
 2267|      0|            }
 2268|      0|
 2269|      0|            phi::i32 address = optional_address.value();
 2270|      0|
 2271|      0|            const auto& src_reg = arg2.AsRegisterFloat();
 2272|      0|
 2273|      0|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 2274|      0|
 2275|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreFloat(
 2276|      0|                    static_cast<std::size_t>(address.get()), value);
 2277|      0|
 2278|      0|            if (!success)
 2279|      0|            {
 2280|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2281|      0|                PHI_LOG_ERROR("Failed to store float at address {}", address.get());
 2282|      0|            }
 2283|      0|        }
 2284|       |
 2285|       |        void SD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2286|       |                const InstructionArg& arg3)
 2287|      0|        {
 2288|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2289|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2290|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2291|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2292|      0|
 2293|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2294|      0|
 2295|      0|            if (!optional_address.has_value())
 2296|      0|            {
 2297|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2298|      0|                return;
 2299|      0|            }
 2300|      0|
 2301|      0|            phi::i32 address = optional_address.value();
 2302|      0|
 2303|      0|            const auto& src_reg = arg2.AsRegisterFloat();
 2304|      0|
 2305|      0|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 2306|      0|
 2307|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreDouble(
 2308|      0|                    static_cast<std::size_t>(address.get()), value);
 2309|      0|
 2310|      0|            if (!success)
 2311|      0|            {
 2312|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2313|      0|                PHI_LOG_ERROR("Failed to store float at address {}", address.get());
 2314|      0|            }
 2315|      0|        }
 2316|       |
 2317|       |        void MOVF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2318|       |                  const InstructionArg& arg3)
 2319|      0|        {
 2320|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2321|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2322|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2323|      0|
 2324|      0|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 2325|      0|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 2326|      0|
 2327|      0|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 2328|      0|
 2329|      0|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 2330|      0|        }
 2331|       |
 2332|       |        void MOVD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2333|       |                  const InstructionArg& arg3)
 2334|      0|        {
 2335|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2336|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2337|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2338|      0|
 2339|      0|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 2340|      0|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 2341|      0|
 2342|      0|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 2343|      0|
 2344|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 2345|      0|        }
 2346|       |
 2347|       |        void MOVFP2I(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2348|       |                     const InstructionArg& arg3)
 2349|      0|        {
 2350|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 2351|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2352|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2353|      0|
 2354|      0|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 2355|      0|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 2356|      0|
 2357|      0|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).get();
 2358|      0|
 2359|      0|            const std::uint32_t moved_value =
 2360|      0|                    *reinterpret_cast<const std::uint32_t*>(&source_value);
 2361|      0|
 2362|      0|            processor.IntRegisterSetUnsignedValue(dest_reg, moved_value);
 2363|      0|        }
 2364|       |
 2365|       |        void MOVI2FP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2366|       |                     const InstructionArg& arg3)
 2367|      0|        {
 2368|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2369|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2370|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2371|      0|
 2372|      0|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 2373|      0|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 2374|      0|
 2375|      0|            const std::uint32_t source_value =
 2376|      0|                    processor.IntRegisterGetUnsignedValue(source_reg).get();
 2377|      0|
 2378|      0|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 2379|      0|
 2380|      0|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 2381|      0|        }
 2382|       |
 2383|       |        void CVTF2D(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2384|       |                    const InstructionArg& arg3)
 2385|      0|        {
 2386|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2387|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2388|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2389|      0|
 2390|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2391|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2392|      0|
 2393|      0|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 2394|      0|
 2395|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 2396|      0|        }
 2397|       |
 2398|       |        void CVTF2I(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2399|       |                    const InstructionArg& arg3)
 2400|      0|        {
 2401|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2402|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2403|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2404|      0|
 2405|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2406|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2407|      0|
 2408|      0|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).get();
 2409|      0|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2410|      0|            const float        converted_value_float =
 2411|      0|                    *reinterpret_cast<const float*>(&converted_value_int);
 2412|      0|
 2413|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2414|      0|        }
 2415|       |
 2416|       |        void CVTD2F(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2417|       |                    const InstructionArg& arg3)
 2418|      0|        {
 2419|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2420|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2421|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2422|      0|
 2423|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2424|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2425|      0|
 2426|      0|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).get();
 2427|      0|            const float  converted_value = static_cast<float>(src_value);
 2428|      0|
 2429|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2430|      0|        }
 2431|       |
 2432|       |        void CVTD2I(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2433|       |                    const InstructionArg& arg3)
 2434|      0|        {
 2435|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2436|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2437|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2438|      0|
 2439|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2440|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2441|      0|
 2442|      0|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).get();
 2443|      0|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2444|      0|            const float        converted_value_float =
 2445|      0|                    *reinterpret_cast<const float*>(&converted_value_int);
 2446|      0|
 2447|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2448|      0|        }
 2449|       |
 2450|       |        void CVTI2F(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2451|       |                    const InstructionArg& arg3)
 2452|      0|        {
 2453|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2454|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2455|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2456|      0|
 2457|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2458|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2459|      0|
 2460|      0|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).get();
 2461|      0|            const std::int32_t converted_value_int =
 2462|      0|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2463|      0|            const float converted_value_float = static_cast<float>(converted_value_int);
 2464|      0|
 2465|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2466|      0|        }
 2467|       |
 2468|       |        void CVTI2D(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2469|       |                    const InstructionArg& arg3)
 2470|      0|        {
 2471|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2472|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2473|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2474|      0|
 2475|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2476|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2477|      0|
 2478|      0|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).get();
 2479|      0|            const std::int32_t converted_value_int =
 2480|      0|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2481|      0|            const double converted_value_double = static_cast<double>(converted_value_int);
 2482|      0|
 2483|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2484|      0|        }
 2485|       |
 2486|       |        void TRAP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2487|       |                  const InstructionArg& arg3)
 2488|      1|        {
 2489|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::ImmediateInteger);
 2490|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2491|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2492|      1|
 2493|      1|            processor.Raise(Exception::Trap);
 2494|      1|        }
 2495|       |
 2496|       |        void HALT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2497|       |                  const InstructionArg& arg3)
 2498|      1|        {
 2499|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 2500|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2501|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2502|      1|
 2503|      1|            processor.Raise(Exception::Halt);
 2504|      1|        }
 2505|       |
 2506|       |        void NOP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2507|       |                 const InstructionArg& arg3)
 2508|  5.01k|        {
 2509|  5.01k|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 2510|  5.01k|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2511|  5.01k|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2512|  5.01k|
 2513|  5.01k|            /* Do nothing */
 2514|  5.01k|        }
 2515|       |    } // namespace impl
 2516|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/FloatRegister.cpp:
    1|       |#include "DLX/FloatRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void FloatRegister::SetValue(const phi::f32 val)
    6|   452k|    {
    7|   452k|        m_Value = val;
    8|   452k|    }
    9|       |
   10|       |    phi::f32 FloatRegister::GetValue() const
   11|      0|    {
   12|      0|        return m_Value;
   13|      0|    }
   14|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Token.cpp:
    1|       |#include "DLX/Token.hpp"
    2|       |#include "Phi/Core/Assert.hpp"
    3|       |
    4|       |#include <magic_enum.hpp>
    5|       |#include <string>
    6|       |
    7|       |namespace dlx
    8|       |{
    9|       |    Token::Token(Type type, std::string_view text, phi::u64 line_number, phi::u64 column,
   10|       |                 std::uint32_t hint)
   11|       |        : m_Type{type}
   12|       |        , m_Text{text}
   13|       |        , m_LineNumber{line_number}
   14|       |        , m_Column{column}
   15|       |        , m_Hint{hint}
   16|  1.67M|    {}
   17|       |
   18|       |    Token::Type Token::GetType() const noexcept
   19|  2.01M|    {
   20|  2.01M|        return m_Type;
   21|  2.01M|    }
   22|       |
   23|       |    std::string_view Token::GetTypeName() const noexcept
   24|  2.94k|    {
   25|  2.94k|        return magic_enum::enum_name(m_Type);
   26|  2.94k|    }
   27|       |
   28|       |    phi::u64 Token::GetLineNumber() const noexcept
   29|      0|    {
   30|      0|        return m_LineNumber;
   31|      0|    }
   32|       |
   33|       |    phi::u64 Token::GetColumn() const noexcept
   34|      0|    {
   35|      0|        return m_Column;
   36|      0|    }
   37|       |
   38|       |    phi::usize Token::GetLength() const noexcept
   39|      0|    {
   40|      0|        return m_Text.length();
   41|      0|    }
   42|       |
   43|       |    std::string_view Token::GetText() const noexcept
   44|  2.93M|    {
   45|  2.93M|        return m_Text;
   46|  2.93M|    }
   47|       |
   48|       |    std::string Token::GetTextString() const noexcept
   49|      0|    {
   50|      0|        return std::string(m_Text.data(), m_Text.length());
   51|      0|    }
   52|       |
   53|       |    std::uint32_t Token::GetHint() const noexcept
   54|   195k|    {
   55|   195k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   56|   195k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode);
   57|   195k|
   58|   195k|        return m_Hint;
   59|   195k|    }
   60|       |
   61|       |    std::string Token::DebugInfo() const noexcept
   62|      0|    {
   63|      0|        std::string pos_info = "(" + std::to_string(GetLineNumber().get()) + ":" +
   64|      0|                               std::to_string(GetColumn().get()) + ")";
   65|      0|
   66|      0|        switch (m_Type)
   67|      0|        {
   68|      0|            case Type::Colon:
   69|      0|                return "Token[Colon]" + pos_info;
   70|      0|            case Type::Comma:
   71|      0|                return "Token[Comma]" + pos_info;
   72|      0|            case Type::Comment:
   73|      0|                return "Token[Comment]" + pos_info + ": '" + GetTextString() + "'";
   74|      0|            case Type::OpCode:
   75|      0|                return "Token[OpCode]" + pos_info + ": '" + GetTextString() + "'";
   76|      0|            case Type::RegisterInt:
   77|      0|                return "Token[RegisterInt]" + pos_info + ": '" + GetTextString() + "'";
   78|      0|            case Type::RegisterFloat:
   79|      0|                return "Token[RegisterFloat]" + pos_info + ": '" + GetTextString() + "'";
   80|      0|            case Type::RegisterStatus:
   81|      0|                return "Token[RegisterStatus]" + pos_info + ": '" + GetTextString() + "'";
   82|      0|            case Type::LabelIdentifier:
   83|      0|                return "Token[LabelIdentifier]" + pos_info + ": '" + GetTextString() + "'";
   84|      0|            case Type::NewLine:
   85|      0|                return "Token[NewLine]" + pos_info;
   86|      0|            case Type::OpenBracket:
   87|      0|                return "Token[OpenBracket]" + pos_info;
   88|      0|            case Type::ClosingBracket:
   89|      0|                return "Token[ClosingBracket]" + pos_info;
   90|      0|            case Type::IntegerLiteral:
   91|      0|                return "Token[IntegerLiteral]" + pos_info + ": '" + GetTextString() + "'";
   92|      0|            case Type::ImmediateInteger:
   93|      0|                return "Token[ImmediateInteger]" + pos_info + ": " + GetTextString() + "'";
   94|      0|            case Type::Unknown:
   95|      0|                return "Token[Unknown]" + pos_info;
   96|      0|            default:
   97|      0|                PHI_ASSERT_NOT_REACHED();
   98|      0|                return "Token[NotFound]" + pos_info;
   99|      0|        }
  100|      0|    }
  101|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/MemoryBlock.cpp:
    1|       |#include "DLX/MemoryBlock.hpp"
    2|       |#include "Phi/Core/Boolean.hpp"
    3|       |#include "Phi/Core/Log.hpp"
    4|       |#include <cstdint>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    MemoryBlock::MemoryBlock(phi::usize start_address, phi::usize starting_size)
    9|       |        : m_StartingAddress(start_address)
   10|  14.1k|    {
   11|  14.1k|        m_Values.resize(starting_size.get());
   12|  14.1k|    }
   13|       |
   14|       |    std::optional<phi::i8> MemoryBlock::LoadByte(phi::usize address) const
   15|      1|    {
   16|      1|        if (!IsAddressValid(address, 1u))
   17|      0|        {
   18|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   19|      0|            return {};
   20|      0|        }
   21|      1|
   22|      1|        return m_Values.at((address - m_StartingAddress).get()).signed_value;
   23|      1|    }
   24|       |
   25|       |    std::optional<phi::u8> MemoryBlock::LoadUnsignedByte(phi::usize address) const
   26|      2|    {
   27|      2|        if (!IsAddressValid(address, 1u))
   28|      0|        {
   29|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   30|      0|            return {};
   31|      0|        }
   32|      2|
   33|      2|        return m_Values.at((address - m_StartingAddress).get()).unsigned_value;
   34|      2|    }
   35|       |
   36|       |    std::optional<phi::i16> MemoryBlock::LoadHalfWord(phi::usize address) const
   37|      2|    {
   38|      2|        if (!IsAddressValid(address, 2u))
   39|      0|        {
   40|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   41|      0|            return {};
   42|      0|        }
   43|      2|
   44|      2|        phi::usize   start_address = address - m_StartingAddress;
   45|      2|        std::int8_t  first_byte    = m_Values.at(start_address.get()).signed_value;
   46|      2|        std::int8_t  second_byte   = m_Values.at((start_address + 1u).get()).signed_value;
   47|      2|        std::int16_t result        = first_byte << 8 | second_byte;
   48|      2|
   49|      2|        return result;
   50|      2|    }
   51|       |
   52|       |    std::optional<phi::u16> MemoryBlock::LoadUnsignedHalfWord(phi::usize address) const
   53|      2|    {
   54|      2|        if (!IsAddressValid(address, 2u))
   55|      0|        {
   56|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   57|      0|            return {};
   58|      0|        }
   59|      2|
   60|      2|        phi::usize    start_address = address - m_StartingAddress;
   61|      2|        std::uint8_t  first_byte    = m_Values.at(start_address.get()).unsigned_value;
   62|      2|        std::uint8_t  second_byte   = m_Values.at((start_address + 1u).get()).unsigned_value;
   63|      2|        std::uint16_t result        = first_byte << 8 | second_byte;
   64|      2|
   65|      2|        return result;
   66|      2|    }
   67|       |
   68|       |    std::optional<phi::i32> MemoryBlock::LoadWord(phi::usize address) const
   69|  5.03k|    {
   70|  5.03k|        if (!IsAddressValid(address, 4u))
   71|      2|        {
   72|      2|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   73|      2|            return {};
   74|      2|        }
   75|  5.03k|
   76|  5.03k|        phi::usize   start_address = address - m_StartingAddress;
   77|  5.03k|        std::int8_t  first_byte    = m_Values.at(start_address.get()).signed_value;
   78|  5.03k|        std::int8_t  second_byte   = m_Values.at((start_address + 1u).get()).signed_value;
   79|  5.03k|        std::int8_t  third_byte    = m_Values.at((start_address + 2u).get()).signed_value;
   80|  5.03k|        std::int8_t  fourth_byte   = m_Values.at((start_address + 3u).get()).signed_value;
   81|  5.03k|        std::int32_t result = first_byte << 24 | second_byte << 16 | third_byte << 8 | fourth_byte;
   82|  5.03k|
   83|  5.03k|        return result;
   84|  5.03k|    }
   85|       |
   86|       |    std::optional<phi::u32> MemoryBlock::LoadUnsignedWord(phi::usize address) const
   87|      2|    {
   88|      2|        if (!IsAddressValid(address, 4u))
   89|      0|        {
   90|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   91|      0|            return {};
   92|      0|        }
   93|      2|
   94|      2|        phi::usize    start_address = address - m_StartingAddress;
   95|      2|        std::uint8_t  first_byte    = m_Values.at(start_address.get()).unsigned_value;
   96|      2|        std::uint8_t  second_byte   = m_Values.at((start_address + 1u).get()).unsigned_value;
   97|      2|        std::uint8_t  third_byte    = m_Values.at((start_address + 2u).get()).unsigned_value;
   98|      2|        std::uint8_t  fourth_byte   = m_Values.at((start_address + 3u).get()).unsigned_value;
   99|      2|        std::uint32_t result = first_byte << 24 | second_byte << 16 | third_byte << 8 | fourth_byte;
  100|      2|
  101|      2|        return result;
  102|      2|    }
  103|       |
  104|       |    std::optional<phi::f32> MemoryBlock::LoadFloat(phi::usize address) const
  105|      0|    {
  106|      0|        if (!IsAddressValid(address, 4u))
  107|      0|        {
  108|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  109|      0|            return {};
  110|      0|        }
  111|      0|
  112|      0|        phi::usize    start_address = address - m_StartingAddress;
  113|      0|        std::uint8_t  first_byte    = m_Values.at(start_address.get()).unsigned_value;
  114|      0|        std::uint8_t  second_byte   = m_Values.at((start_address + 1u).get()).unsigned_value;
  115|      0|        std::uint8_t  third_byte    = m_Values.at((start_address + 2u).get()).unsigned_value;
  116|      0|        std::uint8_t  fourth_byte   = m_Values.at((start_address + 3u).get()).unsigned_value;
  117|      0|        std::uint32_t result = first_byte << 24 | second_byte << 16 | third_byte << 8 | fourth_byte;
  118|      0|
  119|      0|        return *reinterpret_cast<float*>(&result);
  120|      0|    }
  121|       |
  122|       |    std::optional<phi::f64> MemoryBlock::LoadDouble(phi::usize address) const
  123|      0|    {
  124|      0|        if (!IsAddressValid(address, 8u))
  125|      0|        {
  126|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  127|      0|            return {};
  128|      0|        }
  129|      0|
  130|      0|        phi::f32 first_value  = LoadFloat(address).value();
  131|      0|        phi::f32 second_value = LoadFloat(address + 4u).value();
  132|      0|
  133|      0|        std::uint32_t first_bits  = *reinterpret_cast<std::uint32_t*>(&first_value);
  134|      0|        std::uint32_t second_bits = *reinterpret_cast<std::uint32_t*>(&second_value);
  135|      0|
  136|      0|        std::uint64_t final_bits = (static_cast<std::uint64_t>(second_bits) << 32u) | first_bits;
  137|      0|
  138|      0|        return *reinterpret_cast<double*>(&final_bits);
  139|      0|    }
  140|       |
  141|       |    phi::Boolean MemoryBlock::StoreByte(phi::usize address, phi::i8 value)
  142|      4|    {
  143|      4|        if (!IsAddressValid(address, 1u))
  144|      2|        {
  145|      2|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  146|      2|            return false;
  147|      2|        }
  148|      2|
  149|      2|        m_Values.at((address - m_StartingAddress).get()).signed_value = value.get();
  150|      2|        return true;
  151|      2|    }
  152|       |
  153|       |    phi::Boolean MemoryBlock::StoreUnsignedByte(phi::usize address, phi::u8 value)
  154|      2|    {
  155|      2|        if (!IsAddressValid(address, 1u))
  156|      0|        {
  157|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  158|      0|            return false;
  159|      0|        }
  160|      2|
  161|      2|        m_Values.at((address - m_StartingAddress).get()).unsigned_value = value.get();
  162|      2|        return true;
  163|      2|    }
  164|       |
  165|       |    phi::Boolean MemoryBlock::StoreHalfWord(phi::usize address, phi::i16 value)
  166|      2|    {
  167|      2|        if (!IsAddressValid(address, 2u))
  168|      0|        {
  169|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  170|      0|            return false;
  171|      0|        }
  172|      2|
  173|      2|        phi::usize  start_address = address - m_StartingAddress;
  174|      2|        std::int8_t first_byte    = (value.get() & 0b11111111'00000000) >> 8;
  175|      2|        std::int8_t second_byte   = value.get() & 0b00000000'11111111;
  176|      2|
  177|      2|        m_Values.at(start_address.get()).signed_value        = first_byte;
  178|      2|        m_Values.at((start_address + 1u).get()).signed_value = second_byte;
  179|      2|
  180|      2|        return true;
  181|      2|    }
  182|       |
  183|       |    phi::Boolean MemoryBlock::StoreUnsignedHalfWord(phi::usize address, phi::u16 value)
  184|      2|    {
  185|      2|        if (!IsAddressValid(address, 2u))
  186|      0|        {
  187|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  188|      0|            return false;
  189|      0|        }
  190|      2|
  191|      2|        phi::usize   start_address = address - m_StartingAddress;
  192|      2|        std::uint8_t first_byte    = (value.get() & 0b11111111'00000000) >> 8;
  193|      2|        std::uint8_t second_byte   = value.get() & 0b00000000'11111111;
  194|      2|
  195|      2|        m_Values.at(start_address.get()).unsigned_value        = first_byte;
  196|      2|        m_Values.at((start_address + 1u).get()).unsigned_value = second_byte;
  197|      2|
  198|      2|        return true;
  199|      2|    }
  200|       |
  201|       |    phi::Boolean MemoryBlock::StoreWord(phi::usize address, phi::i32 value)
  202|     11|    {
  203|     11|        if (!IsAddressValid(address, 4u))
  204|      2|        {
  205|      2|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  206|      2|            return false;
  207|      2|        }
  208|      9|
  209|      9|        phi::usize  start_address = address - m_StartingAddress;
  210|      9|        std::int8_t first_byte    = (value.get() & 0b11111111'00000000'00000000'00000000) >> 24;
  211|      9|        std::int8_t second_byte   = (value.get() & 0b00000000'11111111'00000000'00000000) >> 16;
  212|      9|        std::int8_t third_byte    = (value.get() & 0b00000000'00000000'11111111'00000000) >> 8;
  213|      9|        std::int8_t fourth_byte   = value.get() & 0b00000000'00000000'00000000'11111111;
  214|      9|
  215|      9|        m_Values.at(start_address.get()).signed_value        = first_byte;
  216|      9|        m_Values.at((start_address + 1u).get()).signed_value = second_byte;
  217|      9|        m_Values.at((start_address + 2u).get()).signed_value = third_byte;
  218|      9|        m_Values.at((start_address + 3u).get()).signed_value = fourth_byte;
  219|      9|
  220|      9|        return true;
  221|      9|    }
  222|       |
  223|       |    phi::Boolean MemoryBlock::StoreUnsignedWord(phi::usize address, phi::u32 value)
  224|      2|    {
  225|      2|        if (!IsAddressValid(address, 4u))
  226|      0|        {
  227|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  228|      0|            return false;
  229|      0|        }
  230|      2|
  231|      2|        phi::usize   start_address = address - m_StartingAddress;
  232|      2|        std::uint8_t first_byte    = (value.get() & 0b11111111'00000000'00000000'00000000) >> 24;
  233|      2|        std::uint8_t second_byte   = (value.get() & 0b00000000'11111111'00000000'00000000) >> 16;
  234|      2|        std::uint8_t third_byte    = (value.get() & 0b00000000'00000000'11111111'00000000) >> 8;
  235|      2|        std::uint8_t fourth_byte   = value.get() & 0b00000000'00000000'00000000'11111111;
  236|      2|
  237|      2|        m_Values.at(start_address.get()).unsigned_value        = first_byte;
  238|      2|        m_Values.at((start_address + 1u).get()).unsigned_value = second_byte;
  239|      2|        m_Values.at((start_address + 2u).get()).unsigned_value = third_byte;
  240|      2|        m_Values.at((start_address + 3u).get()).unsigned_value = fourth_byte;
  241|      2|
  242|      2|        return true;
  243|      2|    }
  244|       |
  245|       |    phi::Boolean MemoryBlock::StoreFloat(phi::usize address, phi::f32 value)
  246|      0|    {
  247|      0|        if (!IsAddressValid(address, 4u))
  248|      0|        {
  249|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  250|      0|            return false;
  251|      0|        }
  252|      0|
  253|      0|        float         value_raw  = value.get();
  254|      0|        std::uint32_t value_bits = *reinterpret_cast<std::uint32_t*>(&value_raw);
  255|      0|
  256|      0|        phi::usize   start_address = address - m_StartingAddress;
  257|      0|        std::uint8_t first_byte    = (value_bits & 0b11111111'00000000'00000000'00000000) >> 24;
  258|      0|        std::uint8_t second_byte   = (value_bits & 0b00000000'11111111'00000000'00000000) >> 16;
  259|      0|        std::uint8_t third_byte    = (value_bits & 0b00000000'00000000'11111111'00000000) >> 8;
  260|      0|        std::uint8_t fourth_byte   = value_bits & 0b00000000'00000000'00000000'11111111;
  261|      0|
  262|      0|        m_Values.at(start_address.get()).unsigned_value        = first_byte;
  263|      0|        m_Values.at((start_address + 1u).get()).unsigned_value = second_byte;
  264|      0|        m_Values.at((start_address + 2u).get()).unsigned_value = third_byte;
  265|      0|        m_Values.at((start_address + 3u).get()).unsigned_value = fourth_byte;
  266|      0|
  267|      0|        return true;
  268|      0|    }
  269|       |
  270|       |    phi::Boolean MemoryBlock::StoreDouble(phi::usize address, phi::f64 value)
  271|      0|    {
  272|      0|        if (!IsAddressValid(address, 8u))
  273|      0|        {
  274|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  275|      0|            return false;
  276|      0|        }
  277|      0|
  278|      0|        double value_raw = value.get();
  279|      0|
  280|      0|        std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  281|      0|
  282|      0|        std::uint32_t first_bits = value_bits & 0xFFFFFFFF;
  283|      0|        std::uint32_t last_bits  = value_bits >> 32;
  284|      0|
  285|      0|        float first_value = *reinterpret_cast<float*>(&first_bits);
  286|      0|        float last_value  = *reinterpret_cast<float*>(&last_bits);
  287|      0|
  288|      0|        StoreFloat(address, first_value);
  289|      0|        StoreFloat(address + 4u, last_value);
  290|      0|
  291|      0|        return true;
  292|      0|    }
  293|       |
  294|       |    phi::Boolean MemoryBlock::IsAddressValid(phi::usize address, phi::usize size) const
  295|  5.06k|    {
  296|  5.06k|        return address >= m_StartingAddress &&
  297|  5.06k|               (address + size) <= (m_StartingAddress + m_Values.size());
  298|  5.06k|    }
  299|       |
  300|       |    void MemoryBlock::Clear()
  301|  14.1k|    {
  302|  14.1k|        for (auto& val : m_Values)
  303|  14.1M|        {
  304|  14.1M|            val.signed_value = 0;
  305|  14.1M|        }
  306|  14.1k|    }
  307|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Instruction.cpp:
    1|       |#include "DLX/Instruction.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include <Phi/Core/Assert.hpp>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    Instruction::Instruction(const InstructionInfo& info)
    9|       |        : m_Info(info)
   10|  73.0k|    {}
   11|       |
   12|       |    void Instruction::SetArgument(phi::u8 argument_number, InstructionArg argument)
   13|   146k|    {
   14|   146k|        PHI_ASSERT(argument_number < 3u);
   15|   146k|
   16|   146k|        switch (argument_number.get())
   17|   146k|        {
   18|  58.0k|            case 0u:
   19|  58.0k|                m_Arg1 = argument;
   20|  58.0k|                break;
   21|  52.3k|            case 1u:
   22|  52.3k|                m_Arg2 = argument;
   23|  52.3k|                break;
   24|  36.1k|            case 2u:
   25|  36.1k|                m_Arg3 = argument;
   26|  36.1k|                break;
   27|      0|            default:
   28|      0|                PHI_ASSERT_NOT_REACHED();
   29|   146k|        }
   30|   146k|    }
   31|       |
   32|       |    std::string Instruction::DebugInfo() const noexcept
   33|      0|    {
   34|      0|        return std::string("Instruction");
   35|      0|    }
   36|       |
   37|       |    void Instruction::Execute(Processor& processor) const noexcept
   38|   130k|    {
   39|   130k|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   40|   130k|    }
   41|       |
   42|       |    const InstructionInfo& Instruction::GetInfo() const
   43|   130k|    {
   44|   130k|        return m_Info;
   45|   130k|    }
   46|       |
   47|       |    const InstructionArg& Instruction::GetArg1() const
   48|      0|    {
   49|      0|        return m_Arg1;
   50|      0|    }
   51|       |
   52|       |    const InstructionArg& Instruction::GetArg2() const
   53|      0|    {
   54|      0|        return m_Arg2;
   55|      0|    }
   56|       |
   57|       |    const InstructionArg& Instruction::GetArg3() const
   58|      0|    {
   59|      0|        return m_Arg3;
   60|      0|    }
   61|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Parser.cpp:
    1|       |#include "DLX/Parser.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/OpCode.hpp"
    5|       |#include "DLX/ParserUtils.hpp"
    6|       |#include "DLX/RegisterNames.hpp"
    7|       |#include "DLX/Token.hpp"
    8|       |#include <Phi/Config/FunctionLikeMacro.hpp>
    9|       |#include <Phi/Core/Assert.hpp>
   10|       |#include <Phi/Core/Conversion.hpp>
   11|       |#include <Phi/Core/Log.hpp>
   12|       |#include <magic_enum.hpp>
   13|       |#include <algorithm>
   14|       |#include <limits>
   15|       |#include <optional>
   16|       |#include <regex>
   17|       |#include <stdexcept>
   18|       |
   19|       |using namespace phi::literals;
   20|       |
   21|       |namespace dlx
   22|       |{
   23|       |    Token ParseToken(std::string_view token, phi::u64 line_number, phi::u64 column)
   24|  1.21M|    {
   25|  1.21M|        // TODO: Parse the given number here directly?
   26|  1.21M|        if (token.at(0) == '#' && token.size() > 1)
   27|  38.5k|        {
   28|  38.5k|            return Token(Token::Type::ImmediateInteger, token, line_number, column);
   29|  38.5k|        }
   30|  1.18M|
   31|  1.18M|        if (token.at(0) == '/' || token.at(0) == ';')
   32|  11.8k|        {
   33|  11.8k|            return Token(Token::Type::Comment, token, line_number, column);
   34|  11.8k|        }
   35|  1.16M|
   36|  1.16M|        if (auto number = ParseNumber(token); number.has_value())
   37|  19.8k|        {
   38|  19.8k|            return Token(Token::Type::IntegerLiteral, token, line_number, column, number->get());
   39|  19.8k|        }
   40|  1.14M|
   41|  1.14M|        std::string token_upper(token.data(), token.size());
   42|  1.14M|        std::transform(token_upper.begin(), token_upper.end(), token_upper.begin(), ::toupper);
   43|  1.14M|
   44|  1.14M|        if (token_upper == "FPSR")
   45|      0|        {
   46|      0|            return Token(Token::Type::RegisterStatus, token, line_number, column);
   47|      0|        }
   48|  1.14M|
   49|  1.14M|        if (IntRegisterID id = StringToIntRegister(token_upper); id != IntRegisterID::None)
   50|   171k|        {
   51|   171k|            return Token(Token::Type::RegisterInt, token, line_number, column,
   52|   171k|                         static_cast<std::uint32_t>(id));
   53|   171k|        }
   54|   976k|
   55|   976k|        if (FloatRegisterID id = StringToFloatRegister(token_upper); id != FloatRegisterID::None)
   56|    425|        {
   57|    425|            return Token(Token::Type::RegisterFloat, token, line_number, column,
   58|    425|                         static_cast<std::uint32_t>(id));
   59|    425|        }
   60|   976k|
   61|   976k|        if (OpCode opcode = StringToOpCode(token_upper); opcode != OpCode::NONE)
   62|  74.2k|        {
   63|  74.2k|            return Token(Token::Type::OpCode, token, line_number, column,
   64|  74.2k|                         static_cast<std::uint32_t>(opcode));
   65|  74.2k|        }
   66|   902k|
   67|   902k|        return Token(Token::Type::LabelIdentifier, token, line_number, column);
   68|   902k|    }
   69|       |
   70|       |    std::vector<Token> Parser::Tokenize(std::string_view source)
   71|  14.1k|    {
   72|  14.1k|        std::vector<Token> tokens{};
   73|  14.1k|        tokens.reserve(5);
   74|  14.1k|
   75|  14.1k|        std::string current_token;
   76|  14.1k|        current_token.reserve(10);
   77|  14.1k|
   78|  14.1k|        phi::u64 current_line_number{1u};
   79|  14.1k|        phi::u64 current_column{1u};
   80|  14.1k|        phi::u64 token_begin{0u};
   81|  14.1k|
   82|  14.1k|        phi::Boolean parsing_comment{false};
   83|  14.1k|
   84|  20.5M|        for (phi::usize i{0u}; i < source.length(); ++i)
   85|  20.5M|        {
   86|  20.5M|            const char c{source.at(i.get())};
   87|  20.5M|
   88|  20.5M|            if (c == '\n')
   89|   214k|            {
   90|   214k|                if (current_token.empty())
   91|  60.9k|                {
   92|  60.9k|                    // Skip empty lines
   93|  60.9k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(token_begin.get(), 1),
   94|  60.9k|                                        current_line_number, current_column - 1u);
   95|  60.9k|
   96|  60.9k|                    parsing_comment = false;
   97|  60.9k|                    current_line_number += 1u;
   98|  60.9k|                    current_column = 1u;
   99|  60.9k|                    continue;
  100|  60.9k|                }
  101|   153k|
  102|   153k|                // Otherwise a new line separates tokens
  103|   153k|                tokens.emplace_back(
  104|   153k|                        ParseToken(source.substr(token_begin.get(), current_token.length()),
  105|   153k|                                   current_line_number, current_column - current_token.length()));
  106|   153k|
  107|   153k|                token_begin = i;
  108|   153k|
  109|   153k|                tokens.emplace_back(Token::Type::NewLine, source.substr(token_begin.get(), 1),
  110|   153k|                                    current_line_number, current_column - 1u);
  111|   153k|
  112|   153k|                current_token.clear();
  113|   153k|                parsing_comment = false;
  114|   153k|                current_line_number += 1u;
  115|   153k|                current_column = 0u;
  116|   153k|            }
  117|  20.3M|            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  118|  20.3M|            else if (c == '/' || c == ';')
  119|   313k|            {
  120|   313k|                if (current_token.empty())
  121|  11.8k|                {
  122|  11.8k|                    token_begin = i;
  123|  11.8k|                }
  124|   313k|
  125|   313k|                parsing_comment = true;
  126|   313k|                current_token.push_back(c);
  127|   313k|            }
  128|  20.0M|            else if (parsing_comment)
  129|  10.1M|            {
  130|  10.1M|                // simply append the character
  131|  10.1M|                current_token.push_back(c);
  132|  10.1M|            }
  133|  9.93M|            else
  134|  9.93M|            {
  135|  9.93M|                // Not parsing a comment
  136|  9.93M|
  137|  9.93M|                switch (c)
  138|  9.93M|                {
  139|  1.32M|                    case ' ':
  140|  1.32M|                    case '\t':
  141|  1.32M|                    case '\v':
  142|  1.32M|                        if (current_token.empty())
  143|   948k|                        {
  144|   948k|                            current_column += 1u;
  145|   948k|                            // We haven't found any usable character for the current token so just skip the whitespace.
  146|   948k|                            continue;
  147|   948k|                        }
  148|   373k|
  149|   373k|                        // Otherwise a whitespace separates tokens
  150|   373k|                        tokens.emplace_back(ParseToken(
  151|   373k|                                source.substr(token_begin.get(), current_token.length()),
  152|   373k|                                current_line_number, current_column - current_token.length()));
  153|   373k|                        current_token.clear();
  154|   373k|                        break;
  155|   643k|                    case ':':
  156|   643k|                        // Need to parse label names together with their colon
  157|   643k|                        if (!current_token.empty())
  158|   569k|                        {
  159|   569k|                            current_token.push_back(c);
  160|   569k|                            tokens.emplace_back(ParseToken(
  161|   569k|                                    source.substr(token_begin.get(), current_token.length()),
  162|   569k|                                    current_line_number,
  163|   569k|                                    current_column + 1u - current_token.length()));
  164|   569k|
  165|   569k|                            current_token.clear();
  166|   569k|                        }
  167|  73.7k|                        else
  168|  73.7k|                        {
  169|  73.7k|                            // Orphan colon
  170|  73.7k|                            token_begin = i;
  171|  73.7k|
  172|  73.7k|                            tokens.emplace_back(Token::Type::Colon,
  173|  73.7k|                                                source.substr(token_begin.get(), 1),
  174|  73.7k|                                                current_line_number, current_column);
  175|  73.7k|                        }
  176|   643k|                        break;
  177|   373k|                    case ',':
  178|   170k|                    case '(':
  179|   170k|                    case ')':
  180|   170k|                        if (!current_token.empty())
  181|   112k|                        {
  182|   112k|                            tokens.emplace_back(ParseToken(
  183|   112k|                                    source.substr(token_begin.get(), current_token.length()),
  184|   112k|                                    current_line_number, current_column - current_token.length()));
  185|   112k|
  186|   112k|                            current_token.clear();
  187|   112k|                        }
  188|   170k|
  189|   170k|                        Token::Type type;
  190|   170k|                        switch (c)
  191|   170k|                        {
  192|  88.3k|                            case ',':
  193|  88.3k|                                type = Token::Type::Comma;
  194|  88.3k|                                break;
  195|  35.1k|                            case '(':
  196|  35.1k|                                type = Token::Type::OpenBracket;
  197|  35.1k|                                break;
  198|  46.9k|                            case ')':
  199|  46.9k|                                type = Token::Type::ClosingBracket;
  200|  46.9k|                                break;
  201|      0|                            default:
  202|      0|                                PHI_ASSERT_NOT_REACHED();
  203|      0|                                break;
  204|   170k|                        }
  205|   170k|
  206|   170k|                        token_begin = i;
  207|   170k|
  208|   170k|                        tokens.emplace_back(type, source.substr(token_begin.get(), 1),
  209|   170k|                                            current_line_number, current_column);
  210|   170k|                        break;
  211|   170k|
  212|  7.80M|                    default:
  213|  7.80M|                        if (current_token.empty())
  214|  1.20M|                        {
  215|  1.20M|                            token_begin = i;
  216|  1.20M|                        }
  217|  7.80M|
  218|  7.80M|                        // simply append the character
  219|  7.80M|                        current_token.push_back(c);
  220|  9.93M|                }
  221|  9.93M|            }
  222|  20.5M|
  223|  20.5M|            current_column += 1u;
  224|  19.5M|        }
  225|  14.1k|
  226|  14.1k|        // Checked the entire string. Parse whats left if anything
  227|  14.1k|        if (!current_token.empty())
  228|  9.64k|        {
  229|  9.64k|            tokens.emplace_back(ParseToken(source.substr(token_begin.get(), current_token.length()),
  230|  9.64k|                                           current_line_number,
  231|  9.64k|                                           current_column - current_token.length()));
  232|  9.64k|        }
  233|  14.1k|
  234|  14.1k|        return tokens;
  235|  14.1k|    }
  236|       |
  237|       |    static phi::Boolean has_x_more_tokens(const std::vector<Token>& tokens, phi::usize index,
  238|       |                                          phi::u64 x)
  239|   190k|    {
  240|   190k|        return index + x <= tokens.size();
  241|   190k|    }
  242|       |
  243|       |    static phi::Boolean has_one_more_token(const std::vector<Token>& tokens, phi::usize index)
  244|   184k|    {
  245|   184k|        return has_x_more_tokens(tokens, index, 1u);
  246|   184k|    }
  247|       |
  248|       |    static phi::Boolean next_token_is(const std::vector<Token>& tokens, phi::usize index,
  249|       |                                      Token::Type token_type)
  250|      0|    {
  251|      0|        PHI_ASSERT(has_one_more_token(tokens, index));
  252|      0|
  253|      0|        const auto& next_token = tokens.at((index + 1u).get());
  254|      0|
  255|      0|        return next_token.GetType() == token_type;
  256|      0|    }
  257|       |
  258|       |    static phi::Boolean has_one_more_token_of_type(const std::vector<Token>& tokens,
  259|       |                                                   phi::usize index, Token::Type token_type)
  260|      0|    {
  261|      0|        if (!has_one_more_token(tokens, index))
  262|      0|        {
  263|      0|            return false;
  264|      0|        }
  265|      0|
  266|      0|        return (next_token_is(tokens, index, token_type));
  267|      0|    }
  268|       |
  269|       |    static void AddParseError(ParsedProgram& program, const std::string& message)
  270|   656k|    {
  271|   656k|        ParseError err;
  272|   656k|        err.message = message;
  273|   656k|
  274|   656k|        //PHI_LOG_ERROR("Parsing error: {}", message);
  275|   656k|
  276|   656k|        program.m_ParseErrors.emplace_back(err);
  277|   656k|    }
  278|       |
  279|       |    static std::optional<InstructionArg> parse_instruction_argument(
  280|       |            const Token& token, ArgumentType expected_argument_type,
  281|       |            const std::vector<Token>& tokens, phi::usize& index, ParsedProgram& program)
  282|   166k|    {
  283|   166k|        // PHI_LOG_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
  284|   166k|        //              magic_enum::enum_name(expected_argument_type));
  285|   166k|
  286|   166k|        switch (token.GetType())
  287|   166k|        {
  288|  7.01k|            case Token::Type::IntegerLiteral: {
  289|  7.01k|                if (!ArgumentTypeIncludes(expected_argument_type,
  290|  7.01k|                                          ArgumentType::AddressDisplacement))
  291|    682|                {
  292|    682|                    AddParseError(program,
  293|    682|                                  fmt::format("Expected {} but got address displacement",
  294|    682|                                              magic_enum::enum_name(expected_argument_type)));
  295|    682|                    return {};
  296|    682|                }
  297|  6.33k|
  298|  6.33k|                // Parse address displacement
  299|  6.33k|                auto displacement_value = ParseNumber(token.GetText());
  300|  6.33k|                if (!displacement_value)
  301|      0|                {
  302|      0|                    AddParseError(program,
  303|      0|                                  "Failed to parse displacement value for Address displacement");
  304|      0|                    return {};
  305|      0|                }
  306|  6.33k|                std::int16_t value = displacement_value.value().get();
  307|  6.33k|
  308|  6.33k|                if (!has_x_more_tokens(tokens, index, 3u))
  309|    126|                {
  310|    126|                    AddParseError(program,
  311|    126|                                  "Not enough arguments left to parse address displacement");
  312|    126|                    return {};
  313|    126|                }
  314|  6.21k|
  315|  6.21k|                const Token& first_token  = tokens.at(index.get());
  316|  6.21k|                const Token& second_token = tokens.at((index + 1u).get());
  317|  6.21k|                const Token& third_token  = tokens.at((index + 2u).get());
  318|  6.21k|
  319|  6.21k|                if (first_token.GetType() != Token::Type::OpenBracket)
  320|    217|                {
  321|    217|                    AddParseError(program, "Expected open bracket");
  322|    217|                    return {};
  323|    217|                }
  324|  5.99k|
  325|  5.99k|                // Second token is the register
  326|  5.99k|                if (second_token.GetType() != Token::Type::RegisterInt)
  327|    317|                {
  328|    317|                    AddParseError(program, "Expected IntRegister");
  329|    317|                    return {};
  330|    317|                }
  331|  5.67k|
  332|  5.67k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  333|     56|                {
  334|     56|                    AddParseError(program, "Expected closing bracket");
  335|     56|                    return {};
  336|     56|                }
  337|  5.62k|
  338|  5.62k|                index += 3u;
  339|  5.62k|
  340|  5.62k|                //PHI_LOG_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
  341|  5.62k|                //             value, magic_enum::enum_name(reg_id));
  342|  5.62k|
  343|  5.62k|                return ConstructInstructionArgAddressDisplacement(
  344|  5.62k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
  345|  5.62k|            }
  346|   117k|            case Token::Type::RegisterInt: {
  347|   117k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  348|    809|                {
  349|    809|                    AddParseError(program,
  350|    809|                                  fmt::format("Got IntRegister but expected '{}'",
  351|    809|                                              magic_enum::enum_name(expected_argument_type)));
  352|    809|                    return {};
  353|    809|                }
  354|   116k|
  355|   116k|                //PHI_LOG_INFO("Parsed identifier as int register {}",
  356|   116k|                //             magic_enum::enum_name(reg_id));
  357|   116k|
  358|   116k|                return ConstructInstructionArgRegisterInt(
  359|   116k|                        static_cast<IntRegisterID>(token.GetHint()));
  360|   116k|            }
  361|   116k|            case Token::Type::RegisterFloat: {
  362|      6|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  363|      6|                {
  364|      6|                    AddParseError(program,
  365|      6|                                  fmt::format("Got FloatRegister but expected '{}'",
  366|      6|                                              magic_enum::enum_name(expected_argument_type)));
  367|      6|                    return {};
  368|      6|                }
  369|      0|
  370|      0|                //PHI_LOG_INFO("Parsed identifier as float register {}",
  371|      0|                //             magic_enum::enum_name(float_reg_id));
  372|      0|
  373|      0|                return ConstructInstructionArgRegisterFloat(
  374|      0|                        static_cast<FloatRegisterID>(token.GetHint()));
  375|      0|            }
  376|      0|            case Token::Type::RegisterStatus: {
  377|      0|            }
  378|  15.1k|            case Token::Type::LabelIdentifier: {
  379|  15.1k|                // Parse as Label
  380|  15.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  381|  12.9k|                {
  382|  12.9k|                    AddParseError(program,
  383|  12.9k|                                  fmt::format("Got Label but expected '{}'",
  384|  12.9k|                                              magic_enum::enum_name(expected_argument_type)));
  385|  12.9k|                    return {};
  386|  12.9k|                }
  387|  2.12k|
  388|  2.12k|                if (!IsValidIdentifier(token.GetText()))
  389|    317|                {
  390|    317|                    AddParseError(program, fmt::format("Invalid label identifier found {}",
  391|    317|                                                       token.GetText()));
  392|    317|                    return {};
  393|    317|                }
  394|  1.81k|
  395|  1.81k|                //PHI_LOG_INFO("Parsed Label identifier as '{}'", token.GetText());
  396|  1.81k|
  397|  1.81k|                return ConstructInstructionArgLabel(token.GetText());
  398|  1.81k|            }
  399|  24.3k|            case Token::Type::ImmediateInteger: {
  400|  24.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  401|    335|                {
  402|    335|                    AddParseError(program,
  403|    335|                                  fmt::format("Got ImmediateInteger but expected '{}'",
  404|    335|                                              magic_enum::enum_name(expected_argument_type)));
  405|    335|                    return {};
  406|    335|                }
  407|  24.0k|
  408|  24.0k|                auto parsed_value = ParseNumber(token.GetText().substr(1));
  409|  24.0k|                if (!parsed_value)
  410|  1.24k|                {
  411|  1.24k|                    AddParseError(program, "Failed to parse immediate Integer value");
  412|  1.24k|                    return {};
  413|  1.24k|                }
  414|  22.7k|
  415|  22.7k|                //PHI_LOG_INFO("Parsed Immediate Integer with value {}", parsed_value.value().get());
  416|  22.7k|
  417|  22.7k|                return ConstructInstructionArgImmediateValue(parsed_value.value().get());
  418|  22.7k|            }
  419|  22.7k|            default:
  420|  2.94k|                AddParseError(program,
  421|  2.94k|                              fmt::format("Unexpected token of type '{}'", token.GetTypeName()));
  422|  2.94k|                return {};
  423|   166k|        }
  424|   166k|    }
  425|       |
  426|       |    static void consume_x_tokens(phi::usize& index, phi::usize x)
  427|  1.66M|    {
  428|  1.66M|        index += x;
  429|  1.66M|    }
  430|       |
  431|       |    static void consume_current_token(phi::usize& index)
  432|  1.66M|    {
  433|  1.66M|        consume_x_tokens(index, 1u);
  434|  1.66M|    }
  435|       |
  436|       |    ParsedProgram Parser::Parse(const InstructionLibrary& lib, std::vector<Token>& tokens)
  437|  14.1k|    {
  438|  14.1k|        ParsedProgram program;
  439|  14.1k|
  440|  14.1k|        program.m_Tokens = tokens;
  441|  14.1k|
  442|  14.1k|        phi::Boolean line_has_instruction{false};
  443|  14.1k|
  444|  1.49M|        for (phi::usize index{0u}; index < tokens.size();)
  445|  1.47M|        {
  446|  1.47M|            Token& current_token = tokens.at(index.get());
  447|  1.47M|
  448|  1.47M|            consume_current_token(index);
  449|  1.47M|
  450|  1.47M|            //PHI_LOG_INFO("Parsing '{}'", current_token.DebugInfo());
  451|  1.47M|
  452|  1.47M|            switch (current_token.GetType())
  453|  1.47M|            {
  454|      0|                // Ignore comments
  455|  11.7k|                case Token::Type::Comment:
  456|  11.7k|                    //PHI_LOG_DEBUG("Ignoring comment");
  457|  11.7k|                    break;
  458|   212k|                case Token::Type::NewLine:
  459|   212k|                    //PHI_LOG_DEBUG("Ignoring newline");
  460|   212k|                    line_has_instruction = false;
  461|   212k|                    break;
  462|   887k|                case Token::Type::LabelIdentifier: {
  463|   887k|                    if (line_has_instruction)
  464|  1.44k|                    {
  465|  1.44k|                        AddParseError(program, "Expected new line but got label identifer");
  466|  1.44k|                        break;
  467|  1.44k|                    }
  468|   885k|
  469|   885k|                    // Handle jump labels
  470|   885k|                    // Check if the last character of the identifier is a colon
  471|   885k|                    if (current_token.GetText().at(current_token.GetText().size() - 1) == ':')
  472|   565k|                    {
  473|   565k|                        std::string_view label_name = current_token.GetText().substr(
  474|   565k|                                0, current_token.GetText().size() - 1);
  475|   565k|
  476|   565k|                        program.m_JumpData[label_name] =
  477|   565k|                                static_cast<std::uint32_t>(program.m_Instructions.size());
  478|   565k|
  479|   565k|                        //PHI_LOG_INFO("Added jump label {} -> {}", label_name,
  480|   565k|                        //             program.m_Instructions.size());
  481|   565k|                    }
  482|   320k|                    else
  483|   320k|                    {
  484|   320k|                        AddParseError(program, "Label identifier is missing a colon");
  485|   320k|                    }
  486|   885k|
  487|   885k|                    break;
  488|   885k|                }
  489|   885k|                case Token::Type::OpCode: {
  490|  73.3k|                    if (line_has_instruction)
  491|    331|                    {
  492|    331|                        AddParseError(program, "Expected new line but got op code");
  493|    331|                        break;
  494|    331|                    }
  495|  73.0k|
  496|  73.0k|                    // Handle normal instructions
  497|  73.0k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  498|  73.0k|
  499|  73.0k|                    //PHI_LOG_INFO("Instruction opcode: {}", magic_enum::enum_name(opcode));
  500|  73.0k|
  501|  73.0k|                    const InstructionInfo& info = lib.LookUp(opcode);
  502|  73.0k|
  503|  73.0k|                    // Make sure we got no problems here
  504|  73.0k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  505|  73.0k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  506|  73.0k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  507|  73.0k|                    PHI_ASSERT(info.GetExecutor());
  508|  73.0k|
  509|  73.0k|                    phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  510|  73.0k|                    //PHI_LOG_INFO("Instruction requires {} arguments",
  511|  73.0k|                    //             number_of_argument_required.get());
  512|  73.0k|
  513|  73.0k|                    // Create instruction
  514|  73.0k|                    Instruction instruction(info);
  515|  73.0k|
  516|  73.0k|                    // Parse arguments
  517|   235k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  518|   184k|                    {
  519|   184k|                        // Get next token
  520|   184k|                        if (!has_one_more_token(tokens, index))
  521|    234|                        {
  522|    234|                            AddParseError(
  523|    234|                                    program,
  524|    234|                                    fmt::format("Missing {} arguments for instruction {}",
  525|    234|                                                (number_of_argument_required - argument_num).get(),
  526|    234|                                                magic_enum::enum_name(opcode)));
  527|    234|                            break;
  528|    234|                        }
  529|   183k|
  530|   183k|                        current_token = tokens.at(index.get());
  531|   183k|                        consume_current_token(index);
  532|   183k|
  533|   183k|                        // Skip commas
  534|   183k|                        if (current_token.GetType() == Token::Type::Comma)
  535|  15.5k|                        {
  536|  15.5k|                            //PHI_LOG_DEBUG("Skipping comma");
  537|  15.5k|                            continue;
  538|  15.5k|                        }
  539|   168k|
  540|   168k|                        if (current_token.GetType() == Token::Type::NewLine)
  541|  1.78k|                        {
  542|  1.78k|                            AddParseError(program, "Unexpected end of line");
  543|  1.78k|                            break;
  544|  1.78k|                        }
  545|   166k|
  546|   166k|                        std::optional<InstructionArg> optional_parsed_argument =
  547|   166k|                                parse_instruction_argument(current_token,
  548|   166k|                                                           info.GetArgumentType(argument_num),
  549|   166k|                                                           tokens, index, program);
  550|   166k|                        if (!optional_parsed_argument.has_value())
  551|  20.0k|                        {
  552|  20.0k|                            AddParseError(program, fmt::format("Failed to parse argument number {}",
  553|  20.0k|                                                               argument_num.get()));
  554|  20.0k|                            break;
  555|  20.0k|                        }
  556|   146k|
  557|   146k|                        // Successfully parsed one argument
  558|   146k|                        InstructionArg parsed_argument = optional_parsed_argument.value();
  559|   146k|
  560|   146k|                        instruction.SetArgument(argument_num, parsed_argument);
  561|   146k|                        argument_num++;
  562|   146k|
  563|   146k|                        //PHI_LOG_INFO("Successfully parsed argument {}", argument_num.get());
  564|   146k|                    }
  565|  73.0k|
  566|  73.0k|                    // Only add the instruction if we got no parsing errors
  567|  73.0k|                    if (program.m_ParseErrors.empty())
  568|  8.82k|                    {
  569|  8.82k|                        //PHI_LOG_INFO("Successfully parsed instruction '{}'",
  570|  8.82k|                        //            instruction.DebugInfo());
  571|  8.82k|                        program.m_Instructions.emplace_back(instruction);
  572|  8.82k|                        line_has_instruction = true;
  573|  8.82k|                    }
  574|  73.0k|                    break;
  575|  73.0k|                }
  576|  73.0k|
  577|   292k|                default:
  578|   292k|                    AddParseError(program, "Unexpected token");
  579|   292k|                    break;
  580|  1.47M|            }
  581|  1.47M|        }
  582|  14.1k|
  583|  14.1k|        return program;
  584|  14.1k|    }
  585|       |
  586|       |    ParsedProgram Parser::Parse(const InstructionLibrary& lib, std::string_view source)
  587|  14.1k|    {
  588|  14.1k|        std::vector<Token> tokens = Tokenize(source);
  589|  14.1k|        return Parse(lib, tokens);
  590|  14.1k|    }
  591|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/OpCode.cpp:
    1|       |#include "DLX/OpCode.hpp"
    2|       |
    3|       |#include <magic_enum.hpp>
    4|       |#include <algorithm>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    OpCode StringToOpCode(std::string_view token)
    9|   976k|    {
   10|   976k|        std::optional<OpCode> opcode_casted = magic_enum::enum_cast<OpCode>(token);
   11|   976k|        if (opcode_casted.has_value())
   12|  74.9k|        {
   13|  74.9k|            // TODO: Bit of a hacky way around magic_enum begin able to cast every member...
   14|  74.9k|            if (opcode_casted.value() == OpCode::NUMBER_OF_ELEMENTS)
   15|      5|            {
   16|      5|                return OpCode::NONE;
   17|      5|            }
   18|  74.9k|            return opcode_casted.value();
   19|  74.9k|        }
   20|   901k|
   21|   901k|        // None found
   22|   901k|        return OpCode::NONE;
   23|   901k|    }
   24|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionArg.cpp:
    1|       |#include "DLX/InstructionArg.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    InstructionArg::InstructionArg()
    6|       |        : m_Type(ArgumentType::None)
    7|       |        , address_displacement()
    8|   365k|    {}
    9|       |
   10|       |    ArgumentType InstructionArg::GetType() const
   11|   402k|    {
   12|   402k|        return m_Type;
   13|   402k|    }
   14|       |
   15|       |    std::string InstructionArg::DebugInfo() const
   16|      0|    {
   17|      0|        return "InstructionArgument";
   18|      0|    }
   19|       |
   20|       |    const InstructionArg::RegisterInt& InstructionArg::AsRegisterInt() const
   21|  87.1k|    {
   22|  87.1k|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   23|  87.1k|
   24|  87.1k|        return register_int;
   25|  87.1k|    }
   26|       |
   27|       |    const InstructionArg::RegisterFloat& InstructionArg::AsRegisterFloat() const
   28|      0|    {
   29|      0|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   30|      0|
   31|      0|        return register_float;
   32|      0|    }
   33|       |
   34|       |    const InstructionArg::ImmediateValue& InstructionArg::AsImmediateValue() const
   35|    365|    {
   36|    365|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   37|    365|
   38|    365|        return immediate_value;
   39|    365|    }
   40|       |
   41|       |    const InstructionArg::AddressDisplacement& InstructionArg::AsAddressDisplacement() const
   42|  5.04k|    {
   43|  5.04k|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
   44|  5.04k|
   45|  5.04k|        return address_displacement;
   46|  5.04k|    }
   47|       |
   48|       |    const InstructionArg::Label& InstructionArg::AsLabel() const
   49|  80.0k|    {
   50|  80.0k|        PHI_ASSERT(m_Type == ArgumentType::Label);
   51|  80.0k|
   52|  80.0k|        return label;
   53|  80.0k|    }
   54|       |
   55|       |    phi::Boolean operator==(const InstructionArg& lhs, const InstructionArg& rhs)
   56|      0|    {
   57|      0|        if (lhs.GetType() != rhs.GetType())
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|      0|
   62|      0|        switch (lhs.GetType())
   63|      0|        {
   64|      0|            case ArgumentType::AddressDisplacement:
   65|      0|                return (lhs.AsAddressDisplacement().displacement ==
   66|      0|                        rhs.AsAddressDisplacement().displacement) &&
   67|      0|                       (lhs.AsAddressDisplacement().register_id ==
   68|      0|                        rhs.AsAddressDisplacement().register_id);
   69|      0|            case ArgumentType::ImmediateInteger:
   70|      0|                return lhs.AsImmediateValue().signed_value == rhs.AsImmediateValue().signed_value;
   71|      0|            case ArgumentType::IntRegister:
   72|      0|                return lhs.AsRegisterInt().register_id == rhs.AsRegisterInt().register_id;
   73|      0|            case ArgumentType::FloatRegister:
   74|      0|                return lhs.AsRegisterFloat().register_id == rhs.AsRegisterFloat().register_id;
   75|      0|            case ArgumentType::Label:
   76|      0|                return lhs.AsLabel().label_name == rhs.AsLabel().label_name;
   77|      0|            case ArgumentType::None:
   78|      0|                return true;
   79|      0|            default:
   80|      0|                PHI_ASSERT_NOT_REACHED();
   81|      0|                break;
   82|      0|        }
   83|      0|
   84|      0|        PHI_ASSERT_NOT_REACHED();
   85|      0|        return false;
   86|      0|    }
   87|       |
   88|       |    phi::Boolean operator!=(const InstructionArg& lhs, const InstructionArg& rhs)
   89|      0|    {
   90|      0|        return !(lhs == rhs);
   91|      0|    }
   92|       |
   93|       |    InstructionArg ConstructInstructionArgRegisterInt(IntRegisterID id)
   94|   116k|    {
   95|   116k|        InstructionArg arg;
   96|   116k|        arg.m_Type                   = ArgumentType::IntRegister;
   97|   116k|        arg.register_int.register_id = id;
   98|   116k|        return arg;
   99|   116k|    }
  100|       |
  101|       |    InstructionArg ConstructInstructionArgRegisterFloat(FloatRegisterID id)
  102|      0|    {
  103|      0|        InstructionArg arg;
  104|      0|        arg.m_Type                     = ArgumentType::FloatRegister;
  105|      0|        arg.register_float.register_id = id;
  106|      0|        return arg;
  107|      0|    }
  108|       |
  109|       |    InstructionArg ConstructInstructionArgImmediateValue(std::int16_t value)
  110|  22.7k|    {
  111|  22.7k|        InstructionArg arg;
  112|  22.7k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  113|  22.7k|        arg.immediate_value.signed_value = value;
  114|  22.7k|        return arg;
  115|  22.7k|    }
  116|       |
  117|       |    InstructionArg ConstructInstructionArgAddressDisplacement(IntRegisterID id,
  118|       |                                                              phi::i32      displacement)
  119|  5.62k|    {
  120|  5.62k|        InstructionArg arg;
  121|  5.62k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  122|  5.62k|        arg.address_displacement.register_id  = id;
  123|  5.62k|        arg.address_displacement.displacement = displacement;
  124|  5.62k|        return arg;
  125|  5.62k|    }
  126|       |
  127|       |    InstructionArg ConstructInstructionArgLabel(std::string_view label_name)
  128|  1.81k|    {
  129|  1.81k|        InstructionArg arg;
  130|  1.81k|        arg.m_Type           = ArgumentType::Label;
  131|  1.81k|        arg.label.label_name = label_name;
  132|  1.81k|        return arg;
  133|  1.81k|    }
  134|       |} // namespace dlx

