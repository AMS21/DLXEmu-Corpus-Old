/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Token.cpp:
    1|       |#include "DLX/Token.hpp"
    2|       |#include "Phi/Core/Assert.hpp"
    3|       |
    4|       |#include <magic_enum.hpp>
    5|       |#include <string>
    6|       |
    7|       |namespace dlx
    8|       |{
    9|       |    Token::Token(Type type, std::string_view text, phi::u64 line_number, phi::u64 column,
   10|       |                 std::uint32_t hint) noexcept
   11|       |        : m_Type{type}
   12|       |        , m_Text{text}
   13|       |        , m_LineNumber{line_number}
   14|       |        , m_Column{column}
   15|       |        , m_Hint{hint}
   16|  18.2k|    {}
   17|       |
   18|       |    Token::Type Token::GetType() const noexcept
   19|  19.1k|    {
   20|  19.1k|        return m_Type;
   21|  19.1k|    }
   22|       |
   23|       |    std::string_view Token::GetTypeName() const noexcept
   24|    358|    {
   25|    358|        return magic_enum::enum_name(m_Type);
   26|    358|    }
   27|       |
   28|       |    phi::u64 Token::GetLineNumber() const noexcept
   29|      0|    {
   30|      0|        return m_LineNumber;
   31|      0|    }
   32|       |
   33|       |    phi::u64 Token::GetColumn() const noexcept
   34|      0|    {
   35|      0|        return m_Column;
   36|      0|    }
   37|       |
   38|       |    phi::usize Token::GetLength() const noexcept
   39|      0|    {
   40|      0|        return m_Text.length();
   41|      0|    }
   42|       |
   43|       |    std::string_view Token::GetText() const noexcept
   44|  10.3k|    {
   45|  10.3k|        return m_Text;
   46|  10.3k|    }
   47|       |
   48|       |    std::string Token::GetTextString() const noexcept
   49|      0|    {
   50|      0|        return std::string(m_Text.data(), m_Text.length());
   51|      0|    }
   52|       |
   53|       |    std::uint32_t Token::GetHint() const noexcept
   54|    471|    {
   55|    471|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   56|    471|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode);
   57|       |
   58|    471|        return m_Hint;
   59|    471|    }
   60|       |
   61|       |    std::string Token::DebugInfo() const noexcept
   62|      0|    {
   63|      0|        std::string pos_info = "(" + std::to_string(GetLineNumber().get()) + ":" +
   64|      0|                               std::to_string(GetColumn().get()) + ")";
   65|       |
   66|      0|        switch (m_Type)
   67|      0|        {
   68|      0|            case Type::Colon:
   69|      0|                return "Token[Colon]" + pos_info;
   70|      0|            case Type::Comma:
   71|      0|                return "Token[Comma]" + pos_info;
   72|      0|            case Type::Comment:
   73|      0|                return "Token[Comment]" + pos_info + ": '" + GetTextString() + "'";
   74|      0|            case Type::OpCode:
   75|      0|                return "Token[OpCode]" + pos_info + ": '" + GetTextString() + "'";
   76|      0|            case Type::RegisterInt:
   77|      0|                return "Token[RegisterInt]" + pos_info + ": '" + GetTextString() + "'";
   78|      0|            case Type::RegisterFloat:
   79|      0|                return "Token[RegisterFloat]" + pos_info + ": '" + GetTextString() + "'";
   80|      0|            case Type::RegisterStatus:
   81|      0|                return "Token[RegisterStatus]" + pos_info + ": '" + GetTextString() + "'";
   82|      0|            case Type::LabelIdentifier:
   83|      0|                return "Token[LabelIdentifier]" + pos_info + ": '" + GetTextString() + "'";
   84|      0|            case Type::NewLine:
   85|      0|                return "Token[NewLine]" + pos_info;
   86|      0|            case Type::OpenBracket:
   87|      0|                return "Token[OpenBracket]" + pos_info;
   88|      0|            case Type::ClosingBracket:
   89|      0|                return "Token[ClosingBracket]" + pos_info;
   90|      0|            case Type::IntegerLiteral:
   91|      0|                return "Token[IntegerLiteral]" + pos_info + ": '" + GetTextString() + "'";
   92|      0|            case Type::ImmediateInteger:
   93|      0|                return "Token[ImmediateInteger]" + pos_info + ": " + GetTextString() + "'";
   94|      0|            case Type::Unknown:
   95|      0|                return "Token[Unknown]" + pos_info;
   96|      0|            default:
   97|      0|                PHI_ASSERT_NOT_REACHED();
   98|      0|                return "Token[NotFound]" + pos_info;
   99|      0|        }
  100|      0|    }
  101|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/IntRegister.cpp:
    1|       |#include "DLX/IntRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    IntRegister::IntRegister() noexcept
    6|       |        : m_ValueSigned{0}
    7|       |        , m_IsReadOnly{false}
    8|  31.8k|    {}
    9|       |
   10|       |    void IntRegister::SetSignedValue(phi::i32 val) noexcept
   11|  31.8k|    {
   12|  31.8k|        m_ValueSigned = val;
   13|  31.8k|    }
   14|       |
   15|       |    void IntRegister::SetUnsignedValue(phi::u32 val) noexcept
   16|      0|    {
   17|      0|        m_ValueUnsigned = val;
   18|      0|    }
   19|       |
   20|       |    phi::i32 IntRegister::GetSignedValue() const noexcept
   21|      0|    {
   22|      0|        return m_ValueSigned;
   23|      0|    }
   24|       |
   25|       |    phi::u32 IntRegister::GetUnsignedValue() const noexcept
   26|      0|    {
   27|      0|        return m_ValueUnsigned;
   28|      0|    }
   29|       |
   30|       |    phi::Boolean IntRegister::IsReadOnly() const noexcept
   31|      0|    {
   32|      0|        return m_IsReadOnly;
   33|      0|    }
   34|       |
   35|       |    void IntRegister::SetReadOnly(phi::Boolean read_only) noexcept
   36|    996|    {
   37|    996|        m_IsReadOnly = read_only;
   38|    996|    }
   39|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/StatusRegister.cpp:
    1|       |#include "DLX/StatusRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void StatusRegister::SetStatus(phi::Boolean value) noexcept
    6|    996|    {
    7|    996|        m_Value = value;
    8|    996|    }
    9|       |
   10|       |    phi::Boolean StatusRegister::Get() const noexcept
   11|      0|    {
   12|      0|        return m_Value;
   13|      0|    }
   14|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/OpCode.cpp:
    1|       |#include "DLX/OpCode.hpp"
    2|       |
    3|       |#include <magic_enum.hpp>
    4|       |#include <algorithm>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    OpCode StringToOpCode(std::string_view token) noexcept
    9|  5.97k|    {
   10|  5.97k|        std::optional<OpCode> opcode_casted = magic_enum::enum_cast<OpCode>(token);
   11|  5.97k|        if (opcode_casted.has_value())
   12|    812|        {
   13|       |            // TODO: Bit of a hacky way around magic_enum begin able to cast every member...
   14|    812|            if (opcode_casted.value() == OpCode::NUMBER_OF_ELEMENTS)
   15|      0|            {
   16|      0|                return OpCode::NONE;
   17|      0|            }
   18|    812|            return opcode_casted.value();
   19|    812|        }
   20|       |
   21|       |        // None found
   22|  5.16k|        return OpCode::NONE;
   23|  5.16k|    }
   24|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/FloatRegister.cpp:
    1|       |#include "DLX/FloatRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void FloatRegister::SetValue(const phi::f32 val) noexcept
    6|  31.8k|    {
    7|  31.8k|        m_Value = val;
    8|  31.8k|    }
    9|       |
   10|       |    phi::f32 FloatRegister::GetValue() const noexcept
   11|      0|    {
   12|      0|        return m_Value;
   13|      0|    }
   14|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionInfo.cpp:
    1|       |#include "DLX/InstructionInfo.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void InstructionInfo::Execute(Processor& processor, const InstructionArg& arg1,
    6|       |                                  const InstructionArg& arg2,
    7|       |                                  const InstructionArg& arg3) const noexcept
    8|      3|    {
    9|      3|        PHI_ASSERT(m_Executor, "No execution function defined");
   10|       |
   11|      3|        m_Executor(processor, arg1, arg2, arg3);
   12|      3|    }
   13|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Instruction.cpp:
    1|       |#include "DLX/Instruction.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include <Phi/Core/Assert.hpp>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    Instruction::Instruction(const InstructionInfo& info) noexcept
    9|       |        : m_Info(info)
   10|    470|    {}
   11|       |
   12|       |    void Instruction::SetArgument(phi::u8 argument_number, InstructionArg argument) noexcept
   13|      2|    {
   14|      2|        PHI_ASSERT(argument_number < 3u);
   15|       |
   16|      2|        switch (argument_number.get())
   17|      2|        {
   18|      2|            case 0u:
   19|      2|                m_Arg1 = argument;
   20|      2|                break;
   21|      0|            case 1u:
   22|      0|                m_Arg2 = argument;
   23|      0|                break;
   24|      0|            case 2u:
   25|      0|                m_Arg3 = argument;
   26|      0|                break;
   27|      0|            default:
   28|      0|                PHI_ASSERT_NOT_REACHED();
   29|      2|        }
   30|      2|    }
   31|       |
   32|       |    std::string Instruction::DebugInfo() const noexcept
   33|      0|    {
   34|      0|        return std::string("Instruction");
   35|      0|    }
   36|       |
   37|       |    void Instruction::Execute(Processor& processor) const noexcept
   38|      3|    {
   39|      3|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   40|      3|    }
   41|       |
   42|       |    const InstructionInfo& Instruction::GetInfo() const noexcept
   43|      3|    {
   44|      3|        return m_Info;
   45|      3|    }
   46|       |
   47|       |    const InstructionArg& Instruction::GetArg1() const noexcept
   48|      0|    {
   49|      0|        return m_Arg1;
   50|      0|    }
   51|       |
   52|       |    const InstructionArg& Instruction::GetArg2() const noexcept
   53|      0|    {
   54|      0|        return m_Arg2;
   55|      0|    }
   56|       |
   57|       |    const InstructionArg& Instruction::GetArg3() const noexcept
   58|      0|    {
   59|      0|        return m_Arg3;
   60|      0|    }
   61|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/RegisterNames.cpp:
    1|       |#include "DLX/RegisterNames.hpp"
    2|       |
    3|       |#include "DLX/Containers/LookUpMap.hpp"
    4|       |#include <algorithm>
    5|       |#include <cctype>
    6|       |#include <string_view>
    7|       |
    8|       |namespace dlx
    9|       |{
   10|       |    static constexpr std::array<std::pair<std::string_view, IntRegisterID>, 32> IntRegisterValues{
   11|       |            {{"R0", IntRegisterID::R0},   {"R1", IntRegisterID::R1},   {"R2", IntRegisterID::R2},
   12|       |             {"R3", IntRegisterID::R3},   {"R4", IntRegisterID::R4},   {"R5", IntRegisterID::R5},
   13|       |             {"R6", IntRegisterID::R6},   {"R7", IntRegisterID::R7},   {"R8", IntRegisterID::R8},
   14|       |             {"R9", IntRegisterID::R9},   {"R10", IntRegisterID::R10}, {"R11", IntRegisterID::R11},
   15|       |             {"R12", IntRegisterID::R12}, {"R13", IntRegisterID::R13}, {"R14", IntRegisterID::R14},
   16|       |             {"R15", IntRegisterID::R15}, {"R16", IntRegisterID::R16}, {"R17", IntRegisterID::R17},
   17|       |             {"R18", IntRegisterID::R18}, {"R19", IntRegisterID::R19}, {"R20", IntRegisterID::R20},
   18|       |             {"R21", IntRegisterID::R21}, {"R22", IntRegisterID::R22}, {"R23", IntRegisterID::R23},
   19|       |             {"R24", IntRegisterID::R24}, {"R25", IntRegisterID::R25}, {"R26", IntRegisterID::R26},
   20|       |             {"R27", IntRegisterID::R27}, {"R28", IntRegisterID::R28}, {"R29", IntRegisterID::R29},
   21|       |             {"R30", IntRegisterID::R30}, {"R31", IntRegisterID::R31}}};
   22|       |
   23|       |    static constexpr std::array<std::pair<std::string_view, FloatRegisterID>, 32>
   24|       |            FloatRegisterValues{{{"F0", FloatRegisterID::F0},   {"F1", FloatRegisterID::F1},
   25|       |                                 {"F2", FloatRegisterID::F2},   {"F3", FloatRegisterID::F3},
   26|       |                                 {"F4", FloatRegisterID::F4},   {"F5", FloatRegisterID::F5},
   27|       |                                 {"F6", FloatRegisterID::F6},   {"F7", FloatRegisterID::F7},
   28|       |                                 {"F8", FloatRegisterID::F8},   {"F9", FloatRegisterID::F9},
   29|       |                                 {"F10", FloatRegisterID::F10}, {"F11", FloatRegisterID::F11},
   30|       |                                 {"F12", FloatRegisterID::F12}, {"F13", FloatRegisterID::F13},
   31|       |                                 {"F14", FloatRegisterID::F14}, {"F15", FloatRegisterID::F15},
   32|       |                                 {"F16", FloatRegisterID::F16}, {"F17", FloatRegisterID::F17},
   33|       |                                 {"F18", FloatRegisterID::F18}, {"F19", FloatRegisterID::F19},
   34|       |                                 {"F20", FloatRegisterID::F20}, {"F21", FloatRegisterID::F21},
   35|       |                                 {"F22", FloatRegisterID::F22}, {"F23", FloatRegisterID::F23},
   36|       |                                 {"F24", FloatRegisterID::F24}, {"F25", FloatRegisterID::F25},
   37|       |                                 {"F26", FloatRegisterID::F26}, {"F27", FloatRegisterID::F27},
   38|       |                                 {"F28", FloatRegisterID::F28}, {"F29", FloatRegisterID::F29},
   39|       |                                 {"F30", FloatRegisterID::F30}, {"F31", FloatRegisterID::F31}}};
   40|       |
   41|       |    IntRegisterID StringToIntRegister(std::string_view token) noexcept
   42|  6.80k|    {
   43|  6.80k|        static constexpr auto map =
   44|  6.80k|                LookUpMap<std::string_view, IntRegisterID, IntRegisterValues.size()>(
   45|  6.80k|                        IntRegisterValues, IntRegisterID::None);
   46|       |
   47|  6.80k|        return map.at(token);
   48|  6.80k|    }
   49|       |
   50|       |    FloatRegisterID StringToFloatRegister(std::string_view token) noexcept
   51|  6.37k|    {
   52|  6.37k|        static constexpr auto map =
   53|  6.37k|                LookUpMap<std::string_view, FloatRegisterID, FloatRegisterValues.size()>(
   54|  6.37k|                        FloatRegisterValues, FloatRegisterID::None);
   55|       |
   56|  6.37k|        return map.at(token);
   57|  6.37k|    }
   58|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionLibrary.cpp:
    1|       |#include "DLX/InstructionLibrary.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/InstructionImplementation.hpp"
    5|       |#include "DLX/InstructionInfo.hpp"
    6|       |#include <magic_enum.hpp>
    7|       |
    8|       |namespace dlx
    9|       |{
   10|       |    InstructionLibrary::InstructionLibrary() noexcept
   11|       |        : m_Instructions()
   12|    996|    {
   13|    996|        PHI_ASSERT(Initialize());
   14|    996|    }
   15|       |
   16|       |    phi::Boolean InstructionLibrary::Initialize() noexcept
   17|    996|    {
   18|       |        /* Arithmetic */
   19|       |
   20|       |        // Addition
   21|    996|        InitInstruction(OpCode::ADD, ArgumentType::IntRegister, ArgumentType::IntRegister,
   22|    996|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::ADD);
   23|    996|        InitInstruction(OpCode::ADDI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   24|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::ADDI);
   25|    996|        InitInstruction(OpCode::ADDU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   26|    996|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::ADDU);
   27|    996|        InitInstruction(OpCode::ADDUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   28|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::ADDUI);
   29|    996|        InitInstruction(OpCode::ADDF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   30|    996|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::ADDF);
   31|    996|        InitInstruction(OpCode::ADDD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   32|    996|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::ADDD);
   33|       |
   34|       |        // Subtraction
   35|    996|        InitInstruction(OpCode::SUB, ArgumentType::IntRegister, ArgumentType::IntRegister,
   36|    996|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SUB);
   37|    996|        InitInstruction(OpCode::SUBI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   38|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SUBI);
   39|    996|        InitInstruction(OpCode::SUBU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   40|    996|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SUBU);
   41|    996|        InitInstruction(OpCode::SUBUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   42|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SUBUI);
   43|    996|        InitInstruction(OpCode::SUBF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   44|    996|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::SUBF);
   45|    996|        InitInstruction(OpCode::SUBD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   46|    996|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::SUBD);
   47|       |
   48|       |        // Multiplikation
   49|    996|        InitInstruction(OpCode::MULT, ArgumentType::IntRegister, ArgumentType::IntRegister,
   50|    996|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::MULT);
   51|    996|        InitInstruction(OpCode::MULTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   52|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::MULTI);
   53|    996|        InitInstruction(OpCode::MULTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   54|    996|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::MULTU);
   55|    996|        InitInstruction(OpCode::MULTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   56|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::MULTUI);
   57|    996|        InitInstruction(OpCode::MULTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   58|    996|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::MULTF);
   59|    996|        InitInstruction(OpCode::MULTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   60|    996|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::MULTD);
   61|       |
   62|       |        // Division
   63|    996|        InitInstruction(OpCode::DIV, ArgumentType::IntRegister, ArgumentType::IntRegister,
   64|    996|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::DIV);
   65|    996|        InitInstruction(OpCode::DIVI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   66|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::DIVI);
   67|    996|        InitInstruction(OpCode::DIVU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   68|    996|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::DIVU);
   69|    996|        InitInstruction(OpCode::DIVUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   70|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::DIVUI);
   71|    996|        InitInstruction(OpCode::DIVF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   72|    996|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::DIVF);
   73|    996|        InitInstruction(OpCode::DIVD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   74|    996|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::DIVD);
   75|       |
   76|       |        // Shift left logical
   77|    996|        InitInstruction(OpCode::SLL, ArgumentType::IntRegister, ArgumentType::IntRegister,
   78|    996|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SLL);
   79|    996|        InitInstruction(OpCode::SLLI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   80|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SLLI);
   81|       |
   82|       |        // Shift right logical
   83|    996|        InitInstruction(OpCode::SRL, ArgumentType::IntRegister, ArgumentType::IntRegister,
   84|    996|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SRL);
   85|    996|        InitInstruction(OpCode::SRLI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   86|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SRLI);
   87|       |
   88|       |        // Shift left arithmetic
   89|    996|        InitInstruction(OpCode::SLA, ArgumentType::IntRegister, ArgumentType::IntRegister,
   90|    996|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SLA);
   91|    996|        InitInstruction(OpCode::SLAI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   92|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SLAI);
   93|       |
   94|       |        // Shift right arithmetic
   95|    996|        InitInstruction(OpCode::SRA, ArgumentType::IntRegister, ArgumentType::IntRegister,
   96|    996|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SRA);
   97|    996|        InitInstruction(OpCode::SRAI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   98|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SRAI);
   99|       |
  100|       |        /* Logical */
  101|       |
  102|       |        // And
  103|    996|        InitInstruction(OpCode::AND, ArgumentType::IntRegister, ArgumentType::IntRegister,
  104|    996|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::AND);
  105|    996|        InitInstruction(OpCode::ANDI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  106|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::ANDI);
  107|       |
  108|       |        // Or
  109|    996|        InitInstruction(OpCode::OR, ArgumentType::IntRegister, ArgumentType::IntRegister,
  110|    996|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::OR);
  111|    996|        InitInstruction(OpCode::ORI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  112|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::ORI);
  113|       |
  114|       |        // Xor
  115|    996|        InitInstruction(OpCode::XOR, ArgumentType::IntRegister, ArgumentType::IntRegister,
  116|    996|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::XOR);
  117|    996|        InitInstruction(OpCode::XORI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  118|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::XORI);
  119|       |
  120|       |        /* Conditionals */
  121|       |
  122|       |        // Set less than
  123|    996|        InitInstruction(OpCode::SLT, ArgumentType::IntRegister, ArgumentType::IntRegister,
  124|    996|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SLT);
  125|    996|        InitInstruction(OpCode::SLTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  126|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SLTI);
  127|    996|        InitInstruction(OpCode::SLTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  128|    996|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SLTU);
  129|    996|        InitInstruction(OpCode::SLTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  130|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SLTUI);
  131|    996|        InitInstruction(OpCode::LTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  132|    996|                        ArgumentType::None, RegisterAccessType::Float, impl::LTF);
  133|    996|        InitInstruction(OpCode::LTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  134|    996|                        ArgumentType::None, RegisterAccessType::Double, impl::LTD);
  135|       |
  136|       |        // Set greater than
  137|    996|        InitInstruction(OpCode::SGT, ArgumentType::IntRegister, ArgumentType::IntRegister,
  138|    996|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SGT);
  139|    996|        InitInstruction(OpCode::SGTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  140|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SGTI);
  141|    996|        InitInstruction(OpCode::SGTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  142|    996|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SGTU);
  143|    996|        InitInstruction(OpCode::SGTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  144|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SGTUI);
  145|    996|        InitInstruction(OpCode::GTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  146|    996|                        ArgumentType::None, RegisterAccessType::Float, impl::GTF);
  147|    996|        InitInstruction(OpCode::GTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  148|    996|                        ArgumentType::None, RegisterAccessType::Double, impl::GTD);
  149|       |
  150|       |        // Set less than or equal
  151|    996|        InitInstruction(OpCode::SLE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  152|    996|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SLE);
  153|    996|        InitInstruction(OpCode::SLEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  154|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SLEI);
  155|    996|        InitInstruction(OpCode::SLEU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  156|    996|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SLEU);
  157|    996|        InitInstruction(OpCode::SLEUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  158|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SLEUI);
  159|    996|        InitInstruction(OpCode::LEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  160|    996|                        ArgumentType::None, RegisterAccessType::Float, impl::LEF);
  161|    996|        InitInstruction(OpCode::LED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  162|    996|                        ArgumentType::None, RegisterAccessType::Double, impl::LED);
  163|       |
  164|       |        // Set greater than or equal
  165|    996|        InitInstruction(OpCode::SGE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  166|    996|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SGE);
  167|    996|        InitInstruction(OpCode::SGEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  168|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SGEI);
  169|    996|        InitInstruction(OpCode::SGEU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  170|    996|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SGEU);
  171|    996|        InitInstruction(OpCode::SGEUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  172|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SGEUI);
  173|    996|        InitInstruction(OpCode::GEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  174|    996|                        ArgumentType::None, RegisterAccessType::Float, impl::GEF);
  175|    996|        InitInstruction(OpCode::GED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  176|    996|                        ArgumentType::None, RegisterAccessType::Double, impl::GED);
  177|       |
  178|       |        // Set equal
  179|    996|        InitInstruction(OpCode::SEQ, ArgumentType::IntRegister, ArgumentType::IntRegister,
  180|    996|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SEQ);
  181|    996|        InitInstruction(OpCode::SEQI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  182|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SEQI);
  183|    996|        InitInstruction(OpCode::SEQU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  184|    996|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SEQU);
  185|    996|        InitInstruction(OpCode::SEQUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  186|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SEQUI);
  187|    996|        InitInstruction(OpCode::EQF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  188|    996|                        ArgumentType::None, RegisterAccessType::Float, impl::EQF);
  189|    996|        InitInstruction(OpCode::EQD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  190|    996|                        ArgumentType::None, RegisterAccessType::Double, impl::EQD);
  191|       |
  192|       |        // Set not equal
  193|    996|        InitInstruction(OpCode::SNE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  194|    996|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SNE);
  195|    996|        InitInstruction(OpCode::SNEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  196|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SNEI);
  197|    996|        InitInstruction(OpCode::SNEU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  198|    996|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SNEU);
  199|    996|        InitInstruction(OpCode::SNEUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  200|    996|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SNEUI);
  201|    996|        InitInstruction(OpCode::NEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  202|    996|                        ArgumentType::None, RegisterAccessType::Float, impl::NEF);
  203|    996|        InitInstruction(OpCode::NED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  204|    996|                        ArgumentType::None, RegisterAccessType::Double, impl::NED);
  205|       |
  206|       |        /* Conditional branching */
  207|       |
  208|       |        // Branch equal zero
  209|    996|        InitInstruction(OpCode::BEQZ, ArgumentType::IntRegister, ArgumentType::Label,
  210|    996|                        ArgumentType::None, RegisterAccessType::Ignored, impl::BEQZ);
  211|       |
  212|       |        // Branch not equal zero
  213|    996|        InitInstruction(OpCode::BNEZ, ArgumentType::IntRegister, ArgumentType::Label,
  214|    996|                        ArgumentType::None, RegisterAccessType::Ignored, impl::BNEZ);
  215|       |
  216|       |        // Branch floating point true
  217|    996|        InitInstruction(OpCode::BFPT, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  218|    996|                        RegisterAccessType::Ignored, impl::BFPT);
  219|       |
  220|       |        // Branch floating point false
  221|    996|        InitInstruction(OpCode::BFPF, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  222|    996|                        RegisterAccessType::Ignored, impl::BFPF);
  223|       |
  224|       |        /* Unconditional branching */
  225|       |
  226|       |        // Jump
  227|    996|        InitInstruction(OpCode::J, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  228|    996|                        RegisterAccessType::None, impl::J);
  229|       |
  230|       |        // Jump to register
  231|    996|        InitInstruction(OpCode::JR, ArgumentType::IntRegister, ArgumentType::None,
  232|    996|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::JR);
  233|       |
  234|       |        // Jump and link
  235|    996|        InitInstruction(OpCode::JAL, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  236|    996|                        RegisterAccessType::Unsigned, impl::JAL);
  237|       |
  238|       |        // Jump and link to register
  239|    996|        InitInstruction(OpCode::JALR, ArgumentType::IntRegister, ArgumentType::None,
  240|    996|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::JALR);
  241|       |
  242|       |        /* Loading data */
  243|       |
  244|       |        // Load high immediate
  245|    996|        InitInstruction(OpCode::LHI, ArgumentType::IntRegister, ArgumentType::ImmediateInteger,
  246|    996|                        ArgumentType::None, RegisterAccessType::Signed, impl::LHI);
  247|       |
  248|       |        // Load byte
  249|    996|        InitInstruction(OpCode::LB, ArgumentType::IntRegister,
  250|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  251|    996|                        ArgumentType::None, RegisterAccessType::Signed, impl::LB);
  252|       |
  253|       |        // Load byte unsigned
  254|    996|        InitInstruction(OpCode::LBU, ArgumentType::IntRegister,
  255|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  256|    996|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LBU);
  257|       |
  258|       |        // Load half word
  259|    996|        InitInstruction(OpCode::LH, ArgumentType::IntRegister,
  260|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  261|    996|                        ArgumentType::None, RegisterAccessType::Signed, impl::LH);
  262|       |
  263|       |        // Load half word unsigned
  264|    996|        InitInstruction(OpCode::LHU, ArgumentType::IntRegister,
  265|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  266|    996|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LHU);
  267|       |
  268|       |        // Load word
  269|    996|        InitInstruction(OpCode::LW, ArgumentType::IntRegister,
  270|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  271|    996|                        ArgumentType::None, RegisterAccessType::Signed, impl::LW);
  272|       |
  273|       |        // Load word unsigned
  274|    996|        InitInstruction(OpCode::LWU, ArgumentType::IntRegister,
  275|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  276|    996|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LWU);
  277|       |
  278|       |        // Load float
  279|    996|        InitInstruction(OpCode::LF, ArgumentType::FloatRegister,
  280|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  281|    996|                        ArgumentType::None, RegisterAccessType::Float, impl::LF);
  282|       |
  283|       |        // Load double
  284|    996|        InitInstruction(OpCode::LD, ArgumentType::FloatRegister,
  285|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  286|    996|                        ArgumentType::None, RegisterAccessType::Double, impl::LD);
  287|       |
  288|       |        /* Storing data */
  289|       |
  290|       |        // Store byte
  291|    996|        InitInstruction(OpCode::SB,
  292|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  293|    996|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  294|    996|                        impl::SB);
  295|       |
  296|       |        // Store byte unsigned
  297|    996|        InitInstruction(OpCode::SBU,
  298|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  299|    996|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  300|    996|                        impl::SBU);
  301|       |
  302|       |        // Store half word
  303|    996|        InitInstruction(OpCode::SH,
  304|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  305|    996|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  306|    996|                        impl::SH);
  307|       |
  308|       |        // Store half word unsigned
  309|    996|        InitInstruction(OpCode::SHU,
  310|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  311|    996|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  312|    996|                        impl::SHU);
  313|       |
  314|       |        // Store word
  315|    996|        InitInstruction(OpCode::SW,
  316|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  317|    996|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  318|    996|                        impl::SW);
  319|       |
  320|       |        // Store word unsigned
  321|    996|        InitInstruction(OpCode::SWU,
  322|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  323|    996|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  324|    996|                        impl::SWU);
  325|       |
  326|       |        // Store float
  327|    996|        InitInstruction(OpCode::SF,
  328|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  329|    996|                        ArgumentType::FloatRegister, ArgumentType::None, RegisterAccessType::Float,
  330|    996|                        impl::SF);
  331|       |
  332|       |        // Store double
  333|    996|        InitInstruction(OpCode::SD,
  334|    996|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  335|    996|                        ArgumentType::FloatRegister, ArgumentType::None, RegisterAccessType::Double,
  336|    996|                        impl::SD);
  337|       |
  338|       |        /* Moving data */
  339|       |
  340|       |        // Move float
  341|    996|        InitInstruction(OpCode::MOVF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  342|    996|                        ArgumentType::None, RegisterAccessType::Float, impl::MOVF);
  343|       |
  344|       |        // Move double
  345|    996|        InitInstruction(OpCode::MOVD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  346|    996|                        ArgumentType::None, RegisterAccessType::Double, impl::MOVD);
  347|       |
  348|       |        // Move float to int
  349|    996|        InitInstruction(OpCode::MOVFP2I, ArgumentType::IntRegister, ArgumentType::FloatRegister,
  350|    996|                        ArgumentType::None, RegisterAccessType::Float, impl::MOVFP2I);
  351|       |
  352|       |        // Move int to float
  353|    996|        InitInstruction(OpCode::MOVI2FP, ArgumentType::FloatRegister, ArgumentType::IntRegister,
  354|    996|                        ArgumentType::None, RegisterAccessType::Float, impl::MOVI2FP);
  355|       |
  356|       |        /* Converting data */
  357|       |
  358|       |        // Convert float to double
  359|    996|        InitInstruction(OpCode::CVTF2D, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  360|    996|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTF2D);
  361|       |
  362|       |        // Convert float to int
  363|    996|        InitInstruction(OpCode::CVTF2I, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  364|    996|                        ArgumentType::None, RegisterAccessType::Float, impl::CVTF2I);
  365|       |
  366|       |        // Convert double to float
  367|    996|        InitInstruction(OpCode::CVTD2F, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  368|    996|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTD2F);
  369|       |
  370|       |        // Convert double to int
  371|    996|        InitInstruction(OpCode::CVTD2I, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  372|    996|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTD2I);
  373|       |
  374|       |        // Convert int to float
  375|    996|        InitInstruction(OpCode::CVTI2F, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  376|    996|                        ArgumentType::None, RegisterAccessType::Float, impl::CVTI2F);
  377|       |
  378|       |        // Convert int to double
  379|    996|        InitInstruction(OpCode::CVTI2D, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  380|    996|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTI2D);
  381|       |
  382|       |        /* Special */
  383|       |
  384|       |        // Trap
  385|    996|        InitInstruction(OpCode::TRAP, ArgumentType::ImmediateInteger, ArgumentType::None,
  386|    996|                        ArgumentType::None, RegisterAccessType::None, impl::TRAP);
  387|       |
  388|       |        // Halt
  389|    996|        InitInstruction(OpCode::HALT, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  390|    996|                        RegisterAccessType::None, impl::HALT);
  391|       |
  392|       |        // No operation
  393|    996|        InitInstruction(OpCode::NOP, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  394|    996|                        RegisterAccessType::None, impl::NOP);
  395|       |
  396|    996|        return true;
  397|    996|    }
  398|       |
  399|       |    const InstructionInfo& InstructionLibrary::LookUp(OpCode instruction) const noexcept
  400|   112k|    {
  401|   112k|        return m_Instructions.at(static_cast<std::size_t>(instruction));
  402|   112k|    }
  403|       |
  404|       |    void InstructionLibrary::InitInstruction(OpCode opcode, ArgumentType arg1, ArgumentType arg2,
  405|       |                                             ArgumentType        arg3,
  406|       |                                             RegisterAccessType  register_access_type,
  407|       |                                             InstructionExecutor executor) noexcept
  408|   111k|    {
  409|   111k|        PHI_ASSERT(LookUp(opcode).GetExecutor() == nullptr, "Already registered instruction {}",
  410|   111k|                   magic_enum::enum_name(opcode));
  411|       |
  412|   111k|        m_Instructions.at(static_cast<std::size_t>(opcode)) =
  413|   111k|                InstructionInfo(opcode, arg1, arg2, arg3, register_access_type, executor);
  414|   111k|    }
  415|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/MemoryBlock.cpp:
    1|       |#include "DLX/MemoryBlock.hpp"
    2|       |#include "Phi/Core/Boolean.hpp"
    3|       |#include "Phi/Core/Log.hpp"
    4|       |#include <cstdint>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    MemoryBlock::MemoryBlock(phi::usize start_address, phi::usize starting_size) noexcept
    9|       |        : m_StartingAddress(start_address)
   10|    996|    {
   11|    996|        m_Values.resize(starting_size.get());
   12|    996|    }
   13|       |
   14|       |    std::optional<phi::i8> MemoryBlock::LoadByte(phi::usize address) const noexcept
   15|      0|    {
   16|      0|        if (!IsAddressValid(address, 1u))
   17|      0|        {
   18|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   19|      0|            return {};
   20|      0|        }
   21|       |
   22|      0|        std::size_t index = (address - m_StartingAddress).get();
   23|      0|        return m_Values[index].signed_value;
   24|      0|    }
   25|       |
   26|       |    std::optional<phi::u8> MemoryBlock::LoadUnsignedByte(phi::usize address) const noexcept
   27|      0|    {
   28|      0|        if (!IsAddressValid(address, 1u))
   29|      0|        {
   30|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   31|      0|            return {};
   32|      0|        }
   33|       |
   34|      0|        std::size_t index = (address - m_StartingAddress).get();
   35|      0|        return m_Values[index].unsigned_value;
   36|      0|    }
   37|       |
   38|       |    std::optional<phi::i16> MemoryBlock::LoadHalfWord(phi::usize address) const noexcept
   39|      0|    {
   40|      0|        if (!IsAddressValid(address, 2u))
   41|      0|        {
   42|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   43|      0|            return {};
   44|      0|        }
   45|       |
   46|      0|        std::size_t index = (address - m_StartingAddress).get();
   47|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[index].signed_value);
   48|      0|    }
   49|       |
   50|       |    std::optional<phi::u16> MemoryBlock::LoadUnsignedHalfWord(phi::usize address) const noexcept
   51|      0|    {
   52|      0|        if (!IsAddressValid(address, 2u))
   53|      0|        {
   54|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   55|      0|            return {};
   56|      0|        }
   57|       |
   58|      0|        std::size_t index = (address - m_StartingAddress).get();
   59|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[index].unsigned_value);
   60|      0|    }
   61|       |
   62|       |    std::optional<phi::i32> MemoryBlock::LoadWord(phi::usize address) const noexcept
   63|      0|    {
   64|      0|        if (!IsAddressValid(address, 4u))
   65|      0|        {
   66|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   67|      0|            return {};
   68|      0|        }
   69|       |
   70|      0|        std::size_t index = (address - m_StartingAddress).get();
   71|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[index].signed_value);
   72|      0|    }
   73|       |
   74|       |    std::optional<phi::u32> MemoryBlock::LoadUnsignedWord(phi::usize address) const noexcept
   75|      0|    {
   76|      0|        if (!IsAddressValid(address, 4u))
   77|      0|        {
   78|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   79|      0|            return {};
   80|      0|        }
   81|       |
   82|      0|        std::size_t index = (address - m_StartingAddress).get();
   83|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[index].unsigned_value);
   84|      0|    }
   85|       |
   86|       |    std::optional<phi::f32> MemoryBlock::LoadFloat(phi::usize address) const noexcept
   87|      0|    {
   88|      0|        if (!IsAddressValid(address, 4u))
   89|      0|        {
   90|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   91|      0|            return {};
   92|      0|        }
   93|       |
   94|      0|        std::size_t index = (address - m_StartingAddress).get();
   95|      0|        return *reinterpret_cast<const float*>(&m_Values[index].signed_value);
   96|      0|    }
   97|       |
   98|       |    std::optional<phi::f64> MemoryBlock::LoadDouble(phi::usize address) const noexcept
   99|      0|    {
  100|      0|        if (!IsAddressValid(address, 8u))
  101|      0|        {
  102|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|      0|        std::size_t index = (address - m_StartingAddress).get();
  107|      0|        return *reinterpret_cast<const double*>(&m_Values[(index)].signed_value);
  108|      0|    }
  109|       |
  110|       |    phi::Boolean MemoryBlock::StoreByte(phi::usize address, phi::i8 value) noexcept
  111|      0|    {
  112|      0|        if (!IsAddressValid(address, 1u))
  113|      0|        {
  114|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  115|      0|            return false;
  116|      0|        }
  117|       |
  118|      0|        m_Values[(address - m_StartingAddress).get()].signed_value = value.get();
  119|      0|        return true;
  120|      0|    }
  121|       |
  122|       |    phi::Boolean MemoryBlock::StoreUnsignedByte(phi::usize address, phi::u8 value) noexcept
  123|      0|    {
  124|      0|        if (!IsAddressValid(address, 1u))
  125|      0|        {
  126|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  127|      0|            return false;
  128|      0|        }
  129|       |
  130|      0|        m_Values[(address - m_StartingAddress).get()].unsigned_value = value.get();
  131|      0|        return true;
  132|      0|    }
  133|       |
  134|       |    phi::Boolean MemoryBlock::StoreHalfWord(phi::usize address, phi::i16 value) noexcept
  135|      0|    {
  136|      0|        if (!IsAddressValid(address, 2u))
  137|      0|        {
  138|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  139|      0|            return false;
  140|      0|        }
  141|       |
  142|      0|        std::size_t index = (address - m_StartingAddress).get();
  143|      0|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.get();
  144|       |
  145|      0|        return true;
  146|      0|    }
  147|       |
  148|       |    phi::Boolean MemoryBlock::StoreUnsignedHalfWord(phi::usize address, phi::u16 value) noexcept
  149|      0|    {
  150|      0|        if (!IsAddressValid(address, 2u))
  151|      0|        {
  152|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  153|      0|            return false;
  154|      0|        }
  155|       |
  156|      0|        std::size_t index = (address - m_StartingAddress).get();
  157|      0|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.get();
  158|       |
  159|      0|        return true;
  160|      0|    }
  161|       |
  162|       |    phi::Boolean MemoryBlock::StoreWord(phi::usize address, phi::i32 value) noexcept
  163|      0|    {
  164|      0|        if (!IsAddressValid(address, 4u))
  165|      0|        {
  166|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  167|      0|            return false;
  168|      0|        }
  169|       |
  170|      0|        std::size_t index = (address - m_StartingAddress).get();
  171|      0|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.get();
  172|       |
  173|      0|        return true;
  174|      0|    }
  175|       |
  176|       |    phi::Boolean MemoryBlock::StoreUnsignedWord(phi::usize address, phi::u32 value) noexcept
  177|      0|    {
  178|      0|        if (!IsAddressValid(address, 4u))
  179|      0|        {
  180|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  181|      0|            return false;
  182|      0|        }
  183|       |
  184|      0|        std::size_t index = (address - m_StartingAddress).get();
  185|      0|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.get();
  186|       |
  187|      0|        return true;
  188|      0|    }
  189|       |
  190|       |    phi::Boolean MemoryBlock::StoreFloat(phi::usize address, phi::f32 value) noexcept
  191|      0|    {
  192|      0|        if (!IsAddressValid(address, 4u))
  193|      0|        {
  194|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|      0|        std::size_t index = (address - m_StartingAddress).get();
  199|      0|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.get();
  200|       |
  201|      0|        return true;
  202|      0|    }
  203|       |
  204|       |    phi::Boolean MemoryBlock::StoreDouble(phi::usize address, phi::f64 value) noexcept
  205|      0|    {
  206|      0|        if (!IsAddressValid(address, 8u))
  207|      0|        {
  208|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  209|      0|            return false;
  210|      0|        }
  211|       |
  212|      0|        std::size_t index = (address - m_StartingAddress).get();
  213|      0|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.get();
  214|       |
  215|      0|        return true;
  216|      0|    }
  217|       |
  218|       |    phi::Boolean MemoryBlock::IsAddressValid(phi::usize address, phi::usize size) const noexcept
  219|      0|    {
  220|      0|        return address >= m_StartingAddress &&
  221|      0|               (address + size) <= (m_StartingAddress + m_Values.size());
  222|      0|    }
  223|       |
  224|       |    void MemoryBlock::Clear() noexcept
  225|    996|    {
  226|    996|        for (auto& val : m_Values)
  227|   996k|        {
  228|   996k|            val.signed_value = 0;
  229|   996k|        }
  230|    996|    }
  231|       |
  232|       |    phi::usize MemoryBlock::GetStartingAddress() const noexcept
  233|      0|    {
  234|      0|        return m_StartingAddress;
  235|      0|    }
  236|       |
  237|       |    void MemoryBlock::SetStartingAddress(phi::usize new_starting_address) noexcept
  238|      0|    {
  239|      0|        m_StartingAddress = new_starting_address;
  240|      0|    }
  241|       |
  242|       |    std::vector<MemoryBlock::MemoryByte>& MemoryBlock::GetRawMemory() noexcept
  243|      0|    {
  244|      0|        return m_Values;
  245|      0|    }
  246|       |
  247|       |    const std::vector<MemoryBlock::MemoryByte>& MemoryBlock::GetRawMemory() const noexcept
  248|      0|    {
  249|      0|        return m_Values;
  250|      0|    }
  251|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionArg.cpp:
    1|       |#include "DLX/InstructionArg.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    InstructionArg::InstructionArg() noexcept
    6|       |        : m_Type(ArgumentType::None)
    7|       |        , address_displacement()
    8|  1.41k|    {}
    9|       |
   10|       |    ArgumentType InstructionArg::GetType() const noexcept
   11|      9|    {
   12|      9|        return m_Type;
   13|      9|    }
   14|       |
   15|       |    std::string InstructionArg::DebugInfo() const noexcept
   16|      0|    {
   17|      0|        return "InstructionArgument";
   18|      0|    }
   19|       |
   20|       |    const InstructionArg::RegisterInt& InstructionArg::AsRegisterInt() const noexcept
   21|      0|    {
   22|      0|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   23|       |
   24|      0|        return register_int;
   25|      0|    }
   26|       |
   27|       |    const InstructionArg::RegisterFloat& InstructionArg::AsRegisterFloat() const noexcept
   28|      0|    {
   29|      0|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   30|       |
   31|      0|        return register_float;
   32|      0|    }
   33|       |
   34|       |    const InstructionArg::ImmediateValue& InstructionArg::AsImmediateValue() const noexcept
   35|      0|    {
   36|      0|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   37|       |
   38|      0|        return immediate_value;
   39|      0|    }
   40|       |
   41|       |    const InstructionArg::AddressDisplacement& InstructionArg::AsAddressDisplacement()
   42|       |            const noexcept
   43|      0|    {
   44|      0|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
   45|       |
   46|      0|        return address_displacement;
   47|      0|    }
   48|       |
   49|       |    const InstructionArg::Label& InstructionArg::AsLabel() const noexcept
   50|      1|    {
   51|      1|        PHI_ASSERT(m_Type == ArgumentType::Label);
   52|       |
   53|      1|        return label;
   54|      1|    }
   55|       |
   56|       |    phi::Boolean operator==(const InstructionArg& lhs, const InstructionArg& rhs) noexcept
   57|      0|    {
   58|      0|        if (lhs.GetType() != rhs.GetType())
   59|      0|        {
   60|      0|            return false;
   61|      0|        }
   62|       |
   63|      0|        switch (lhs.GetType())
   64|      0|        {
   65|      0|            case ArgumentType::AddressDisplacement:
   66|      0|                return (lhs.AsAddressDisplacement().displacement ==
   67|      0|                        rhs.AsAddressDisplacement().displacement) &&
   68|      0|                       (lhs.AsAddressDisplacement().register_id ==
   69|      0|                        rhs.AsAddressDisplacement().register_id);
   70|      0|            case ArgumentType::ImmediateInteger:
   71|      0|                return lhs.AsImmediateValue().signed_value == rhs.AsImmediateValue().signed_value;
   72|      0|            case ArgumentType::IntRegister:
   73|      0|                return lhs.AsRegisterInt().register_id == rhs.AsRegisterInt().register_id;
   74|      0|            case ArgumentType::FloatRegister:
   75|      0|                return lhs.AsRegisterFloat().register_id == rhs.AsRegisterFloat().register_id;
   76|      0|            case ArgumentType::Label:
   77|      0|                return lhs.AsLabel().label_name == rhs.AsLabel().label_name;
   78|      0|            case ArgumentType::None:
   79|      0|                return true;
   80|      0|            default:
   81|      0|                PHI_ASSERT_NOT_REACHED();
   82|      0|                break;
   83|      0|        }
   84|       |
   85|      0|        PHI_ASSERT_NOT_REACHED();
   86|      0|        return false;
   87|      0|    }
   88|       |
   89|       |    phi::Boolean operator!=(const InstructionArg& lhs, const InstructionArg& rhs) noexcept
   90|      0|    {
   91|      0|        return !(lhs == rhs);
   92|      0|    }
   93|       |
   94|       |    InstructionArg ConstructInstructionArgRegisterInt(IntRegisterID id) noexcept
   95|      1|    {
   96|      1|        InstructionArg arg;
   97|      1|        arg.m_Type                   = ArgumentType::IntRegister;
   98|      1|        arg.register_int.register_id = id;
   99|      1|        return arg;
  100|      1|    }
  101|       |
  102|       |    InstructionArg ConstructInstructionArgRegisterFloat(FloatRegisterID id) noexcept
  103|      0|    {
  104|      0|        InstructionArg arg;
  105|      0|        arg.m_Type                     = ArgumentType::FloatRegister;
  106|      0|        arg.register_float.register_id = id;
  107|      0|        return arg;
  108|      0|    }
  109|       |
  110|       |    InstructionArg ConstructInstructionArgImmediateValue(std::int16_t value) noexcept
  111|      0|    {
  112|      0|        InstructionArg arg;
  113|      0|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  114|      0|        arg.immediate_value.signed_value = value;
  115|      0|        return arg;
  116|      0|    }
  117|       |
  118|       |    InstructionArg ConstructInstructionArgAddressDisplacement(IntRegisterID id,
  119|       |                                                              phi::i32      displacement) noexcept
  120|      0|    {
  121|      0|        InstructionArg arg;
  122|      0|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  123|      0|        arg.address_displacement.register_id  = id;
  124|      0|        arg.address_displacement.displacement = displacement;
  125|      0|        return arg;
  126|      0|    }
  127|       |
  128|       |    InstructionArg ConstructInstructionArgLabel(std::string_view label_name) noexcept
  129|      1|    {
  130|      1|        InstructionArg arg;
  131|      1|        arg.m_Type           = ArgumentType::Label;
  132|      1|        arg.label.label_name = label_name;
  133|      1|        return arg;
  134|      1|    }
  135|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Processor.cpp:
    1|       |#include "DLX/Processor.hpp"
    2|       |
    3|       |#include "DLX/FloatRegister.hpp"
    4|       |#include "DLX/InstructionInfo.hpp"
    5|       |#include "DLX/Parser.hpp"
    6|       |#include "DLX/RegisterNames.hpp"
    7|       |#include "DLX/StatusRegister.hpp"
    8|       |#include "Phi/Core/Boolean.hpp"
    9|       |#include "Phi/Core/Log.hpp"
   10|       |#include "Phi/Core/Types.hpp"
   11|       |
   12|       |namespace dlx
   13|       |{
   14|       |    static phi::Boolean RegisterAccessTypeMatches(RegisterAccessType expected_access,
   15|       |                                                  RegisterAccessType access) noexcept
   16|      0|    {
   17|      0|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   18|      0|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   19|       |
   20|      0|        switch (expected_access)
   21|      0|        {
   22|      0|            case RegisterAccessType::Ignored:
   23|      0|                return true;
   24|      0|            case RegisterAccessType::None:
   25|      0|                return false;
   26|      0|            case RegisterAccessType::MixedFloatDouble:
   27|      0|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
   28|      0|            default:
   29|      0|                return expected_access == access;
   30|      0|        }
   31|      0|    }
   32|       |
   33|       |    Processor::Processor() noexcept
   34|       |        : m_MemoryBlock(1000u, 1000u)
   35|    996|    {
   36|       |        // Mark R0 as ready only
   37|    996|        m_IntRegisters.at(0).SetReadOnly(true);
   38|    996|    }
   39|       |
   40|       |    IntRegister& Processor::GetIntRegister(IntRegisterID id) noexcept
   41|      0|    {
   42|      0|        PHI_ASSERT(id != IntRegisterID::None);
   43|      0|        std::underlying_type_t<IntRegisterID> id_value =
   44|      0|                static_cast<std::underlying_type_t<IntRegisterID>>(id);
   45|       |
   46|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
   47|       |
   48|      0|        return m_IntRegisters.at(id_value);
   49|      0|    }
   50|       |
   51|       |    const IntRegister& Processor::GetIntRegister(IntRegisterID id) const noexcept
   52|      0|    {
   53|      0|        PHI_ASSERT(id != IntRegisterID::None);
   54|      0|        std::underlying_type_t<IntRegisterID> id_value =
   55|      0|                static_cast<std::underlying_type_t<IntRegisterID>>(id);
   56|       |
   57|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
   58|       |
   59|      0|        return m_IntRegisters.at(id_value);
   60|      0|    }
   61|       |
   62|       |    phi::i32 Processor::IntRegisterGetSignedValue(IntRegisterID id) const noexcept
   63|      0|    {
   64|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Signed))
   65|      0|        {
   66|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   67|      0|        }
   68|       |
   69|      0|        return GetIntRegister(id).GetSignedValue();
   70|      0|    }
   71|       |
   72|       |    phi::u32 Processor::IntRegisterGetUnsignedValue(IntRegisterID id) const noexcept
   73|      0|    {
   74|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   75|      0|                                       RegisterAccessType::Unsigned))
   76|      0|        {
   77|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   78|      0|        }
   79|       |
   80|      0|        return GetIntRegister(id).GetUnsignedValue();
   81|      0|    }
   82|       |
   83|       |    void Processor::IntRegisterSetSignedValue(IntRegisterID id, phi::i32 value) noexcept
   84|      0|    {
   85|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Signed))
   86|      0|        {
   87|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   88|      0|        }
   89|       |
   90|      0|        IntRegister& reg = GetIntRegister(id);
   91|       |
   92|      0|        if (reg.IsReadOnly())
   93|      0|        {
   94|      0|            return;
   95|      0|        }
   96|       |
   97|      0|        reg.SetSignedValue(value);
   98|      0|    }
   99|       |
  100|       |    void Processor::IntRegisterSetUnsignedValue(IntRegisterID id, phi::u32 value) noexcept
  101|      0|    {
  102|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  103|      0|                                       RegisterAccessType::Unsigned))
  104|      0|        {
  105|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  106|      0|        }
  107|       |
  108|      0|        IntRegister& reg = GetIntRegister(id);
  109|       |
  110|      0|        if (reg.IsReadOnly())
  111|      0|        {
  112|      0|            return;
  113|      0|        }
  114|       |
  115|      0|        reg.SetUnsignedValue(value);
  116|      0|    }
  117|       |
  118|       |    FloatRegister& Processor::GetFloatRegister(FloatRegisterID id) noexcept
  119|      0|    {
  120|      0|        PHI_ASSERT(id != FloatRegisterID::None);
  121|      0|        std::underlying_type_t<FloatRegisterID> id_value =
  122|      0|                static_cast<std::underlying_type_t<FloatRegisterID>>(id);
  123|       |
  124|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
  125|       |
  126|      0|        return m_FloatRegisters.at(id_value);
  127|      0|    }
  128|       |
  129|       |    const FloatRegister& Processor::GetFloatRegister(FloatRegisterID id) const noexcept
  130|      0|    {
  131|      0|        PHI_ASSERT(id != FloatRegisterID::None);
  132|      0|        std::underlying_type_t<FloatRegisterID> id_value =
  133|      0|                static_cast<std::underlying_type_t<FloatRegisterID>>(id);
  134|       |
  135|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
  136|       |
  137|      0|        return m_FloatRegisters.at(id_value);
  138|      0|    }
  139|       |
  140|       |    [[nodiscard]] phi::f32 Processor::FloatRegisterGetFloatValue(FloatRegisterID id) const noexcept
  141|      0|    {
  142|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Float))
  143|      0|        {
  144|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  145|      0|        }
  146|       |
  147|      0|        const FloatRegister& reg = GetFloatRegister(id);
  148|       |
  149|      0|        return reg.GetValue();
  150|      0|    }
  151|       |
  152|       |    [[nodiscard]] phi::f64 Processor::FloatRegisterGetDoubleValue(FloatRegisterID id) noexcept
  153|      0|    {
  154|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Double))
  155|      0|        {
  156|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  157|      0|        }
  158|       |
  159|      0|        if (id == FloatRegisterID::F31)
  160|      0|        {
  161|      0|            Raise(Exception::RegisterOutOfBounds);
  162|      0|            return phi::f64(0.0);
  163|      0|        }
  164|       |
  165|      0|        const FloatRegister& first_reg = GetFloatRegister(id);
  166|      0|        const FloatRegister& second_reg =
  167|      0|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  168|       |
  169|      0|        const float first_value  = first_reg.GetValue().get();
  170|      0|        const float second_value = second_reg.GetValue().get();
  171|       |
  172|      0|        const std::uint32_t first_value_bits =
  173|      0|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  174|      0|        const std::uint32_t second_value_bits =
  175|      0|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  176|       |
  177|      0|        std::uint64_t final_value_bits =
  178|      0|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  179|       |
  180|      0|        return *reinterpret_cast<double*>(&final_value_bits);
  181|      0|    }
  182|       |
  183|       |    void Processor::FloatRegisterSetFloatValue(FloatRegisterID id, phi::f32 value) noexcept
  184|      0|    {
  185|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Float))
  186|      0|        {
  187|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  188|      0|        }
  189|       |
  190|      0|        FloatRegister& reg = GetFloatRegister(id);
  191|       |
  192|      0|        reg.SetValue(value);
  193|      0|    }
  194|       |
  195|       |    void Processor::FloatRegisterSetDoubleValue(FloatRegisterID id, phi::f64 value) noexcept
  196|      0|    {
  197|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Double))
  198|      0|        {
  199|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  200|      0|        }
  201|       |
  202|      0|        if (id == FloatRegisterID::F31)
  203|      0|        {
  204|      0|            Raise(Exception::RegisterOutOfBounds);
  205|      0|            return;
  206|      0|        }
  207|       |
  208|      0|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  209|      0|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  210|       |
  211|      0|        double              value_raw  = value.get();
  212|      0|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  213|       |
  214|      0|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  215|      0|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  216|       |
  217|      0|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  218|      0|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  219|       |
  220|      0|        FloatRegister& first_reg = GetFloatRegister(id);
  221|      0|        FloatRegister& second_reg =
  222|      0|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  223|       |
  224|      0|        first_reg.SetValue(first_value);
  225|      0|        second_reg.SetValue(second_value);
  226|      0|    }
  227|       |
  228|       |    StatusRegister& Processor::GetFPSR() noexcept
  229|      0|    {
  230|      0|        return m_FPSR;
  231|      0|    }
  232|       |
  233|       |    const StatusRegister& Processor::GetFPSR() const noexcept
  234|      0|    {
  235|      0|        return m_FPSR;
  236|      0|    }
  237|       |
  238|       |    phi::Boolean Processor::GetFPSRValue() const noexcept
  239|      0|    {
  240|      0|        const StatusRegister& status_reg = GetFPSR();
  241|       |
  242|      0|        return status_reg.Get();
  243|      0|    }
  244|       |
  245|       |    void Processor::SetFPSRValue(phi::Boolean value) noexcept
  246|      0|    {
  247|      0|        StatusRegister& status_reg = GetFPSR();
  248|       |
  249|      0|        status_reg.SetStatus(value);
  250|      0|    }
  251|       |
  252|       |    void Processor::ExecuteInstruction(const Instruction& inst) noexcept
  253|      3|    {
  254|      3|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  255|       |
  256|      3|        inst.Execute(*this);
  257|      3|    }
  258|       |
  259|       |    phi::Boolean Processor::LoadProgram(ParsedProgram& program) noexcept
  260|    996|    {
  261|    996|        if (!program.m_ParseErrors.empty())
  262|    493|        {
  263|    493|            return false;
  264|    493|        }
  265|       |
  266|    503|        m_CurrentProgram = &program;
  267|       |
  268|    503|        m_ProgramCounter               = 0u;
  269|    503|        m_Halted                       = false;
  270|    503|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  271|    503|        m_LastRaisedException          = Exception::None;
  272|    503|        m_CurrentStepCount             = 0u;
  273|       |
  274|    503|        return true;
  275|    503|    }
  276|       |
  277|       |    phi::ObserverPtr<ParsedProgram> Processor::GetCurrentProgramm() const noexcept
  278|      1|    {
  279|      1|        return m_CurrentProgram;
  280|      1|    }
  281|       |
  282|       |    void Processor::ExecuteStep() noexcept
  283|    503|    {
  284|       |        // No nothing when no program is loaded
  285|    503|        if (!m_CurrentProgram)
  286|      0|        {
  287|      0|            return;
  288|      0|        }
  289|       |
  290|       |        // Halt if there are no instruction to execute
  291|    503|        if (m_CurrentProgram->m_Instructions.empty())
  292|    500|        {
  293|    500|            m_Halted = true;
  294|    500|        }
  295|       |
  296|       |        // Do nothing when processor is halted
  297|    503|        if (m_Halted)
  298|    500|        {
  299|    500|            return;
  300|    500|        }
  301|       |
  302|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  303|      3|        m_NextProgramCounter = m_ProgramCounter + 1u;
  304|       |
  305|       |        // Get current instruction pointed to by the program counter
  306|      3|        const auto& current_instruction =
  307|      3|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.get());
  308|       |
  309|       |        // Execute current instruction
  310|      3|        ExecuteInstruction(current_instruction);
  311|       |
  312|      3|        m_ProgramCounter = m_NextProgramCounter;
  313|       |
  314|      3|        ++m_CurrentStepCount;
  315|       |
  316|      3|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  317|      3|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  318|      3|        {
  319|      3|            m_Halted = true;
  320|      3|        }
  321|      3|    }
  322|       |
  323|       |    void Processor::ExecuteCurrentProgram() noexcept
  324|    503|    {
  325|       |        // Do nothing when no program is loaded
  326|    503|        if (!m_CurrentProgram)
  327|      0|        {
  328|      0|            return;
  329|      0|        }
  330|       |
  331|    503|        m_ProgramCounter               = 0u;
  332|    503|        m_Halted                       = false;
  333|    503|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  334|    503|        m_LastRaisedException          = Exception::None;
  335|    503|        m_CurrentStepCount             = 0u;
  336|       |
  337|  1.00k|        while (!m_Halted)
  338|    503|        {
  339|    503|            ExecuteStep();
  340|    503|        }
  341|    503|    }
  342|       |
  343|       |    void Processor::ClearRegisters() noexcept
  344|    996|    {
  345|    996|        for (auto& reg : m_IntRegisters)
  346|  31.8k|        {
  347|  31.8k|            reg.SetSignedValue(0);
  348|  31.8k|        }
  349|       |
  350|    996|        for (auto& reg : m_FloatRegisters)
  351|  31.8k|        {
  352|  31.8k|            reg.SetValue(0.0f);
  353|  31.8k|        }
  354|       |
  355|    996|        m_FPSR.SetStatus(false);
  356|    996|    }
  357|       |
  358|       |    void Processor::ClearMemory() noexcept
  359|    996|    {
  360|    996|        m_MemoryBlock.Clear();
  361|    996|    }
  362|       |
  363|       |    void Processor::Raise(Exception exception) noexcept
  364|      3|    {
  365|      3|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  366|       |
  367|      3|        m_LastRaisedException = exception;
  368|       |
  369|      3|        switch (exception)
  370|      3|        {
  371|      0|            case Exception::None:
  372|      0|                PHI_ASSERT_NOT_REACHED();
  373|      0|                return;
  374|      0|            case Exception::DivideByZero:
  375|      0|                m_Halted = true;
  376|      0|                PHI_LOG_ERROR("Division through zero");
  377|      0|                return;
  378|      0|            case Exception::Overflow:
  379|      0|                PHI_LOG_WARN("Overflow");
  380|      0|                return;
  381|      0|            case Exception::Underflow:
  382|      0|                PHI_LOG_WARN("Underflow");
  383|      0|                return;
  384|      0|            case Exception::Trap:
  385|      0|                m_Halted = true;
  386|      0|                PHI_LOG_ERROR("Trapped");
  387|      0|                return;
  388|      2|            case Exception::Halt:
  389|      2|                m_Halted = true;
  390|      2|                return;
  391|      1|            case Exception::UnknownLabel:
  392|      1|                m_Halted = true;
  393|      1|                PHI_LOG_ERROR("Unknown label");
  394|      1|                return;
  395|      0|            case Exception::BadShift:
  396|      0|                PHI_LOG_ERROR("Bad shift");
  397|      0|                return;
  398|      0|            case Exception::AddressOutOfBounds:
  399|      0|                PHI_LOG_ERROR("Address out of bounds");
  400|      0|                m_Halted = true;
  401|      0|                return;
  402|      0|            case Exception::RegisterOutOfBounds:
  403|      0|                PHI_LOG_ERROR("Register out of bounds");
  404|      0|                m_Halted = true;
  405|      0|                return;
  406|      0|        }
  407|       |
  408|      0|        PHI_ASSERT_NOT_REACHED();
  409|      0|    }
  410|       |
  411|       |    Exception Processor::GetLastRaisedException() const noexcept
  412|      0|    {
  413|      0|        return m_LastRaisedException;
  414|      0|    }
  415|       |
  416|       |    phi::Boolean Processor::IsHalted() const noexcept
  417|      0|    {
  418|      0|        return m_Halted;
  419|      0|    }
  420|       |
  421|       |    const MemoryBlock& Processor::GetMemory() const noexcept
  422|      0|    {
  423|      0|        return m_MemoryBlock;
  424|      0|    }
  425|       |
  426|       |    MemoryBlock& Processor::GetMemory() noexcept
  427|      0|    {
  428|      0|        return m_MemoryBlock;
  429|      0|    }
  430|       |
  431|       |    phi::u32 Processor::GetProgramCounter() const noexcept
  432|      0|    {
  433|      0|        return m_ProgramCounter;
  434|      0|    }
  435|       |
  436|       |    void Processor::SetProgramCounter(phi::u32 new_pc) noexcept
  437|      0|    {
  438|      0|        m_ProgramCounter = new_pc;
  439|      0|    }
  440|       |
  441|       |    [[nodiscard]] phi::u32 Processor::GetNextProgramCounter() const noexcept
  442|      0|    {
  443|      0|        return m_NextProgramCounter;
  444|      0|    }
  445|       |
  446|       |    void Processor::SetNextProgramCounter(phi::u32 new_npc) noexcept
  447|      0|    {
  448|      0|        m_NextProgramCounter = new_npc;
  449|      0|    }
  450|       |
  451|       |    phi::usize Processor::GetCurrentStepCount() const noexcept
  452|      0|    {
  453|      0|        return m_CurrentStepCount;
  454|      0|    }
  455|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionImplementation.cpp:
    1|       |#include "DLX/InstructionImplementation.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/InstructionInfo.hpp"
    5|       |#include "DLX/Parser.hpp"
    6|       |#include "DLX/Processor.hpp"
    7|       |#include "DLX/RegisterNames.hpp"
    8|       |#include "Phi/Core/Assert.hpp"
    9|       |#include "Phi/Core/Boolean.hpp"
   10|       |#include "Phi/Core/Types.hpp"
   11|       |#include <string_view>
   12|       |
   13|       |namespace dlx
   14|       |{
   15|       |    static std::int32_t clear_top_n_bits(std::int32_t value, std::int32_t n) noexcept
   16|      0|    {
   17|      0|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behaviour");
   18|       |
   19|      0|        return value & ~(-1 << (32 - n));
   20|      0|    }
   21|       |
   22|       |    static void JumpToLabel(Processor& processor, std::string_view label_name) noexcept
   23|      1|    {
   24|       |        // Lookup the label
   25|      1|        const phi::ObserverPtr<ParsedProgram> program = processor.GetCurrentProgramm();
   26|      1|        PHI_ASSERT(program);
   27|       |
   28|      1|        std::string label(label_name.data(), label_name.size());
   29|      1|        if (program->m_JumpData.find(label) == program->m_JumpData.end())
   30|      1|        {
   31|      1|            PHI_LOG_ERROR("Unable to find jump label {}", label_name);
   32|      1|            processor.Raise(Exception::UnknownLabel);
   33|      1|            return;
   34|      1|        }
   35|       |
   36|       |        // Set program counter
   37|      0|        processor.SetNextProgramCounter(program->m_JumpData.at(label));
   38|      0|    }
   39|       |
   40|       |    static void JumpToRegister(Processor& processor, IntRegisterID reg_id) noexcept
   41|      0|    {
   42|      0|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   43|       |
   44|      0|        phi::u32 max_address =
   45|      0|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   46|      0|        if (address >= max_address)
   47|      0|        {
   48|      0|            processor.Raise(Exception::AddressOutOfBounds);
   49|      0|            return;
   50|      0|        }
   51|       |
   52|      0|        processor.SetNextProgramCounter(address.get());
   53|      0|    }
   54|       |
   55|       |    static std::optional<phi::i32> CalculateDisplacementAddress(
   56|       |            Processor&                                 processor,
   57|       |            const InstructionArg::AddressDisplacement& adr_displacement) noexcept
   58|      0|    {
   59|      0|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   60|       |
   61|      0|        phi::i32 address = adr_displacement.displacement + register_value;
   62|       |
   63|      0|        if (address < 0)
   64|      0|        {
   65|      0|            processor.Raise(Exception::AddressOutOfBounds);
   66|      0|            return {};
   67|      0|        }
   68|       |
   69|      0|        return address;
   70|      0|    }
   71|       |
   72|       |    static std::optional<phi::i32> GetLoadStoreAddress(Processor&           processor,
   73|       |                                                       const InstructionArg argument) noexcept
   74|      0|    {
   75|      0|        if (argument.GetType() == ArgumentType::ImmediateInteger)
   76|      0|        {
   77|      0|            const auto& imm_value = argument.AsImmediateValue();
   78|       |
   79|      0|            if (imm_value.signed_value < 0)
   80|      0|            {
   81|      0|                return {};
   82|      0|            }
   83|       |
   84|      0|            return imm_value.signed_value;
   85|      0|        }
   86|       |
   87|      0|        if (argument.GetType() == ArgumentType::AddressDisplacement)
   88|      0|        {
   89|      0|            const auto& adr_displacement = argument.AsAddressDisplacement();
   90|      0|            return CalculateDisplacementAddress(processor, adr_displacement);
   91|      0|        }
   92|       |
   93|      0|        PHI_ASSERT_NOT_REACHED();
   94|      0|    }
   95|       |
   96|       |    static void SafeWriteInteger(Processor& processor, IntRegisterID dest_reg,
   97|       |                                 phi::i64 value) noexcept
   98|      0|    {
   99|      0|        constexpr phi::i64 min = phi::i32::limits_type::min();
  100|      0|        constexpr phi::i64 max = phi::i32::limits_type::max();
  101|       |
  102|       |        // Check for underflow
  103|      0|        if (value < min)
  104|      0|        {
  105|      0|            processor.Raise(Exception::Underflow);
  106|       |
  107|      0|            value = max + (value % (min - 1));
  108|      0|        }
  109|       |        // Check for overflow
  110|      0|        else if (value > max)
  111|      0|        {
  112|      0|            processor.Raise(Exception::Overflow);
  113|       |
  114|      0|            value = min + (value % (max + 1));
  115|      0|        }
  116|       |
  117|      0|        PHI_ASSERT(value >= min);
  118|      0|        PHI_ASSERT(value <= max);
  119|       |
  120|      0|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.get()));
  121|      0|    }
  122|       |
  123|       |    static void SafeWriteInteger(Processor& processor, IntRegisterID dest_reg,
  124|       |                                 phi::u64 value) noexcept
  125|      0|    {
  126|      0|        constexpr phi::u64 min = phi::u32::limits_type::min();
  127|      0|        constexpr phi::u64 max = phi::u32::limits_type::max();
  128|       |
  129|       |        // Check for overflow
  130|      0|        if (value > max)
  131|      0|        {
  132|      0|            processor.Raise(Exception::Overflow);
  133|       |
  134|      0|            value %= max + 1u;
  135|      0|        }
  136|       |
  137|      0|        PHI_ASSERT(value <= max);
  138|       |
  139|      0|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.get()));
  140|      0|    }
  141|       |
  142|       |    static void Addition(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  143|       |                         phi::i32 rhs) noexcept
  144|      0|    {
  145|      0|        phi::i64 res = phi::i64(lhs) + rhs;
  146|       |
  147|      0|        SafeWriteInteger(processor, dest_reg, res);
  148|      0|    }
  149|       |
  150|       |    static void Addition(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  151|       |                         phi::u32 rhs) noexcept
  152|      0|    {
  153|      0|        phi::u64 res = phi::u64(lhs) + rhs;
  154|       |
  155|      0|        SafeWriteInteger(processor, dest_reg, res);
  156|      0|    }
  157|       |
  158|       |    static void Subtraction(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  159|       |                            phi::i32 rhs) noexcept
  160|      0|    {
  161|      0|        phi::i64 res = phi::i64(lhs) - rhs;
  162|       |
  163|      0|        SafeWriteInteger(processor, dest_reg, res);
  164|      0|    }
  165|       |
  166|       |    static void Subtraction(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  167|       |                            phi::u32 rhs) noexcept
  168|      0|    {
  169|      0|        constexpr phi::u32 max = phi::u32::limits_type::max();
  170|       |
  171|      0|        if (lhs < rhs)
  172|      0|        {
  173|      0|            processor.Raise(Exception::Underflow);
  174|       |
  175|      0|            phi::u64 res = max - rhs + lhs + 1u;
  176|      0|            SafeWriteInteger(processor, dest_reg, res);
  177|      0|            return;
  178|      0|        }
  179|       |
  180|      0|        phi::u64 res = phi::u64(lhs) - rhs;
  181|       |
  182|      0|        SafeWriteInteger(processor, dest_reg, res);
  183|      0|    }
  184|       |
  185|       |    static void Multiplication(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  186|       |                               phi::i32 rhs) noexcept
  187|      0|    {
  188|      0|        phi::i64 res = phi::i64(lhs) * rhs;
  189|       |
  190|      0|        SafeWriteInteger(processor, dest_reg, res);
  191|      0|    }
  192|       |
  193|       |    static void Multiplication(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  194|       |                               phi::u32 rhs) noexcept
  195|      0|    {
  196|      0|        phi::u64 res = phi::u64(lhs) * rhs;
  197|       |
  198|      0|        SafeWriteInteger(processor, dest_reg, res);
  199|      0|    }
  200|       |
  201|       |    static void Division(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  202|       |                         phi::i32 rhs) noexcept
  203|      0|    {
  204|      0|        if (rhs == 0)
  205|      0|        {
  206|      0|            processor.Raise(Exception::DivideByZero);
  207|      0|            return;
  208|      0|        }
  209|       |
  210|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  211|       |
  212|      0|        SafeWriteInteger(processor, dest_reg, res);
  213|      0|    }
  214|       |
  215|       |    static void Division(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  216|       |                         phi::u32 rhs) noexcept
  217|      0|    {
  218|      0|        if (rhs == 0u)
  219|      0|        {
  220|      0|            processor.Raise(Exception::DivideByZero);
  221|      0|            return;
  222|      0|        }
  223|       |
  224|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  225|       |
  226|      0|        SafeWriteInteger(processor, dest_reg, res);
  227|      0|    }
  228|       |
  229|       |    static void ShiftRightLogical(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  230|       |                                  phi::i32 shift) noexcept
  231|      0|    {
  232|       |        // Prevent undefined behavior by shifting by more than 31
  233|      0|        if (shift > 31)
  234|      0|        {
  235|      0|            processor.Raise(Exception::BadShift);
  236|       |
  237|       |            // Just set register to 0
  238|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  239|      0|            return;
  240|      0|        }
  241|       |
  242|       |        // Do nothing when shifting by zero to prevent undefined behavior
  243|      0|        if (shift == 0)
  244|      0|        {
  245|      0|            processor.IntRegisterSetSignedValue(dest_reg, base);
  246|      0|            return;
  247|      0|        }
  248|       |
  249|       |        // Negative shifts are undefiend behaviour
  250|      0|        if (shift < 0)
  251|      0|        {
  252|      0|            processor.Raise(Exception::BadShift);
  253|      0|            return;
  254|      0|        }
  255|       |
  256|      0|        phi::i32 new_value = base.get() >> shift.get();
  257|       |
  258|      0|        new_value = clear_top_n_bits(new_value.get(), shift.get());
  259|       |
  260|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  261|      0|    }
  262|       |
  263|       |    static void ShiftRightArithmetic(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  264|       |                                     phi::i32 shift) noexcept
  265|      0|    {
  266|       |        // Prevent undefined behavior by shifting by more than 31
  267|      0|        if (shift > 31)
  268|      0|        {
  269|      0|            processor.Raise(Exception::BadShift);
  270|       |
  271|       |            // Is negative ie. sign bit is set
  272|      0|            if (base < 0)
  273|      0|            {
  274|       |                // Set every byte to 1
  275|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  276|      0|            }
  277|      0|            else
  278|      0|            {
  279|       |                // Set every byte to 0
  280|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  281|      0|            }
  282|      0|            return;
  283|      0|        }
  284|       |
  285|       |        // Negative shifts are undefined behaviour
  286|      0|        if (shift < 0)
  287|      0|        {
  288|      0|            processor.Raise(Exception::BadShift);
  289|      0|            return;
  290|      0|        }
  291|       |
  292|      0|        phi::i32 new_value = base.get() >> shift.get();
  293|       |
  294|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  295|      0|    }
  296|       |
  297|       |    // Behavior is the same for logical and arithmetic shifts
  298|       |    static void ShiftLeft(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  299|       |                          phi::i32 shift) noexcept
  300|      0|    {
  301|      0|        if (shift > 31)
  302|      0|        {
  303|      0|            processor.Raise(Exception::BadShift);
  304|       |
  305|       |            // Just set register to 0
  306|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  307|      0|            return;
  308|      0|        }
  309|       |
  310|       |        // Negative shifts are undefined behaviour
  311|      0|        if (shift < 0)
  312|      0|        {
  313|      0|            processor.Raise(Exception::BadShift);
  314|      0|            return;
  315|      0|        }
  316|       |
  317|      0|        phi::i32 new_value = base.get() << shift.get();
  318|       |
  319|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|      0|    }
  321|       |
  322|       |    namespace impl
  323|       |    {
  324|       |        void ADD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  325|       |                 const InstructionArg& arg3) noexcept
  326|      0|        {
  327|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  328|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  329|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  330|       |
  331|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  332|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  333|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  334|       |
  335|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  336|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  337|       |
  338|      0|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  339|      0|        }
  340|       |
  341|       |        void ADDI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  342|       |                  const InstructionArg& arg3) noexcept
  343|      0|        {
  344|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  345|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  346|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  347|       |
  348|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  349|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  350|      0|            const auto& imm_value = arg3.AsImmediateValue();
  351|       |
  352|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  353|       |
  354|      0|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  355|      0|        }
  356|       |
  357|       |        void ADDU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  358|       |                  const InstructionArg& arg3) noexcept
  359|      0|        {
  360|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  361|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  362|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  363|       |
  364|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  365|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  366|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  367|       |
  368|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  369|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  370|       |
  371|      0|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  372|      0|        }
  373|       |
  374|       |        void ADDUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  375|       |                   const InstructionArg& arg3) noexcept
  376|      0|        {
  377|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  378|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  379|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  380|       |
  381|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  382|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  383|      0|            const auto& imm_value = arg3.AsImmediateValue();
  384|       |
  385|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  386|       |
  387|      0|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  388|      0|        }
  389|       |
  390|       |        void ADDF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  391|       |                  const InstructionArg& arg3) noexcept
  392|      0|        {
  393|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  394|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  395|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  396|       |
  397|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  398|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  399|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  400|       |
  401|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  402|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  403|       |
  404|      0|            const phi::f32 new_value = lhs_value + rhs_value;
  405|       |
  406|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  407|      0|        }
  408|       |
  409|       |        void ADDD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  410|       |                  const InstructionArg& arg3) noexcept
  411|      0|        {
  412|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  413|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  414|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  415|       |
  416|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  417|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  418|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  419|       |
  420|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  421|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  422|       |
  423|      0|            const phi::f64 new_value = lhs_value + rhs_value;
  424|       |
  425|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  426|      0|        }
  427|       |
  428|       |        void SUB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  429|       |                 const InstructionArg& arg3) noexcept
  430|      0|        {
  431|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  432|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  433|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  434|       |
  435|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  436|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  437|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  438|       |
  439|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  440|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  441|       |
  442|      0|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  443|      0|        }
  444|       |
  445|       |        void SUBI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  446|       |                  const InstructionArg& arg3) noexcept
  447|      0|        {
  448|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  449|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  450|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  451|       |
  452|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  453|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  454|      0|            const auto& imm_value = arg3.AsImmediateValue();
  455|       |
  456|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  457|       |
  458|      0|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  459|      0|        }
  460|       |
  461|       |        void SUBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  462|       |                  const InstructionArg& arg3) noexcept
  463|      0|        {
  464|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  465|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  466|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  467|       |
  468|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  469|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  470|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  471|       |
  472|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  473|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  474|       |
  475|      0|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  476|      0|        }
  477|       |
  478|       |        void SUBUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  479|       |                   const InstructionArg& arg3) noexcept
  480|      0|        {
  481|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  482|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  483|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  484|       |
  485|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  486|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  487|      0|            const auto& imm_value = arg3.AsImmediateValue();
  488|       |
  489|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  490|       |
  491|      0|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  492|      0|        }
  493|       |
  494|       |        void SUBF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  495|       |                  const InstructionArg& arg3) noexcept
  496|      0|        {
  497|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  498|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  499|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  500|       |
  501|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  502|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  503|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  504|       |
  505|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  506|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  507|       |
  508|      0|            const phi::f32 new_value = lhs_value - rhs_value;
  509|       |
  510|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  511|      0|        }
  512|       |
  513|       |        void SUBD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  514|       |                  const InstructionArg& arg3) noexcept
  515|      0|        {
  516|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  517|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  518|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  519|       |
  520|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  521|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  522|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  523|       |
  524|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  525|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  526|       |
  527|      0|            const phi::f64 new_value = lhs_value - rhs_value;
  528|       |
  529|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  530|      0|        }
  531|       |
  532|       |        void MULT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  533|       |                  const InstructionArg& arg3) noexcept
  534|      0|        {
  535|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  536|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  537|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  538|       |
  539|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  540|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  541|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  542|       |
  543|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  544|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  545|       |
  546|      0|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  547|      0|        }
  548|       |
  549|       |        void MULTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  550|       |                   const InstructionArg& arg3) noexcept
  551|      0|        {
  552|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  553|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  554|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  555|       |
  556|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  557|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  558|      0|            const auto& imm_value = arg3.AsImmediateValue();
  559|       |
  560|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  561|       |
  562|      0|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  563|      0|        }
  564|       |
  565|       |        void MULTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  566|       |                   const InstructionArg& arg3) noexcept
  567|      0|        {
  568|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  569|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  570|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  571|       |
  572|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  573|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  574|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  575|       |
  576|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  577|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  578|       |
  579|      0|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  580|      0|        }
  581|       |
  582|       |        void MULTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  583|       |                    const InstructionArg& arg3) noexcept
  584|      0|        {
  585|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  586|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  587|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  588|       |
  589|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  590|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  591|      0|            const auto& imm_value = arg3.AsImmediateValue();
  592|       |
  593|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  594|       |
  595|      0|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  596|      0|        }
  597|       |
  598|       |        void MULTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  599|       |                   const InstructionArg& arg3) noexcept
  600|      0|        {
  601|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  602|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  603|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  604|       |
  605|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  606|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  607|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  608|       |
  609|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  610|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  611|       |
  612|      0|            const phi::f32 new_value = lhs_value * rhs_value;
  613|       |
  614|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  615|      0|        }
  616|       |
  617|       |        void MULTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  618|       |                   const InstructionArg& arg3) noexcept
  619|      0|        {
  620|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  621|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  622|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  623|       |
  624|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  625|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  626|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  627|       |
  628|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  629|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  630|       |
  631|      0|            const phi::f64 new_value = lhs_value * rhs_value;
  632|       |
  633|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  634|      0|        }
  635|       |
  636|       |        void DIV(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  637|       |                 const InstructionArg& arg3) noexcept
  638|      0|        {
  639|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  640|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  641|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  642|       |
  643|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  644|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  645|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  646|       |
  647|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  648|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  649|       |
  650|      0|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  651|      0|        }
  652|       |
  653|       |        void DIVI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  654|       |                  const InstructionArg& arg3) noexcept
  655|      0|        {
  656|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  657|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  658|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  659|       |
  660|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  661|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  662|      0|            const auto& imm_value = arg3.AsImmediateValue();
  663|       |
  664|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  665|       |
  666|      0|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  667|      0|        }
  668|       |
  669|       |        void DIVU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  670|       |                  const InstructionArg& arg3) noexcept
  671|      0|        {
  672|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  673|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  674|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  675|       |
  676|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  677|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  678|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  679|       |
  680|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  681|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  682|       |
  683|      0|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  684|      0|        }
  685|       |
  686|       |        void DIVUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  687|       |                   const InstructionArg& arg3) noexcept
  688|      0|        {
  689|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  690|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  691|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  692|       |
  693|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  694|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  695|      0|            const auto& imm_value = arg3.AsImmediateValue();
  696|       |
  697|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  698|       |
  699|      0|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  700|      0|        }
  701|       |
  702|       |        void DIVF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  703|       |                  const InstructionArg& arg3) noexcept
  704|      0|        {
  705|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  706|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  707|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  708|       |
  709|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  710|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  711|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  712|       |
  713|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  714|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  715|       |
  716|      0|            if (rhs_value.get() == 0.0f)
  717|      0|            {
  718|      0|                processor.Raise(Exception::DivideByZero);
  719|      0|                return;
  720|      0|            }
  721|       |
  722|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  723|       |
  724|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  725|      0|        }
  726|       |
  727|       |        void DIVD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  728|       |                  const InstructionArg& arg3) noexcept
  729|      0|        {
  730|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  731|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  732|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  733|       |
  734|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  735|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  736|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  737|       |
  738|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  739|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  740|       |
  741|      0|            if (rhs_value.get() == 0.0)
  742|      0|            {
  743|      0|                processor.Raise(Exception::DivideByZero);
  744|      0|                return;
  745|      0|            }
  746|       |
  747|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  748|       |
  749|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  750|      0|        }
  751|       |
  752|       |        void SLL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  753|       |                 const InstructionArg& arg3) noexcept
  754|      0|        {
  755|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  756|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  757|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  758|       |
  759|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  760|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  761|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  762|       |
  763|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  764|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  765|       |
  766|      0|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  767|      0|        }
  768|       |
  769|       |        void SLLI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  770|       |                  const InstructionArg& arg3) noexcept
  771|      0|        {
  772|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  773|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  774|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  775|       |
  776|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  777|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  778|      0|            const auto& imm_value = arg3.AsImmediateValue();
  779|       |
  780|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  781|      0|            phi::i32 shift_value = imm_value.signed_value;
  782|       |
  783|      0|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  784|      0|        }
  785|       |
  786|       |        void SRL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  787|       |                 const InstructionArg& arg3) noexcept
  788|      0|        {
  789|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  790|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  791|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  792|       |
  793|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  794|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  795|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  796|       |
  797|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  798|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  799|       |
  800|      0|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  801|      0|        }
  802|       |
  803|       |        void SRLI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  804|       |                  const InstructionArg& arg3) noexcept
  805|      0|        {
  806|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  807|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  808|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  809|       |
  810|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  811|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  812|      0|            const auto& imm_value = arg3.AsImmediateValue();
  813|       |
  814|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  815|      0|            phi::i32 shift_value = imm_value.signed_value;
  816|       |
  817|      0|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  818|      0|        }
  819|       |
  820|       |        void SLA(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  821|       |                 const InstructionArg& arg3) noexcept
  822|      0|        {
  823|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  824|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  825|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  826|       |
  827|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  828|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  829|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  830|       |
  831|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  832|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  833|       |
  834|      0|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  835|      0|        }
  836|       |
  837|       |        void SLAI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  838|       |                  const InstructionArg& arg3) noexcept
  839|      0|        {
  840|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  841|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  842|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  843|       |
  844|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  845|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  846|      0|            const auto& imm_value = arg3.AsImmediateValue();
  847|       |
  848|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  849|      0|            phi::i32 shift_value = imm_value.signed_value;
  850|       |
  851|      0|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  852|      0|        }
  853|       |
  854|       |        void SRA(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  855|       |                 const InstructionArg& arg3) noexcept
  856|      0|        {
  857|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  858|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  859|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  860|       |
  861|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  862|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  863|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  864|       |
  865|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  866|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  867|       |
  868|      0|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  869|      0|        }
  870|       |
  871|       |        void SRAI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  872|       |                  const InstructionArg& arg3) noexcept
  873|      0|        {
  874|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  875|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  876|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  877|       |
  878|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  879|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  880|      0|            const auto& imm_value = arg3.AsImmediateValue();
  881|       |
  882|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  883|      0|            phi::i32 shift_value = imm_value.signed_value;
  884|       |
  885|      0|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  886|      0|        }
  887|       |
  888|       |        void AND(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  889|       |                 const InstructionArg& arg3) noexcept
  890|      0|        {
  891|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  892|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  893|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  894|       |
  895|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  896|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  897|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  898|       |
  899|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  900|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  901|      0|            phi::i32 new_value = lhs_value.get() & rhs_value.get();
  902|       |
  903|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  904|      0|        }
  905|       |
  906|       |        void ANDI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  907|       |                  const InstructionArg& arg3) noexcept
  908|      0|        {
  909|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  910|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  911|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  912|       |
  913|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  914|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  915|      0|            const auto& imm_value = arg3.AsImmediateValue();
  916|       |
  917|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  918|      0|            phi::i32 new_value = src_value.get() & imm_value.signed_value.get();
  919|       |
  920|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  921|      0|        }
  922|       |
  923|       |        void OR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  924|       |                const InstructionArg& arg3) noexcept
  925|      0|        {
  926|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  927|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  928|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  929|       |
  930|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  931|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  932|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  933|       |
  934|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  935|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  936|      0|            phi::i32 new_value = lhs_value.get() | rhs_value.get();
  937|       |
  938|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  939|      0|        }
  940|       |
  941|       |        void ORI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  942|       |                 const InstructionArg& arg3) noexcept
  943|      0|        {
  944|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  945|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  946|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  947|       |
  948|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  949|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  950|      0|            const auto& imm_value = arg3.AsImmediateValue();
  951|       |
  952|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  953|      0|            phi::i32 new_value = src_value.get() | imm_value.signed_value.get();
  954|       |
  955|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  956|      0|        }
  957|       |
  958|       |        void XOR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  959|       |                 const InstructionArg& arg3) noexcept
  960|      0|        {
  961|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  962|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  963|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  964|       |
  965|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  966|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  967|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  968|       |
  969|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  970|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  971|      0|            phi::i32 new_value = lhs_value.get() ^ rhs_value.get();
  972|       |
  973|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  974|      0|        }
  975|       |
  976|       |        void XORI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  977|       |                  const InstructionArg& arg3) noexcept
  978|      0|        {
  979|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  980|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  981|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  982|       |
  983|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  984|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  985|      0|            const auto& imm_value = arg3.AsImmediateValue();
  986|       |
  987|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  988|      0|            phi::i32 new_value = src_value.get() ^ imm_value.signed_value.get();
  989|       |
  990|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  991|      0|        }
  992|       |
  993|       |        void SLT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  994|       |                 const InstructionArg& arg3) noexcept
  995|      0|        {
  996|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  997|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  998|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  999|       |
 1000|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1001|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1002|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1003|       |
 1004|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1005|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1006|       |
 1007|      0|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
 1008|       |
 1009|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1010|      0|        }
 1011|       |
 1012|       |        void SLTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1013|       |                  const InstructionArg& arg3) noexcept
 1014|      0|        {
 1015|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1016|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1017|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1018|       |
 1019|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1020|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1021|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1022|       |
 1023|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1024|       |
 1025|      0|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
 1026|       |
 1027|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1028|      0|        }
 1029|       |
 1030|       |        void SLTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1031|       |                  const InstructionArg& arg3) noexcept
 1032|      0|        {
 1033|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1034|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1035|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1036|       |
 1037|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1038|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1039|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1040|       |
 1041|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1042|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1043|       |
 1044|      0|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
 1045|       |
 1046|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1047|      0|        }
 1048|       |
 1049|       |        void SLTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1050|       |                   const InstructionArg& arg3) noexcept
 1051|      0|        {
 1052|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1053|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1054|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1055|       |
 1056|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1057|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1058|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1059|       |
 1060|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1061|       |
 1062|      0|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
 1063|       |
 1064|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1065|      0|        }
 1066|       |
 1067|       |        void LTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1068|       |                 const InstructionArg& arg3) noexcept
 1069|      0|        {
 1070|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1071|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1072|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1073|       |
 1074|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1075|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1076|       |
 1077|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1078|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1079|       |
 1080|      0|            const phi::Boolean new_value = (lhs_value < rhs_value);
 1081|       |
 1082|      0|            processor.SetFPSRValue(new_value);
 1083|      0|        }
 1084|       |
 1085|       |        void LTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1086|       |                 const InstructionArg& arg3) noexcept
 1087|      0|        {
 1088|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1089|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1090|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1091|       |
 1092|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1093|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1094|       |
 1095|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1096|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1097|       |
 1098|      0|            const phi::Boolean new_value = (lhs_value < rhs_value);
 1099|       |
 1100|      0|            processor.SetFPSRValue(new_value);
 1101|      0|        }
 1102|       |
 1103|       |        void SGT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1104|       |                 const InstructionArg& arg3) noexcept
 1105|      0|        {
 1106|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1107|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1108|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1109|       |
 1110|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1111|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1112|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1113|       |
 1114|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1115|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1116|       |
 1117|      0|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
 1118|       |
 1119|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1120|      0|        }
 1121|       |
 1122|       |        void SGTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1123|       |                  const InstructionArg& arg3) noexcept
 1124|      0|        {
 1125|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1126|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1127|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1128|       |
 1129|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1130|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1131|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1132|       |
 1133|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1134|       |
 1135|      0|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
 1136|       |
 1137|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1138|      0|        }
 1139|       |
 1140|       |        void SGTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1141|       |                  const InstructionArg& arg3) noexcept
 1142|      0|        {
 1143|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1144|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1145|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1146|       |
 1147|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1148|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1149|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1150|       |
 1151|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1152|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1153|       |
 1154|      0|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
 1155|       |
 1156|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1157|      0|        }
 1158|       |
 1159|       |        void SGTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1160|       |                   const InstructionArg& arg3) noexcept
 1161|      0|        {
 1162|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1163|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1164|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1165|       |
 1166|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1167|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1168|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1169|       |
 1170|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1171|       |
 1172|      0|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
 1173|       |
 1174|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1175|      0|        }
 1176|       |
 1177|       |        void GTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1178|       |                 const InstructionArg& arg3) noexcept
 1179|      0|        {
 1180|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1181|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1182|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1183|       |
 1184|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1185|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1186|       |
 1187|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1188|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1189|       |
 1190|      0|            const phi::Boolean new_value = (lhs_value > rhs_value);
 1191|       |
 1192|      0|            processor.SetFPSRValue(new_value);
 1193|      0|        }
 1194|       |
 1195|       |        void GTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1196|       |                 const InstructionArg& arg3) noexcept
 1197|      0|        {
 1198|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1199|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1200|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1201|       |
 1202|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1203|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1204|       |
 1205|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1206|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1207|       |
 1208|      0|            const phi::Boolean new_value = (lhs_value > rhs_value);
 1209|       |
 1210|      0|            processor.SetFPSRValue(new_value);
 1211|      0|        }
 1212|       |
 1213|       |        void SLE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1214|       |                 const InstructionArg& arg3) noexcept
 1215|      0|        {
 1216|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1217|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1218|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1219|       |
 1220|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1221|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1222|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1223|       |
 1224|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1225|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1226|       |
 1227|      0|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
 1228|       |
 1229|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1230|      0|        }
 1231|       |
 1232|       |        void SLEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1233|       |                  const InstructionArg& arg3) noexcept
 1234|      0|        {
 1235|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1236|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1237|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1238|       |
 1239|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1240|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1241|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1242|       |
 1243|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1244|       |
 1245|      0|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
 1246|       |
 1247|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1248|      0|        }
 1249|       |
 1250|       |        void SLEU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1251|       |                  const InstructionArg& arg3) noexcept
 1252|      0|        {
 1253|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1254|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1255|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1256|       |
 1257|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1258|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1259|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1260|       |
 1261|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1262|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1263|       |
 1264|      0|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
 1265|       |
 1266|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1267|      0|        }
 1268|       |
 1269|       |        void SLEUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1270|       |                   const InstructionArg& arg3) noexcept
 1271|      0|        {
 1272|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1273|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1274|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1275|       |
 1276|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1277|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1278|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1279|       |
 1280|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1281|       |
 1282|      0|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
 1283|       |
 1284|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1285|      0|        }
 1286|       |
 1287|       |        void LEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1288|       |                 const InstructionArg& arg3) noexcept
 1289|      0|        {
 1290|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1291|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1292|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1293|       |
 1294|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1295|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1296|       |
 1297|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1298|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1299|       |
 1300|      0|            const phi::Boolean new_value = (lhs_value <= rhs_value);
 1301|       |
 1302|      0|            processor.SetFPSRValue(new_value);
 1303|      0|        }
 1304|       |
 1305|       |        void LED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1306|       |                 const InstructionArg& arg3) noexcept
 1307|      0|        {
 1308|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1309|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1310|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1311|       |
 1312|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1313|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1314|       |
 1315|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1316|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1317|       |
 1318|      0|            const phi::Boolean new_value = (lhs_value <= rhs_value);
 1319|       |
 1320|      0|            processor.SetFPSRValue(new_value);
 1321|      0|        }
 1322|       |
 1323|       |        void SGE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1324|       |                 const InstructionArg& arg3) noexcept
 1325|      0|        {
 1326|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1327|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1328|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1329|       |
 1330|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1331|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1332|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1333|       |
 1334|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1335|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1336|       |
 1337|      0|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
 1338|       |
 1339|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1340|      0|        }
 1341|       |
 1342|       |        void SGEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1343|       |                  const InstructionArg& arg3) noexcept
 1344|      0|        {
 1345|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1346|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1347|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1348|       |
 1349|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1350|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1351|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1352|       |
 1353|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1354|       |
 1355|      0|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
 1356|       |
 1357|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1358|      0|        }
 1359|       |
 1360|       |        void SGEU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1361|       |                  const InstructionArg& arg3) noexcept
 1362|      0|        {
 1363|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1364|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1365|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1366|       |
 1367|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1368|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1369|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1370|       |
 1371|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1372|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1373|       |
 1374|      0|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
 1375|       |
 1376|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1377|      0|        }
 1378|       |
 1379|       |        void SGEUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1380|       |                   const InstructionArg& arg3) noexcept
 1381|      0|        {
 1382|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1383|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1384|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1385|       |
 1386|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1387|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1388|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1389|       |
 1390|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1391|       |
 1392|      0|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
 1393|       |
 1394|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1395|      0|        }
 1396|       |
 1397|       |        void GEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1398|       |                 const InstructionArg& arg3) noexcept
 1399|      0|        {
 1400|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1401|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1402|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1403|       |
 1404|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1405|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1406|       |
 1407|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1408|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1409|       |
 1410|      0|            const phi::Boolean new_value = (lhs_value >= rhs_value);
 1411|       |
 1412|      0|            processor.SetFPSRValue(new_value);
 1413|      0|        }
 1414|       |
 1415|       |        void GED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1416|       |                 const InstructionArg& arg3) noexcept
 1417|      0|        {
 1418|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1419|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1420|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1421|       |
 1422|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1423|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1424|       |
 1425|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1426|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1427|       |
 1428|      0|            const phi::Boolean new_value = (lhs_value >= rhs_value);
 1429|       |
 1430|      0|            processor.SetFPSRValue(new_value);
 1431|      0|        }
 1432|       |
 1433|       |        void SEQ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1434|       |                 const InstructionArg& arg3) noexcept
 1435|      0|        {
 1436|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1437|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1438|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1439|       |
 1440|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1441|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1442|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1443|       |
 1444|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1445|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1446|       |
 1447|      0|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
 1448|       |
 1449|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1450|      0|        }
 1451|       |
 1452|       |        void SEQI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1453|       |                  const InstructionArg& arg3) noexcept
 1454|      0|        {
 1455|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1456|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1457|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1458|       |
 1459|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1460|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1461|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1462|       |
 1463|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1464|       |
 1465|      0|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
 1466|       |
 1467|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1468|      0|        }
 1469|       |
 1470|       |        void SEQU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1471|       |                  const InstructionArg& arg3) noexcept
 1472|      0|        {
 1473|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1474|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1475|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1476|       |
 1477|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1478|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1479|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1480|       |
 1481|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1482|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1483|       |
 1484|      0|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
 1485|       |
 1486|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1487|      0|        }
 1488|       |
 1489|       |        void SEQUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1490|       |                   const InstructionArg& arg3) noexcept
 1491|      0|        {
 1492|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1493|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1494|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1495|       |
 1496|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1497|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1498|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1499|       |
 1500|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1501|       |
 1502|      0|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
 1503|       |
 1504|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1505|      0|        }
 1506|       |
 1507|       |        void EQF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1508|       |                 const InstructionArg& arg3) noexcept
 1509|      0|        {
 1510|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1511|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1512|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1513|       |
 1514|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1515|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1516|       |
 1517|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1518|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1519|       |
 1520|      0|            const phi::Boolean new_value = (lhs_value.get() == rhs_value.get());
 1521|       |
 1522|      0|            processor.SetFPSRValue(new_value);
 1523|      0|        }
 1524|       |
 1525|       |        void EQD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1526|       |                 const InstructionArg& arg3) noexcept
 1527|      0|        {
 1528|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1529|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1530|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1531|       |
 1532|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1533|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1534|       |
 1535|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1536|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1537|       |
 1538|      0|            const phi::Boolean new_value = (lhs_value.get() == rhs_value.get());
 1539|       |
 1540|      0|            processor.SetFPSRValue(new_value);
 1541|      0|        }
 1542|       |
 1543|       |        void SNE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1544|       |                 const InstructionArg& arg3) noexcept
 1545|      0|        {
 1546|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1547|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1548|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1549|       |
 1550|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1551|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1552|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1553|       |
 1554|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1555|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1556|       |
 1557|      0|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
 1558|       |
 1559|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1560|      0|        }
 1561|       |
 1562|       |        void SNEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1563|       |                  const InstructionArg& arg3) noexcept
 1564|      0|        {
 1565|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1566|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1567|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1568|       |
 1569|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1570|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1571|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1572|       |
 1573|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1574|       |
 1575|      0|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
 1576|       |
 1577|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1578|      0|        }
 1579|       |
 1580|       |        void SNEU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1581|       |                  const InstructionArg& arg3) noexcept
 1582|      0|        {
 1583|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1584|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1585|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1586|       |
 1587|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1588|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1589|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1590|       |
 1591|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1592|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1593|       |
 1594|      0|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
 1595|       |
 1596|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1597|      0|        }
 1598|       |
 1599|       |        void SNEUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1600|       |                   const InstructionArg& arg3) noexcept
 1601|      0|        {
 1602|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1603|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1604|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1605|       |
 1606|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1607|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1608|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1609|       |
 1610|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1611|       |
 1612|      0|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
 1613|       |
 1614|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1615|      0|        }
 1616|       |
 1617|       |        void NEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1618|       |                 const InstructionArg& arg3) noexcept
 1619|      0|        {
 1620|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1621|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1622|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1623|       |
 1624|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1625|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1626|       |
 1627|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1628|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1629|       |
 1630|      0|            const phi::Boolean new_value = (lhs_value.get() != rhs_value.get());
 1631|       |
 1632|      0|            processor.SetFPSRValue(new_value);
 1633|      0|        }
 1634|       |
 1635|       |        void NED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1636|       |                 const InstructionArg& arg3) noexcept
 1637|      0|        {
 1638|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1639|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1640|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1641|       |
 1642|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1643|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1644|       |
 1645|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1646|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1647|       |
 1648|      0|            const phi::Boolean new_value = (lhs_value.get() != rhs_value.get());
 1649|       |
 1650|      0|            processor.SetFPSRValue(new_value);
 1651|      0|        }
 1652|       |
 1653|       |        void BEQZ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1654|       |                  const InstructionArg& arg3) noexcept
 1655|      0|        {
 1656|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1657|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1658|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1659|       |
 1660|      0|            const auto& test_reg   = arg1.AsRegisterInt();
 1661|      0|            const auto& jump_label = arg2.AsLabel();
 1662|       |
 1663|      0|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1664|       |
 1665|      0|            if (test_value == 0)
 1666|      0|            {
 1667|      0|                JumpToLabel(processor, jump_label.label_name);
 1668|      0|            }
 1669|      0|        }
 1670|       |
 1671|       |        void BNEZ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1672|       |                  const InstructionArg& arg3) noexcept
 1673|      0|        {
 1674|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1675|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1676|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1677|       |
 1678|      0|            const auto& test_reg   = arg1.AsRegisterInt();
 1679|      0|            const auto& jump_label = arg2.AsLabel();
 1680|       |
 1681|      0|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1682|       |
 1683|      0|            if (test_value != 0)
 1684|      0|            {
 1685|      0|                JumpToLabel(processor, jump_label.label_name);
 1686|      0|            }
 1687|      0|        }
 1688|       |
 1689|       |        void BFPT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1690|       |                  const InstructionArg& arg3) noexcept
 1691|      0|        {
 1692|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1693|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1694|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1695|       |
 1696|      0|            const auto& jump_label = arg1.AsLabel();
 1697|       |
 1698|      0|            phi::Boolean test_value = processor.GetFPSRValue();
 1699|       |
 1700|      0|            if (test_value)
 1701|      0|            {
 1702|      0|                JumpToLabel(processor, jump_label.label_name);
 1703|      0|            }
 1704|      0|        }
 1705|       |
 1706|       |        void BFPF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1707|       |                  const InstructionArg& arg3) noexcept
 1708|      0|        {
 1709|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1710|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1711|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1712|       |
 1713|      0|            const auto& jump_label = arg1.AsLabel();
 1714|       |
 1715|      0|            phi::Boolean test_value = processor.GetFPSRValue();
 1716|       |
 1717|      0|            if (!test_value)
 1718|      0|            {
 1719|      0|                JumpToLabel(processor, jump_label.label_name);
 1720|      0|            }
 1721|      0|        }
 1722|       |
 1723|       |        void J(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1724|       |               const InstructionArg& arg3) noexcept
 1725|      1|        {
 1726|      1|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1727|      1|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1728|      1|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1729|       |
 1730|      1|            const auto& jump_label = arg1.AsLabel();
 1731|       |
 1732|      1|            JumpToLabel(processor, jump_label.label_name);
 1733|      1|        }
 1734|       |
 1735|       |        void JR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1736|       |                const InstructionArg& arg3) noexcept
 1737|      0|        {
 1738|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1739|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1740|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1741|       |
 1742|      0|            const auto& jump_register = arg1.AsRegisterInt();
 1743|       |
 1744|      0|            JumpToRegister(processor, jump_register.register_id);
 1745|      0|        }
 1746|       |
 1747|       |        void JAL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1748|       |                 const InstructionArg& arg3) noexcept
 1749|      0|        {
 1750|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1751|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1752|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1753|       |
 1754|      0|            const auto& jump_label = arg1.AsLabel();
 1755|       |
 1756|      0|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1757|      0|                                                  processor.GetNextProgramCounter());
 1758|       |
 1759|      0|            JumpToLabel(processor, jump_label.label_name);
 1760|      0|        }
 1761|       |
 1762|       |        void JALR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1763|       |                  const InstructionArg& arg3) noexcept
 1764|      0|        {
 1765|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1766|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1767|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1768|       |
 1769|      0|            const auto& jump_register = arg1.AsRegisterInt();
 1770|       |
 1771|      0|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1772|      0|                                                  processor.GetNextProgramCounter());
 1773|       |
 1774|      0|            JumpToRegister(processor, jump_register.register_id);
 1775|      0|        }
 1776|       |
 1777|       |        void LHI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1778|       |                 const InstructionArg& arg3) noexcept
 1779|      0|        {
 1780|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1781|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::ImmediateInteger);
 1782|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1783|       |
 1784|      0|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1785|      0|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.get();
 1786|       |
 1787|      0|            imm_value = (imm_value << 16) & 0xFFFF0000;
 1788|       |
 1789|      0|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1790|      0|        }
 1791|       |
 1792|       |        void LB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1793|       |                const InstructionArg& arg3) noexcept
 1794|      0|        {
 1795|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1796|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1797|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1798|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1799|       |
 1800|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1801|       |
 1802|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1803|       |
 1804|      0|            if (!optional_address.has_value())
 1805|      0|            {
 1806|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1807|      0|                return;
 1808|      0|            }
 1809|       |
 1810|      0|            phi::i32 address = optional_address.value();
 1811|       |
 1812|      0|            auto optional_value =
 1813|      0|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.get()));
 1814|       |
 1815|      0|            if (!optional_value.has_value())
 1816|      0|            {
 1817|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1818|      0|                PHI_LOG_ERROR("Failed to load byte at address {}", address.get());
 1819|      0|                return;
 1820|      0|            }
 1821|       |
 1822|      0|            phi::i32 value = optional_value.value();
 1823|       |
 1824|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1825|      0|        }
 1826|       |
 1827|       |        void LBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1828|       |                 const InstructionArg& arg3) noexcept
 1829|      0|        {
 1830|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1831|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1832|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1833|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1834|       |
 1835|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1836|       |
 1837|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1838|       |
 1839|      0|            if (!optional_address.has_value())
 1840|      0|            {
 1841|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1842|      0|                return;
 1843|      0|            }
 1844|       |
 1845|      0|            phi::i32 address = optional_address.value();
 1846|       |
 1847|      0|            auto optional_value =
 1848|      0|                    processor.GetMemory().LoadUnsignedByte(static_cast<std::size_t>(address.get()));
 1849|       |
 1850|      0|            if (!optional_value.has_value())
 1851|      0|            {
 1852|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1853|      0|                PHI_LOG_ERROR("Failed to load unsigned byte at address {}", address.get());
 1854|      0|                return;
 1855|      0|            }
 1856|       |
 1857|      0|            phi::i32 value = optional_value.value();
 1858|       |
 1859|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1860|      0|        }
 1861|       |
 1862|       |        void LH(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1863|       |                const InstructionArg& arg3) noexcept
 1864|      0|        {
 1865|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1866|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1867|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1868|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1869|       |
 1870|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1871|       |
 1872|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1873|       |
 1874|      0|            if (!optional_address.has_value())
 1875|      0|            {
 1876|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1877|      0|                return;
 1878|      0|            }
 1879|       |
 1880|      0|            phi::i32 address = optional_address.value();
 1881|       |
 1882|      0|            auto optional_value =
 1883|      0|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.get()));
 1884|       |
 1885|      0|            if (!optional_value.has_value())
 1886|      0|            {
 1887|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1888|      0|                PHI_LOG_ERROR("Failed to load half byte at address {}", address.get());
 1889|      0|                return;
 1890|      0|            }
 1891|       |
 1892|      0|            phi::i32 value = optional_value.value();
 1893|       |
 1894|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1895|      0|        }
 1896|       |
 1897|       |        void LHU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1898|       |                 const InstructionArg& arg3) noexcept
 1899|      0|        {
 1900|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1901|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1902|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1903|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1904|       |
 1905|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1906|       |
 1907|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1908|       |
 1909|      0|            if (!optional_address.has_value())
 1910|      0|            {
 1911|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1912|      0|                return;
 1913|      0|            }
 1914|       |
 1915|      0|            phi::i32 address = optional_address.value();
 1916|       |
 1917|      0|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1918|      0|                    static_cast<std::size_t>(address.get()));
 1919|       |
 1920|      0|            if (!optional_value.has_value())
 1921|      0|            {
 1922|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1923|      0|                PHI_LOG_ERROR("Failed to load unsigned half byte at address {}", address.get());
 1924|      0|                return;
 1925|      0|            }
 1926|       |
 1927|      0|            phi::i32 value = optional_value.value();
 1928|       |
 1929|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1930|      0|        }
 1931|       |
 1932|       |        void LW(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1933|       |                const InstructionArg& arg3) noexcept
 1934|      0|        {
 1935|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1936|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1937|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1938|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1939|       |
 1940|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1941|       |
 1942|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1943|       |
 1944|      0|            if (!optional_address.has_value())
 1945|      0|            {
 1946|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1947|      0|                return;
 1948|      0|            }
 1949|       |
 1950|      0|            phi::i32 address = optional_address.value();
 1951|       |
 1952|      0|            auto optional_value =
 1953|      0|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.get()));
 1954|       |
 1955|      0|            if (!optional_value.has_value())
 1956|      0|            {
 1957|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1958|      0|                PHI_LOG_ERROR("Failed to load word at address {}", address.get());
 1959|      0|                return;
 1960|      0|            }
 1961|       |
 1962|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1963|      0|        }
 1964|       |
 1965|       |        void LWU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1966|       |                 const InstructionArg& arg3) noexcept
 1967|      0|        {
 1968|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1969|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1970|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1971|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1972|       |
 1973|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1974|       |
 1975|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1976|       |
 1977|      0|            if (!optional_address.has_value())
 1978|      0|            {
 1979|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1980|      0|                return;
 1981|      0|            }
 1982|       |
 1983|      0|            phi::i32 address = optional_address.value();
 1984|       |
 1985|      0|            auto optional_value =
 1986|      0|                    processor.GetMemory().LoadUnsignedWord(static_cast<std::size_t>(address.get()));
 1987|       |
 1988|      0|            if (!optional_value.has_value())
 1989|      0|            {
 1990|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1991|      0|                PHI_LOG_ERROR("Failed to load unsigned word at address {}", address.get());
 1992|      0|                return;
 1993|      0|            }
 1994|       |
 1995|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1996|      0|        }
 1997|       |
 1998|       |        void LF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1999|       |                const InstructionArg& arg3) noexcept
 2000|      0|        {
 2001|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2002|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 2003|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 2004|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2005|       |
 2006|      0|            const auto& dest_reg = arg1.AsRegisterFloat();
 2007|       |
 2008|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 2009|       |
 2010|      0|            if (!optional_address.has_value())
 2011|      0|            {
 2012|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2013|      0|                return;
 2014|      0|            }
 2015|       |
 2016|      0|            phi::i32 address = optional_address.value();
 2017|       |
 2018|      0|            auto optional_value =
 2019|      0|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.get()));
 2020|       |
 2021|      0|            if (!optional_value.has_value())
 2022|      0|            {
 2023|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2024|      0|                PHI_LOG_ERROR("Failed to load float at address {}", address.get());
 2025|      0|                return;
 2026|      0|            }
 2027|       |
 2028|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 2029|      0|        }
 2030|       |
 2031|       |        void LD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2032|       |                const InstructionArg& arg3) noexcept
 2033|      0|        {
 2034|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2035|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 2036|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 2037|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2038|       |
 2039|      0|            const auto& dest_reg = arg1.AsRegisterFloat();
 2040|       |
 2041|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 2042|       |
 2043|      0|            if (!optional_address.has_value())
 2044|      0|            {
 2045|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2046|      0|                return;
 2047|      0|            }
 2048|       |
 2049|      0|            phi::i32 address = optional_address.value();
 2050|       |
 2051|      0|            auto optional_value =
 2052|      0|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.get()));
 2053|       |
 2054|      0|            if (!optional_value.has_value())
 2055|      0|            {
 2056|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2057|      0|                PHI_LOG_ERROR("Failed to load double at address {}", address.get());
 2058|      0|                return;
 2059|      0|            }
 2060|       |
 2061|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 2062|      0|        }
 2063|       |
 2064|       |        void SB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2065|       |                const InstructionArg& arg3) noexcept
 2066|      0|        {
 2067|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2068|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2069|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2070|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2071|       |
 2072|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2073|       |
 2074|      0|            if (!optional_address.has_value())
 2075|      0|            {
 2076|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2077|      0|                return;
 2078|      0|            }
 2079|       |
 2080|      0|            phi::i32 address = optional_address.value();
 2081|       |
 2082|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2083|       |
 2084|      0|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 2085|       |
 2086|      0|            phi::Boolean success = processor.GetMemory().StoreByte(
 2087|      0|                    static_cast<std::size_t>(address.get()), static_cast<std::int8_t>(value.get()));
 2088|       |
 2089|      0|            if (!success)
 2090|      0|            {
 2091|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2092|      0|                PHI_LOG_ERROR("Failed to store byte at address {}", address.get());
 2093|      0|            }
 2094|      0|        }
 2095|       |
 2096|       |        void SBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2097|       |                 const InstructionArg& arg3) noexcept
 2098|      0|        {
 2099|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2100|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2101|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2102|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2103|       |
 2104|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2105|       |
 2106|      0|            if (!optional_address.has_value())
 2107|      0|            {
 2108|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2109|      0|                return;
 2110|      0|            }
 2111|       |
 2112|      0|            phi::i32 address = optional_address.value();
 2113|       |
 2114|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2115|       |
 2116|      0|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2117|       |
 2118|      0|            phi::Boolean success =
 2119|      0|                    processor.GetMemory().StoreUnsignedByte(static_cast<std::size_t>(address.get()),
 2120|      0|                                                            static_cast<std::uint8_t>(value.get()));
 2121|       |
 2122|      0|            if (!success)
 2123|      0|            {
 2124|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2125|      0|                PHI_LOG_ERROR("Failed to store unsigned byte at address {}", address.get());
 2126|      0|            }
 2127|      0|        }
 2128|       |
 2129|       |        void SH(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2130|       |                const InstructionArg& arg3) noexcept
 2131|      0|        {
 2132|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2133|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2134|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2135|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2136|       |
 2137|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2138|       |
 2139|      0|            if (!optional_address.has_value())
 2140|      0|            {
 2141|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2142|      0|                return;
 2143|      0|            }
 2144|       |
 2145|      0|            phi::i32 address = optional_address.value();
 2146|       |
 2147|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2148|       |
 2149|      0|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 2150|       |
 2151|      0|            phi::Boolean success =
 2152|      0|                    processor.GetMemory().StoreHalfWord(static_cast<std::size_t>(address.get()),
 2153|      0|                                                        static_cast<std::int16_t>(value.get()));
 2154|       |
 2155|      0|            if (!success)
 2156|      0|            {
 2157|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2158|      0|                PHI_LOG_ERROR("Failed to store half word at address {}", address.get());
 2159|      0|            }
 2160|      0|        }
 2161|       |
 2162|       |        void SHU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2163|       |                 const InstructionArg& arg3) noexcept
 2164|      0|        {
 2165|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2166|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2167|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2168|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2169|       |
 2170|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2171|       |
 2172|      0|            if (!optional_address.has_value())
 2173|      0|            {
 2174|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2175|      0|                return;
 2176|      0|            }
 2177|       |
 2178|      0|            phi::i32 address = optional_address.value();
 2179|       |
 2180|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2181|       |
 2182|      0|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2183|       |
 2184|      0|            phi::Boolean success = processor.GetMemory().StoreUnsignedHalfWord(
 2185|      0|                    static_cast<std::size_t>(address.get()),
 2186|      0|                    static_cast<std::uint16_t>(value.get()));
 2187|       |
 2188|      0|            if (!success)
 2189|      0|            {
 2190|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2191|      0|                PHI_LOG_ERROR("Failed to store unsigned half word at address {}", address.get());
 2192|      0|            }
 2193|      0|        }
 2194|       |
 2195|       |        void SW(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2196|       |                const InstructionArg& arg3) noexcept
 2197|      0|        {
 2198|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2199|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2200|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2201|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2202|       |
 2203|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2204|       |
 2205|      0|            if (!optional_address.has_value())
 2206|      0|            {
 2207|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2208|      0|                return;
 2209|      0|            }
 2210|       |
 2211|      0|            phi::i32 address = optional_address.value();
 2212|       |
 2213|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2214|       |
 2215|      0|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 2216|       |
 2217|      0|            phi::Boolean success =
 2218|      0|                    processor.GetMemory().StoreWord(static_cast<std::size_t>(address.get()), value);
 2219|       |
 2220|      0|            if (!success)
 2221|      0|            {
 2222|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2223|      0|                PHI_LOG_ERROR("Failed to store word at address {}", address.get());
 2224|      0|            }
 2225|      0|        }
 2226|       |
 2227|       |        void SWU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2228|       |                 const InstructionArg& arg3) noexcept
 2229|      0|        {
 2230|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2231|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2232|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2233|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2234|       |
 2235|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2236|       |
 2237|      0|            if (!optional_address.has_value())
 2238|      0|            {
 2239|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2240|      0|                return;
 2241|      0|            }
 2242|       |
 2243|      0|            phi::i32 address = optional_address.value();
 2244|       |
 2245|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2246|       |
 2247|      0|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2248|       |
 2249|      0|            phi::Boolean success = processor.GetMemory().StoreUnsignedWord(
 2250|      0|                    static_cast<std::size_t>(address.get()), value);
 2251|       |
 2252|      0|            if (!success)
 2253|      0|            {
 2254|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2255|      0|                PHI_LOG_ERROR("Failed to store unsigned word at address {}", address.get());
 2256|      0|            }
 2257|      0|        }
 2258|       |
 2259|       |        void SF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2260|       |                const InstructionArg& arg3) noexcept
 2261|      0|        {
 2262|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2263|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2264|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2265|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2266|       |
 2267|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2268|       |
 2269|      0|            if (!optional_address.has_value())
 2270|      0|            {
 2271|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2272|      0|                return;
 2273|      0|            }
 2274|       |
 2275|      0|            phi::i32 address = optional_address.value();
 2276|       |
 2277|      0|            const auto& src_reg = arg2.AsRegisterFloat();
 2278|       |
 2279|      0|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 2280|       |
 2281|      0|            phi::Boolean success = processor.GetMemory().StoreFloat(
 2282|      0|                    static_cast<std::size_t>(address.get()), value);
 2283|       |
 2284|      0|            if (!success)
 2285|      0|            {
 2286|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2287|      0|                PHI_LOG_ERROR("Failed to store float at address {}", address.get());
 2288|      0|            }
 2289|      0|        }
 2290|       |
 2291|       |        void SD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2292|       |                const InstructionArg& arg3) noexcept
 2293|      0|        {
 2294|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2295|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2296|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2297|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2298|       |
 2299|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2300|       |
 2301|      0|            if (!optional_address.has_value())
 2302|      0|            {
 2303|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2304|      0|                return;
 2305|      0|            }
 2306|       |
 2307|      0|            phi::i32 address = optional_address.value();
 2308|       |
 2309|      0|            const auto& src_reg = arg2.AsRegisterFloat();
 2310|       |
 2311|      0|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 2312|       |
 2313|      0|            phi::Boolean success = processor.GetMemory().StoreDouble(
 2314|      0|                    static_cast<std::size_t>(address.get()), value);
 2315|       |
 2316|      0|            if (!success)
 2317|      0|            {
 2318|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2319|      0|                PHI_LOG_ERROR("Failed to store float at address {}", address.get());
 2320|      0|            }
 2321|      0|        }
 2322|       |
 2323|       |        void MOVF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2324|       |                  const InstructionArg& arg3) noexcept
 2325|      0|        {
 2326|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2327|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2328|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2329|       |
 2330|      0|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 2331|      0|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 2332|       |
 2333|      0|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 2334|       |
 2335|      0|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 2336|      0|        }
 2337|       |
 2338|       |        void MOVD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2339|       |                  const InstructionArg& arg3) noexcept
 2340|      0|        {
 2341|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2342|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2343|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2344|       |
 2345|      0|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 2346|      0|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 2347|       |
 2348|      0|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 2349|       |
 2350|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 2351|      0|        }
 2352|       |
 2353|       |        void MOVFP2I(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2354|       |                     const InstructionArg& arg3) noexcept
 2355|      0|        {
 2356|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 2357|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2358|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2359|       |
 2360|      0|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 2361|      0|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 2362|       |
 2363|      0|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).get();
 2364|       |
 2365|      0|            const std::uint32_t moved_value =
 2366|      0|                    *reinterpret_cast<const std::uint32_t*>(&source_value);
 2367|       |
 2368|      0|            processor.IntRegisterSetUnsignedValue(dest_reg, moved_value);
 2369|      0|        }
 2370|       |
 2371|       |        void MOVI2FP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2372|       |                     const InstructionArg& arg3) noexcept
 2373|      0|        {
 2374|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2375|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2376|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2377|       |
 2378|      0|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 2379|      0|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 2380|       |
 2381|      0|            const std::uint32_t source_value =
 2382|      0|                    processor.IntRegisterGetUnsignedValue(source_reg).get();
 2383|       |
 2384|      0|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 2385|       |
 2386|      0|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 2387|      0|        }
 2388|       |
 2389|       |        void CVTF2D(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2390|       |                    const InstructionArg& arg3) noexcept
 2391|      0|        {
 2392|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2393|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2394|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2395|       |
 2396|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2397|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2398|       |
 2399|      0|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 2400|       |
 2401|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 2402|      0|        }
 2403|       |
 2404|       |        void CVTF2I(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2405|       |                    const InstructionArg& arg3) noexcept
 2406|      0|        {
 2407|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2408|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2409|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2410|       |
 2411|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2412|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2413|       |
 2414|      0|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).get();
 2415|      0|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2416|      0|            const float        converted_value_float =
 2417|      0|                    *reinterpret_cast<const float*>(&converted_value_int);
 2418|       |
 2419|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2420|      0|        }
 2421|       |
 2422|       |        void CVTD2F(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2423|       |                    const InstructionArg& arg3) noexcept
 2424|      0|        {
 2425|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2426|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2427|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2428|       |
 2429|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2430|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2431|       |
 2432|      0|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).get();
 2433|      0|            const float  converted_value = static_cast<float>(src_value);
 2434|       |
 2435|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2436|      0|        }
 2437|       |
 2438|       |        void CVTD2I(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2439|       |                    const InstructionArg& arg3) noexcept
 2440|      0|        {
 2441|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2442|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2443|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2444|       |
 2445|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2446|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2447|       |
 2448|      0|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).get();
 2449|      0|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2450|      0|            const float        converted_value_float =
 2451|      0|                    *reinterpret_cast<const float*>(&converted_value_int);
 2452|       |
 2453|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2454|      0|        }
 2455|       |
 2456|       |        void CVTI2F(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2457|       |                    const InstructionArg& arg3) noexcept
 2458|      0|        {
 2459|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2460|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2461|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2462|       |
 2463|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2464|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2465|       |
 2466|      0|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).get();
 2467|      0|            const std::int32_t converted_value_int =
 2468|      0|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2469|      0|            const float converted_value_float = static_cast<float>(converted_value_int);
 2470|       |
 2471|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2472|      0|        }
 2473|       |
 2474|       |        void CVTI2D(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2475|       |                    const InstructionArg& arg3) noexcept
 2476|      0|        {
 2477|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2478|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2479|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2480|       |
 2481|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2482|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2483|       |
 2484|      0|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).get();
 2485|      0|            const std::int32_t converted_value_int =
 2486|      0|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2487|      0|            const double converted_value_double = static_cast<double>(converted_value_int);
 2488|       |
 2489|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2490|      0|        }
 2491|       |
 2492|       |        void TRAP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2493|       |                  const InstructionArg& arg3) noexcept
 2494|      0|        {
 2495|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::ImmediateInteger);
 2496|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2497|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2498|       |
 2499|      0|            processor.Raise(Exception::Trap);
 2500|      0|        }
 2501|       |
 2502|       |        void HALT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2503|       |                  const InstructionArg& arg3) noexcept
 2504|      2|        {
 2505|      2|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 2506|      2|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2507|      2|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2508|       |
 2509|      2|            processor.Raise(Exception::Halt);
 2510|      2|        }
 2511|       |
 2512|       |        void NOP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2513|       |                 const InstructionArg& arg3) noexcept
 2514|      0|        {
 2515|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 2516|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2517|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2518|       |
 2519|       |            /* Do nothing */
 2520|      0|        }
 2521|       |    } // namespace impl
 2522|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Parser.cpp:
    1|       |#include "DLX/Parser.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/OpCode.hpp"
    5|       |#include "DLX/ParserUtils.hpp"
    6|       |#include "DLX/RegisterNames.hpp"
    7|       |#include "DLX/Token.hpp"
    8|       |#include "Phi/Core/Types.hpp"
    9|       |#include <Phi/Config/FunctionLikeMacro.hpp>
   10|       |#include <Phi/Core/Assert.hpp>
   11|       |#include <Phi/Core/Conversion.hpp>
   12|       |#include <Phi/Core/Log.hpp>
   13|       |#include <magic_enum.hpp>
   14|       |#include <algorithm>
   15|       |#include <limits>
   16|       |#include <optional>
   17|       |#include <regex>
   18|       |#include <stdexcept>
   19|       |#include <string_view>
   20|       |
   21|       |using namespace phi::literals;
   22|       |
   23|       |namespace dlx
   24|       |{
   25|       |    Token ParseToken(std::string_view token, phi::u64 line_number, phi::u64 column) noexcept
   26|  10.6k|    {
   27|       |        // TODO: Parse the given number here directly?
   28|  10.6k|        if (token.at(0) == '#' && token.size() > 1)
   29|     70|        {
   30|     70|            return Token(Token::Type::ImmediateInteger, token, line_number, column);
   31|     70|        }
   32|       |
   33|  10.5k|        if (token.at(0) == '/' || token.at(0) == ';')
   34|  1.68k|        {
   35|  1.68k|            return Token(Token::Type::Comment, token, line_number, column);
   36|  1.68k|        }
   37|       |
   38|  8.86k|        if (auto number = ParseNumber(token); number.has_value())
   39|     26|        {
   40|     26|            return Token(Token::Type::IntegerLiteral, token, line_number, column, number->get());
   41|     26|        }
   42|       |
   43|  8.84k|        std::string token_upper(token.data(), token.size());
   44|  8.84k|        std::transform(token_upper.begin(), token_upper.end(), token_upper.begin(), ::toupper);
   45|       |
   46|  8.84k|        if (token_upper == "FPSR")
   47|  3.95k|        {
   48|  3.95k|            return Token(Token::Type::RegisterStatus, token, line_number, column);
   49|  3.95k|        }
   50|       |
   51|  4.88k|        if (IntRegisterID id = StringToIntRegister(token_upper); id != IntRegisterID::None)
   52|    436|        {
   53|    436|            return Token(Token::Type::RegisterInt, token, line_number, column,
   54|    436|                         static_cast<std::uint32_t>(id));
   55|    436|        }
   56|       |
   57|  4.45k|        if (FloatRegisterID id = StringToFloatRegister(token_upper); id != FloatRegisterID::None)
   58|    392|        {
   59|    392|            return Token(Token::Type::RegisterFloat, token, line_number, column,
   60|    392|                         static_cast<std::uint32_t>(id));
   61|    392|        }
   62|       |
   63|  4.05k|        if (OpCode opcode = StringToOpCode(token_upper); opcode != OpCode::NONE)
   64|    811|        {
   65|    811|            return Token(Token::Type::OpCode, token, line_number, column,
   66|    811|                         static_cast<std::uint32_t>(opcode));
   67|    811|        }
   68|       |
   69|  3.24k|        return Token(Token::Type::LabelIdentifier, token, line_number, column);
   70|  3.24k|    }
   71|       |
   72|       |    std::vector<Token> Parser::Tokenize(std::string_view source) noexcept
   73|    996|    {
   74|    996|        std::vector<Token> tokens{};
   75|    996|        tokens.reserve(5);
   76|       |
   77|    996|        std::string_view current_token;
   78|       |
   79|    996|        phi::u64 current_line_number{1u};
   80|    996|        phi::u64 current_column{1u};
   81|    996|        phi::u64 token_begin{0u};
   82|       |
   83|    996|        phi::Boolean parsing_comment{false};
   84|       |
   85|  66.5k|        for (phi::usize i{0u}; i < source.length(); ++i)
   86|  65.5k|        {
   87|  65.5k|            const char c{source.at(i.get())};
   88|       |
   89|  65.5k|            if (c == '\n')
   90|  3.29k|            {
   91|  3.29k|                if (current_token.empty())
   92|  1.12k|                {
   93|       |                    // Skip empty lines
   94|  1.12k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(token_begin.get(), 1),
   95|  1.12k|                                        current_line_number, current_column - 1u);
   96|       |
   97|  1.12k|                    parsing_comment = false;
   98|  1.12k|                    current_line_number += 1u;
   99|  1.12k|                    current_column = 1u;
  100|  1.12k|                    continue;
  101|  1.12k|                }
  102|       |
  103|       |                // Otherwise a new line separates tokens
  104|  2.17k|                tokens.emplace_back(
  105|  2.17k|                        ParseToken(source.substr(token_begin.get(), current_token.length()),
  106|  2.17k|                                   current_line_number, current_column - current_token.length()));
  107|       |
  108|  2.17k|                token_begin = i;
  109|       |
  110|  2.17k|                tokens.emplace_back(Token::Type::NewLine, source.substr(token_begin.get(), 1),
  111|  2.17k|                                    current_line_number, current_column - 1u);
  112|       |
  113|  2.17k|                current_token   = std::string_view{};
  114|  2.17k|                parsing_comment = false;
  115|  2.17k|                current_line_number += 1u;
  116|  2.17k|                current_column = 0u;
  117|  2.17k|            }
  118|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  119|  62.2k|            else if (c == '/' || c == ';')
  120|  1.72k|            {
  121|  1.72k|                if (current_token.empty())
  122|  1.68k|                {
  123|  1.68k|                    token_begin = i;
  124|  1.68k|                }
  125|       |
  126|  1.72k|                parsing_comment = true;
  127|  1.72k|                current_token   = std::string_view(
  128|  1.72k|                        source.substr(token_begin.get(), current_token.length() + 1));
  129|  1.72k|            }
  130|  60.5k|            else if (parsing_comment)
  131|  7.81k|            {
  132|       |                // simply append the character
  133|  7.81k|                current_token = std::string_view(
  134|  7.81k|                        source.substr(token_begin.get(), current_token.length() + 1));
  135|  7.81k|            }
  136|  52.7k|            else
  137|  52.7k|            {
  138|       |                // Not parsing a comment
  139|       |
  140|  52.7k|                switch (c)
  141|  52.7k|                {
  142|  1.90k|                    case ' ':
  143|  1.90k|                    case '\t':
  144|  1.90k|                    case '\v':
  145|  1.90k|                        if (current_token.empty())
  146|      0|                        {
  147|      0|                            current_column += 1u;
  148|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  149|      0|                            continue;
  150|      0|                        }
  151|       |
  152|       |                        // Otherwise a whitespace separates tokens
  153|  1.90k|                        tokens.emplace_back(ParseToken(
  154|  1.90k|                                source.substr(token_begin.get(), current_token.length()),
  155|  1.90k|                                current_line_number, current_column - current_token.length()));
  156|  1.90k|                        current_token = std::string_view{};
  157|  1.90k|                        break;
  158|  1.90k|                    case ':':
  159|       |                        // Need to parse label names together with their colon
  160|  1.88k|                        if (!current_token.empty())
  161|  1.87k|                        {
  162|  1.87k|                            current_token = std::string_view(
  163|  1.87k|                                    source.substr(token_begin.get(), current_token.length() + 1));
  164|  1.87k|                            tokens.emplace_back(ParseToken(
  165|  1.87k|                                    source.substr(token_begin.get(), current_token.length()),
  166|  1.87k|                                    current_line_number,
  167|  1.87k|                                    current_column + 1u - current_token.length()));
  168|       |
  169|  1.87k|                            current_token = std::string_view{};
  170|  1.87k|                        }
  171|      8|                        else
  172|      8|                        {
  173|       |                            // Orphan colon
  174|      8|                            token_begin = i;
  175|       |
  176|      8|                            tokens.emplace_back(Token::Type::Colon,
  177|      8|                                                source.substr(token_begin.get(), 1),
  178|      8|                                                current_line_number, current_column);
  179|      8|                        }
  180|  1.88k|                        break;
  181|  3.99k|                    case ',':
  182|  4.00k|                    case '(':
  183|  4.34k|                    case ')':
  184|  4.34k|                        if (!current_token.empty())
  185|  4.29k|                        {
  186|  4.29k|                            tokens.emplace_back(ParseToken(
  187|  4.29k|                                    source.substr(token_begin.get(), current_token.length()),
  188|  4.29k|                                    current_line_number, current_column - current_token.length()));
  189|       |
  190|  4.29k|                            current_token = std::string_view{};
  191|  4.29k|                        }
  192|       |
  193|  4.34k|                        Token::Type type;
  194|  4.34k|                        switch (c)
  195|  4.34k|                        {
  196|  3.99k|                            case ',':
  197|  3.99k|                                type = Token::Type::Comma;
  198|  3.99k|                                break;
  199|      5|                            case '(':
  200|      5|                                type = Token::Type::OpenBracket;
  201|      5|                                break;
  202|    338|                            case ')':
  203|    338|                                type = Token::Type::ClosingBracket;
  204|    338|                                break;
  205|      0|                            default:
  206|      0|                                PHI_ASSERT_NOT_REACHED();
  207|      0|                                break;
  208|  4.34k|                        }
  209|       |
  210|  4.34k|                        token_begin = i;
  211|       |
  212|  4.34k|                        tokens.emplace_back(type, source.substr(token_begin.get(), 1),
  213|  4.34k|                                            current_line_number, current_column);
  214|  4.34k|                        break;
  215|       |
  216|  44.6k|                    default:
  217|  44.6k|                        if (current_token.empty())
  218|  8.93k|                        {
  219|  8.93k|                            token_begin = i;
  220|  8.93k|                        }
  221|       |
  222|       |                        // simply append the character
  223|  44.6k|                        current_token = std::string_view(
  224|  44.6k|                                source.substr(token_begin.get(), current_token.length() + 1));
  225|  52.7k|                }
  226|  52.7k|            }
  227|       |
  228|  65.5k|            current_column += 1u;
  229|  64.4k|        }
  230|       |
  231|       |        // Checked the entire string. Parse whats left if anything
  232|    996|        if (!current_token.empty())
  233|    370|        {
  234|    370|            tokens.emplace_back(ParseToken(source.substr(token_begin.get(), current_token.length()),
  235|    370|                                           current_line_number,
  236|    370|                                           current_column - current_token.length()));
  237|    370|        }
  238|       |
  239|    996|        return tokens;
  240|    996|    }
  241|       |
  242|       |    static phi::Boolean has_x_more_tokens(const std::vector<Token>& tokens, phi::usize index,
  243|       |                                          phi::u64 x) noexcept
  244|    512|    {
  245|    512|        return index + x <= tokens.size();
  246|    512|    }
  247|       |
  248|       |    static phi::Boolean has_one_more_token(const std::vector<Token>& tokens,
  249|       |                                           phi::usize                index) noexcept
  250|    510|    {
  251|    510|        return has_x_more_tokens(tokens, index, 1u);
  252|    510|    }
  253|       |
  254|       |    static phi::Boolean next_token_is(const std::vector<Token>& tokens, phi::usize index,
  255|       |                                      Token::Type token_type) noexcept
  256|      0|    {
  257|      0|        PHI_ASSERT(has_one_more_token(tokens, index));
  258|      0|
  259|      0|        const auto& next_token = tokens.at((index + 1u).get());
  260|      0|
  261|      0|        return next_token.GetType() == token_type;
  262|      0|    }
  263|       |
  264|       |    static phi::Boolean has_one_more_token_of_type(const std::vector<Token>& tokens,
  265|       |                                                   phi::usize                index,
  266|       |                                                   Token::Type               token_type) noexcept
  267|      0|    {
  268|      0|        if (!has_one_more_token(tokens, index))
  269|      0|        {
  270|      0|            return false;
  271|      0|        }
  272|      0|
  273|      0|        return (next_token_is(tokens, index, token_type));
  274|      0|    }
  275|       |
  276|       |    static void AddParseError(ParsedProgram& program, const std::string& message) noexcept
  277|  11.3k|    {
  278|  11.3k|        ParseError err;
  279|  11.3k|        err.message = message;
  280|       |
  281|       |        //PHI_LOG_ERROR("Parsing error: {}", message);
  282|       |
  283|  11.3k|        program.m_ParseErrors.emplace_back(err);
  284|  11.3k|    }
  285|       |
  286|       |    static std::optional<InstructionArg> parse_instruction_argument(
  287|       |            const Token& token, ArgumentType expected_argument_type,
  288|       |            const std::vector<Token>& tokens, phi::usize& index, ParsedProgram& program) noexcept
  289|    443|    {
  290|       |        // PHI_LOG_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
  291|       |        //              magic_enum::enum_name(expected_argument_type));
  292|       |
  293|    443|        switch (token.GetType())
  294|    443|        {
  295|      2|            case Token::Type::IntegerLiteral: {
  296|      2|                if (!ArgumentTypeIncludes(expected_argument_type,
  297|      2|                                          ArgumentType::AddressDisplacement))
  298|      0|                {
  299|      0|                    AddParseError(program,
  300|      0|                                  fmt::format("Expected {} but got address displacement",
  301|      0|                                              magic_enum::enum_name(expected_argument_type)));
  302|      0|                    return {};
  303|      0|                }
  304|       |
  305|       |                // Parse address displacement
  306|      2|                auto displacement_value = ParseNumber(token.GetText());
  307|      2|                if (!displacement_value)
  308|      0|                {
  309|      0|                    AddParseError(program,
  310|      0|                                  "Failed to parse displacement value for Address displacement");
  311|      0|                    return {};
  312|      0|                }
  313|      2|                std::int16_t value = displacement_value.value().get();
  314|       |
  315|      2|                if (!has_x_more_tokens(tokens, index, 3u))
  316|      2|                {
  317|      2|                    AddParseError(program,
  318|      2|                                  "Not enough arguments left to parse address displacement");
  319|      2|                    return {};
  320|      2|                }
  321|       |
  322|      0|                const Token& first_token  = tokens.at(index.get());
  323|      0|                const Token& second_token = tokens.at((index + 1u).get());
  324|      0|                const Token& third_token  = tokens.at((index + 2u).get());
  325|       |
  326|      0|                if (first_token.GetType() != Token::Type::OpenBracket)
  327|      0|                {
  328|      0|                    AddParseError(program, "Expected open bracket");
  329|      0|                    return {};
  330|      0|                }
  331|       |
  332|       |                // Second token is the register
  333|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  334|      0|                {
  335|      0|                    AddParseError(program, "Expected IntRegister");
  336|      0|                    return {};
  337|      0|                }
  338|       |
  339|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  340|      0|                {
  341|      0|                    AddParseError(program, "Expected closing bracket");
  342|      0|                    return {};
  343|      0|                }
  344|       |
  345|      0|                index += 3u;
  346|       |
  347|       |                //PHI_LOG_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
  348|       |                //             value, magic_enum::enum_name(reg_id));
  349|       |
  350|      0|                return ConstructInstructionArgAddressDisplacement(
  351|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
  352|      0|            }
  353|      1|            case Token::Type::RegisterInt: {
  354|      1|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  355|      0|                {
  356|      0|                    AddParseError(program,
  357|      0|                                  fmt::format("Got IntRegister but expected '{}'",
  358|      0|                                              magic_enum::enum_name(expected_argument_type)));
  359|      0|                    return {};
  360|      0|                }
  361|       |
  362|       |                //PHI_LOG_INFO("Parsed identifier as int register {}",
  363|       |                //             magic_enum::enum_name(reg_id));
  364|       |
  365|      1|                return ConstructInstructionArgRegisterInt(
  366|      1|                        static_cast<IntRegisterID>(token.GetHint()));
  367|      1|            }
  368|      2|            case Token::Type::RegisterFloat: {
  369|      2|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  370|      2|                {
  371|      2|                    AddParseError(program,
  372|      2|                                  fmt::format("Got FloatRegister but expected '{}'",
  373|      2|                                              magic_enum::enum_name(expected_argument_type)));
  374|      2|                    return {};
  375|      2|                }
  376|       |
  377|       |                //PHI_LOG_INFO("Parsed identifier as float register {}",
  378|       |                //             magic_enum::enum_name(float_reg_id));
  379|       |
  380|      0|                return ConstructInstructionArgRegisterFloat(
  381|      0|                        static_cast<FloatRegisterID>(token.GetHint()));
  382|      0|            }
  383|     57|            case Token::Type::RegisterStatus: {
  384|     57|            }
  385|     76|            case Token::Type::LabelIdentifier: {
  386|       |                // Parse as Label
  387|     76|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  388|     65|                {
  389|     65|                    AddParseError(program,
  390|     65|                                  fmt::format("Got Label but expected '{}'",
  391|     65|                                              magic_enum::enum_name(expected_argument_type)));
  392|     65|                    return {};
  393|     65|                }
  394|       |
  395|     11|                if (IsReservedIdentifier(token.GetText()))
  396|      1|                {
  397|      1|                    AddParseError(program, fmt::format("Cannot used reserved identifier {}",
  398|      1|                                                       token.GetText()));
  399|      1|                    return {};
  400|      1|                }
  401|       |
  402|     10|                if (!IsValidIdentifier(token.GetText()))
  403|      9|                {
  404|      9|                    AddParseError(program, fmt::format("Invalid label identifier found {}",
  405|      9|                                                       token.GetText()));
  406|      9|                    return {};
  407|      9|                }
  408|       |
  409|       |                //PHI_LOG_INFO("Parsed Label identifier as '{}'", token.GetText());
  410|       |
  411|      1|                return ConstructInstructionArgLabel(token.GetText());
  412|      1|            }
  413|      4|            case Token::Type::ImmediateInteger: {
  414|      4|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  415|      4|                {
  416|      4|                    AddParseError(program,
  417|      4|                                  fmt::format("Got ImmediateInteger but expected '{}'",
  418|      4|                                              magic_enum::enum_name(expected_argument_type)));
  419|      4|                    return {};
  420|      4|                }
  421|       |
  422|      0|                auto parsed_value = ParseNumber(token.GetText().substr(1));
  423|      0|                if (!parsed_value)
  424|      0|                {
  425|      0|                    AddParseError(program, "Failed to parse immediate Integer value");
  426|      0|                    return {};
  427|      0|                }
  428|       |
  429|       |                //PHI_LOG_INFO("Parsed Immediate Integer with value {}", parsed_value.value().get());
  430|       |
  431|      0|                return ConstructInstructionArgImmediateValue(parsed_value.value().get());
  432|      0|            }
  433|    358|            default:
  434|    358|                AddParseError(program,
  435|    358|                              fmt::format("Unexpected token of type '{}'", token.GetTypeName()));
  436|    358|                return {};
  437|    443|        }
  438|    443|    }
  439|       |
  440|       |    static void consume_x_tokens(phi::usize& index, phi::usize x) noexcept
  441|  18.2k|    {
  442|  18.2k|        index += x;
  443|  18.2k|    }
  444|       |
  445|       |    static void consume_current_token(phi::usize& index) noexcept
  446|  18.2k|    {
  447|  18.2k|        consume_x_tokens(index, 1u);
  448|  18.2k|    }
  449|       |
  450|       |    ParsedProgram Parser::Parse(const InstructionLibrary& lib, std::vector<Token>& tokens) noexcept
  451|    996|    {
  452|    996|        ParsedProgram program;
  453|       |
  454|    996|        program.m_Tokens = tokens;
  455|       |
  456|    996|        phi::Boolean line_has_instruction{false};
  457|       |
  458|  18.7k|        for (phi::usize index{0u}; index < tokens.size();)
  459|  17.7k|        {
  460|  17.7k|            Token& current_token = tokens.at(index.get());
  461|       |
  462|  17.7k|            consume_current_token(index);
  463|       |
  464|       |            //PHI_LOG_INFO("Parsing '{}'", current_token.DebugInfo());
  465|       |
  466|  17.7k|            switch (current_token.GetType())
  467|  17.7k|            {
  468|       |                // Ignore comments
  469|  1.66k|                case Token::Type::Comment:
  470|       |                    //PHI_LOG_DEBUG("Ignoring comment");
  471|  1.66k|                    break;
  472|  3.29k|                case Token::Type::NewLine:
  473|       |                    //PHI_LOG_DEBUG("Ignoring newline");
  474|  3.29k|                    line_has_instruction = false;
  475|  3.29k|                    break;
  476|  3.22k|                case Token::Type::LabelIdentifier: {
  477|  3.22k|                    if (line_has_instruction)
  478|      0|                    {
  479|      0|                        AddParseError(program, "Expected new line but got label identifer");
  480|      0|                        break;
  481|      0|                    }
  482|       |
  483|       |                    // Handle jump labels
  484|       |                    // Check if the last character of the identifier is a colon
  485|  3.22k|                    if (current_token.GetText().at(current_token.GetText().size() - 1) == ':')
  486|  1.90k|                    {
  487|  1.90k|                        std::string_view label_name = current_token.GetText().substr(
  488|  1.90k|                                0, current_token.GetText().size() - 1);
  489|       |
  490|  1.90k|                        if (IsReservedIdentifier(label_name))
  491|      1|                        {
  492|      1|                            AddParseError(
  493|      1|                                    program,
  494|      1|                                    fmt::format("Cannot used reserved identifier {} as jump label",
  495|      1|                                                label_name));
  496|      1|                            break;
  497|      1|                        }
  498|       |
  499|  1.90k|                        program.m_JumpData[label_name] =
  500|  1.90k|                                static_cast<std::uint32_t>(program.m_Instructions.size());
  501|       |
  502|       |                        //PHI_LOG_INFO("Added jump label {} -> {}", label_name,
  503|       |                        //             program.m_Instructions.size());
  504|  1.90k|                    }
  505|  1.32k|                    else
  506|  1.32k|                    {
  507|  1.32k|                        AddParseError(program, "Label identifier is missing a colon");
  508|  1.32k|                    }
  509|       |
  510|  3.22k|                    break;
  511|  3.22k|                }
  512|  3.22k|                case Token::Type::OpCode: {
  513|    471|                    if (line_has_instruction)
  514|      1|                    {
  515|      1|                        AddParseError(program, "Expected new line but got op code");
  516|      1|                        break;
  517|      1|                    }
  518|       |
  519|       |                    // Handle normal instructions
  520|    470|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  521|       |
  522|       |                    //PHI_LOG_INFO("Instruction opcode: {}", magic_enum::enum_name(opcode));
  523|       |
  524|    470|                    const InstructionInfo& info = lib.LookUp(opcode);
  525|       |
  526|       |                    // Make sure we got no problems here
  527|    470|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  528|    470|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  529|    470|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  530|    470|                    PHI_ASSERT(info.GetExecutor());
  531|       |
  532|    470|                    phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  533|       |                    //PHI_LOG_INFO("Instruction requires {} arguments",
  534|       |                    //             number_of_argument_required.get());
  535|       |
  536|       |                    // Create instruction
  537|    470|                    Instruction instruction(info);
  538|       |
  539|       |                    // Parse arguments
  540|    514|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  541|    510|                    {
  542|       |                        // Get next token
  543|    510|                        if (!has_one_more_token(tokens, index))
  544|     23|                        {
  545|     23|                            AddParseError(
  546|     23|                                    program,
  547|     23|                                    fmt::format("Missing {} arguments for instruction {}",
  548|     23|                                                (number_of_argument_required - argument_num).get(),
  549|     23|                                                magic_enum::enum_name(opcode)));
  550|     23|                            break;
  551|     23|                        }
  552|       |
  553|    487|                        current_token = tokens.at(index.get());
  554|    487|                        consume_current_token(index);
  555|       |
  556|       |                        // Skip commas
  557|    487|                        if (current_token.GetType() == Token::Type::Comma)
  558|     42|                        {
  559|       |                            //PHI_LOG_DEBUG("Skipping comma");
  560|     42|                            continue;
  561|     42|                        }
  562|       |
  563|    445|                        if (current_token.GetType() == Token::Type::NewLine)
  564|      2|                        {
  565|      2|                            AddParseError(program, "Unexpected end of line");
  566|      2|                            break;
  567|      2|                        }
  568|       |
  569|    443|                        std::optional<InstructionArg> optional_parsed_argument =
  570|    443|                                parse_instruction_argument(current_token,
  571|    443|                                                           info.GetArgumentType(argument_num),
  572|    443|                                                           tokens, index, program);
  573|    443|                        if (!optional_parsed_argument.has_value())
  574|    441|                        {
  575|    441|                            AddParseError(program, fmt::format("Failed to parse argument number {}",
  576|    441|                                                               argument_num.get()));
  577|    441|                            break;
  578|    441|                        }
  579|       |
  580|       |                        // Successfully parsed one argument
  581|      2|                        InstructionArg parsed_argument = optional_parsed_argument.value();
  582|       |
  583|      2|                        instruction.SetArgument(argument_num, parsed_argument);
  584|      2|                        argument_num++;
  585|       |
  586|       |                        //PHI_LOG_INFO("Successfully parsed argument {}", argument_num.get());
  587|      2|                    }
  588|       |
  589|       |                    // Only add the instruction if we got no parsing errors
  590|    470|                    if (program.m_ParseErrors.empty())
  591|      4|                    {
  592|       |                        //PHI_LOG_INFO("Successfully parsed instruction '{}'",
  593|       |                        //            instruction.DebugInfo());
  594|      4|                        program.m_Instructions.emplace_back(instruction);
  595|      4|                        line_has_instruction = true;
  596|      4|                    }
  597|    470|                    break;
  598|    470|                }
  599|       |
  600|  9.12k|                default:
  601|  9.12k|                    AddParseError(program, "Unexpected token");
  602|  9.12k|                    break;
  603|  17.7k|            }
  604|  17.7k|        }
  605|       |
  606|    996|        return program;
  607|    996|    }
  608|       |
  609|       |    ParsedProgram Parser::Parse(const InstructionLibrary& lib, std::string_view source) noexcept
  610|    996|    {
  611|    996|        std::vector<Token> tokens = Tokenize(source);
  612|    996|        return Parse(lib, tokens);
  613|    996|    }
  614|       |} // namespace dlx

