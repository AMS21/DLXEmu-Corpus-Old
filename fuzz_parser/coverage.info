/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionInfo.cpp:
    1|       |#include "DLX/InstructionInfo.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void InstructionInfo::Execute(Processor& processor, const InstructionArg& arg1,
    6|       |                                  const InstructionArg& arg2,
    7|       |                                  const InstructionArg& arg3) const noexcept
    8|      0|    {
    9|      0|        PHI_ASSERT(m_Executor, "No execution function defined");
   10|       |
   11|      0|        m_Executor(processor, arg1, arg2, arg3);
   12|      0|    }
   13|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionLibrary.cpp:
    1|       |#include "DLX/InstructionLibrary.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/InstructionImplementation.hpp"
    5|       |#include "DLX/InstructionInfo.hpp"
    6|       |#include <magic_enum.hpp>
    7|       |
    8|       |namespace dlx
    9|       |{
   10|       |    InstructionLibrary::InstructionLibrary() noexcept
   11|       |        : m_Instructions()
   12|    942|    {
   13|    942|        PHI_ASSERT(Initialize());
   14|    942|    }
   15|       |
   16|       |    phi::Boolean InstructionLibrary::Initialize() noexcept
   17|    942|    {
   18|       |        /* Arithmetic */
   19|       |
   20|       |        // Addition
   21|    942|        InitInstruction(OpCode::ADD, ArgumentType::IntRegister, ArgumentType::IntRegister,
   22|    942|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::ADD);
   23|    942|        InitInstruction(OpCode::ADDI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   24|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::ADDI);
   25|    942|        InitInstruction(OpCode::ADDU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   26|    942|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::ADDU);
   27|    942|        InitInstruction(OpCode::ADDUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   28|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::ADDUI);
   29|    942|        InitInstruction(OpCode::ADDF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   30|    942|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::ADDF);
   31|    942|        InitInstruction(OpCode::ADDD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   32|    942|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::ADDD);
   33|       |
   34|       |        // Subtraction
   35|    942|        InitInstruction(OpCode::SUB, ArgumentType::IntRegister, ArgumentType::IntRegister,
   36|    942|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SUB);
   37|    942|        InitInstruction(OpCode::SUBI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   38|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SUBI);
   39|    942|        InitInstruction(OpCode::SUBU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   40|    942|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SUBU);
   41|    942|        InitInstruction(OpCode::SUBUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   42|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SUBUI);
   43|    942|        InitInstruction(OpCode::SUBF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   44|    942|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::SUBF);
   45|    942|        InitInstruction(OpCode::SUBD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   46|    942|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::SUBD);
   47|       |
   48|       |        // Multiplikation
   49|    942|        InitInstruction(OpCode::MULT, ArgumentType::IntRegister, ArgumentType::IntRegister,
   50|    942|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::MULT);
   51|    942|        InitInstruction(OpCode::MULTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   52|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::MULTI);
   53|    942|        InitInstruction(OpCode::MULTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   54|    942|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::MULTU);
   55|    942|        InitInstruction(OpCode::MULTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   56|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::MULTUI);
   57|    942|        InitInstruction(OpCode::MULTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   58|    942|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::MULTF);
   59|    942|        InitInstruction(OpCode::MULTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   60|    942|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::MULTD);
   61|       |
   62|       |        // Division
   63|    942|        InitInstruction(OpCode::DIV, ArgumentType::IntRegister, ArgumentType::IntRegister,
   64|    942|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::DIV);
   65|    942|        InitInstruction(OpCode::DIVI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   66|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::DIVI);
   67|    942|        InitInstruction(OpCode::DIVU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   68|    942|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::DIVU);
   69|    942|        InitInstruction(OpCode::DIVUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   70|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::DIVUI);
   71|    942|        InitInstruction(OpCode::DIVF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   72|    942|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::DIVF);
   73|    942|        InitInstruction(OpCode::DIVD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   74|    942|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::DIVD);
   75|       |
   76|       |        // Shift left logical
   77|    942|        InitInstruction(OpCode::SLL, ArgumentType::IntRegister, ArgumentType::IntRegister,
   78|    942|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SLL);
   79|    942|        InitInstruction(OpCode::SLLI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   80|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SLLI);
   81|       |
   82|       |        // Shift right logical
   83|    942|        InitInstruction(OpCode::SRL, ArgumentType::IntRegister, ArgumentType::IntRegister,
   84|    942|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SRL);
   85|    942|        InitInstruction(OpCode::SRLI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   86|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SRLI);
   87|       |
   88|       |        // Shift left arithmetic
   89|    942|        InitInstruction(OpCode::SLA, ArgumentType::IntRegister, ArgumentType::IntRegister,
   90|    942|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SLA);
   91|    942|        InitInstruction(OpCode::SLAI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   92|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SLAI);
   93|       |
   94|       |        // Shift right arithmetic
   95|    942|        InitInstruction(OpCode::SRA, ArgumentType::IntRegister, ArgumentType::IntRegister,
   96|    942|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SRA);
   97|    942|        InitInstruction(OpCode::SRAI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   98|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SRAI);
   99|       |
  100|       |        /* Logical */
  101|       |
  102|       |        // And
  103|    942|        InitInstruction(OpCode::AND, ArgumentType::IntRegister, ArgumentType::IntRegister,
  104|    942|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::AND);
  105|    942|        InitInstruction(OpCode::ANDI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  106|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::ANDI);
  107|       |
  108|       |        // Or
  109|    942|        InitInstruction(OpCode::OR, ArgumentType::IntRegister, ArgumentType::IntRegister,
  110|    942|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::OR);
  111|    942|        InitInstruction(OpCode::ORI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  112|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::ORI);
  113|       |
  114|       |        // Xor
  115|    942|        InitInstruction(OpCode::XOR, ArgumentType::IntRegister, ArgumentType::IntRegister,
  116|    942|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::XOR);
  117|    942|        InitInstruction(OpCode::XORI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  118|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::XORI);
  119|       |
  120|       |        /* Conditionals */
  121|       |
  122|       |        // Set less than
  123|    942|        InitInstruction(OpCode::SLT, ArgumentType::IntRegister, ArgumentType::IntRegister,
  124|    942|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SLT);
  125|    942|        InitInstruction(OpCode::SLTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  126|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SLTI);
  127|    942|        InitInstruction(OpCode::SLTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  128|    942|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SLTU);
  129|    942|        InitInstruction(OpCode::SLTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  130|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SLTUI);
  131|    942|        InitInstruction(OpCode::LTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  132|    942|                        ArgumentType::None, RegisterAccessType::Float, impl::LTF);
  133|    942|        InitInstruction(OpCode::LTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  134|    942|                        ArgumentType::None, RegisterAccessType::Double, impl::LTD);
  135|       |
  136|       |        // Set greater than
  137|    942|        InitInstruction(OpCode::SGT, ArgumentType::IntRegister, ArgumentType::IntRegister,
  138|    942|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SGT);
  139|    942|        InitInstruction(OpCode::SGTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  140|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SGTI);
  141|    942|        InitInstruction(OpCode::SGTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  142|    942|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SGTU);
  143|    942|        InitInstruction(OpCode::SGTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  144|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SGTUI);
  145|    942|        InitInstruction(OpCode::GTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  146|    942|                        ArgumentType::None, RegisterAccessType::Float, impl::GTF);
  147|    942|        InitInstruction(OpCode::GTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  148|    942|                        ArgumentType::None, RegisterAccessType::Double, impl::GTD);
  149|       |
  150|       |        // Set less than or equal
  151|    942|        InitInstruction(OpCode::SLE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  152|    942|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SLE);
  153|    942|        InitInstruction(OpCode::SLEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  154|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SLEI);
  155|    942|        InitInstruction(OpCode::SLEU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  156|    942|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SLEU);
  157|    942|        InitInstruction(OpCode::SLEUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  158|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SLEUI);
  159|    942|        InitInstruction(OpCode::LEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  160|    942|                        ArgumentType::None, RegisterAccessType::Float, impl::LEF);
  161|    942|        InitInstruction(OpCode::LED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  162|    942|                        ArgumentType::None, RegisterAccessType::Double, impl::LED);
  163|       |
  164|       |        // Set greater than or equal
  165|    942|        InitInstruction(OpCode::SGE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  166|    942|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SGE);
  167|    942|        InitInstruction(OpCode::SGEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  168|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SGEI);
  169|    942|        InitInstruction(OpCode::SGEU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  170|    942|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SGEU);
  171|    942|        InitInstruction(OpCode::SGEUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  172|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SGEUI);
  173|    942|        InitInstruction(OpCode::GEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  174|    942|                        ArgumentType::None, RegisterAccessType::Float, impl::GEF);
  175|    942|        InitInstruction(OpCode::GED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  176|    942|                        ArgumentType::None, RegisterAccessType::Double, impl::GED);
  177|       |
  178|       |        // Set equal
  179|    942|        InitInstruction(OpCode::SEQ, ArgumentType::IntRegister, ArgumentType::IntRegister,
  180|    942|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SEQ);
  181|    942|        InitInstruction(OpCode::SEQI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  182|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SEQI);
  183|    942|        InitInstruction(OpCode::SEQU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  184|    942|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SEQU);
  185|    942|        InitInstruction(OpCode::SEQUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  186|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SEQUI);
  187|    942|        InitInstruction(OpCode::EQF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  188|    942|                        ArgumentType::None, RegisterAccessType::Float, impl::EQF);
  189|    942|        InitInstruction(OpCode::EQD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  190|    942|                        ArgumentType::None, RegisterAccessType::Double, impl::EQD);
  191|       |
  192|       |        // Set not equal
  193|    942|        InitInstruction(OpCode::SNE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  194|    942|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SNE);
  195|    942|        InitInstruction(OpCode::SNEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  196|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SNEI);
  197|    942|        InitInstruction(OpCode::SNEU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  198|    942|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SNEU);
  199|    942|        InitInstruction(OpCode::SNEUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  200|    942|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SNEUI);
  201|    942|        InitInstruction(OpCode::NEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  202|    942|                        ArgumentType::None, RegisterAccessType::Float, impl::NEF);
  203|    942|        InitInstruction(OpCode::NED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  204|    942|                        ArgumentType::None, RegisterAccessType::Double, impl::NED);
  205|       |
  206|       |        /* Conditional branching */
  207|       |
  208|       |        // Branch equal zero
  209|    942|        InitInstruction(OpCode::BEQZ, ArgumentType::IntRegister, ArgumentType::Label,
  210|    942|                        ArgumentType::None, RegisterAccessType::Ignored, impl::BEQZ);
  211|       |
  212|       |        // Branch not equal zero
  213|    942|        InitInstruction(OpCode::BNEZ, ArgumentType::IntRegister, ArgumentType::Label,
  214|    942|                        ArgumentType::None, RegisterAccessType::Ignored, impl::BNEZ);
  215|       |
  216|       |        // Branch floating point true
  217|    942|        InitInstruction(OpCode::BFPT, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  218|    942|                        RegisterAccessType::Ignored, impl::BFPT);
  219|       |
  220|       |        // Branch floating point false
  221|    942|        InitInstruction(OpCode::BFPF, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  222|    942|                        RegisterAccessType::Ignored, impl::BFPF);
  223|       |
  224|       |        /* Unconditional branching */
  225|       |
  226|       |        // Jump
  227|    942|        InitInstruction(OpCode::J, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  228|    942|                        RegisterAccessType::None, impl::J);
  229|       |
  230|       |        // Jump to register
  231|    942|        InitInstruction(OpCode::JR, ArgumentType::IntRegister, ArgumentType::None,
  232|    942|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::JR);
  233|       |
  234|       |        // Jump and link
  235|    942|        InitInstruction(OpCode::JAL, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  236|    942|                        RegisterAccessType::Unsigned, impl::JAL);
  237|       |
  238|       |        // Jump and link to register
  239|    942|        InitInstruction(OpCode::JALR, ArgumentType::IntRegister, ArgumentType::None,
  240|    942|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::JALR);
  241|       |
  242|       |        /* Loading data */
  243|       |
  244|       |        // Load high immediate
  245|    942|        InitInstruction(OpCode::LHI, ArgumentType::IntRegister, ArgumentType::ImmediateInteger,
  246|    942|                        ArgumentType::None, RegisterAccessType::Signed, impl::LHI);
  247|       |
  248|       |        // Load byte
  249|    942|        InitInstruction(OpCode::LB, ArgumentType::IntRegister,
  250|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  251|    942|                        ArgumentType::None, RegisterAccessType::Signed, impl::LB);
  252|       |
  253|       |        // Load byte unsigned
  254|    942|        InitInstruction(OpCode::LBU, ArgumentType::IntRegister,
  255|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  256|    942|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LBU);
  257|       |
  258|       |        // Load half word
  259|    942|        InitInstruction(OpCode::LH, ArgumentType::IntRegister,
  260|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  261|    942|                        ArgumentType::None, RegisterAccessType::Signed, impl::LH);
  262|       |
  263|       |        // Load half word unsigned
  264|    942|        InitInstruction(OpCode::LHU, ArgumentType::IntRegister,
  265|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  266|    942|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LHU);
  267|       |
  268|       |        // Load word
  269|    942|        InitInstruction(OpCode::LW, ArgumentType::IntRegister,
  270|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  271|    942|                        ArgumentType::None, RegisterAccessType::Signed, impl::LW);
  272|       |
  273|       |        // Load word unsigned
  274|    942|        InitInstruction(OpCode::LWU, ArgumentType::IntRegister,
  275|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  276|    942|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LWU);
  277|       |
  278|       |        // Load float
  279|    942|        InitInstruction(OpCode::LF, ArgumentType::FloatRegister,
  280|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  281|    942|                        ArgumentType::None, RegisterAccessType::Float, impl::LF);
  282|       |
  283|       |        // Load double
  284|    942|        InitInstruction(OpCode::LD, ArgumentType::FloatRegister,
  285|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  286|    942|                        ArgumentType::None, RegisterAccessType::Double, impl::LD);
  287|       |
  288|       |        /* Storing data */
  289|       |
  290|       |        // Store byte
  291|    942|        InitInstruction(OpCode::SB,
  292|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  293|    942|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  294|    942|                        impl::SB);
  295|       |
  296|       |        // Store byte unsigned
  297|    942|        InitInstruction(OpCode::SBU,
  298|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  299|    942|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  300|    942|                        impl::SBU);
  301|       |
  302|       |        // Store half word
  303|    942|        InitInstruction(OpCode::SH,
  304|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  305|    942|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  306|    942|                        impl::SH);
  307|       |
  308|       |        // Store half word unsigned
  309|    942|        InitInstruction(OpCode::SHU,
  310|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  311|    942|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  312|    942|                        impl::SHU);
  313|       |
  314|       |        // Store word
  315|    942|        InitInstruction(OpCode::SW,
  316|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  317|    942|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  318|    942|                        impl::SW);
  319|       |
  320|       |        // Store word unsigned
  321|    942|        InitInstruction(OpCode::SWU,
  322|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  323|    942|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  324|    942|                        impl::SWU);
  325|       |
  326|       |        // Store float
  327|    942|        InitInstruction(OpCode::SF,
  328|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  329|    942|                        ArgumentType::FloatRegister, ArgumentType::None, RegisterAccessType::Float,
  330|    942|                        impl::SF);
  331|       |
  332|       |        // Store double
  333|    942|        InitInstruction(OpCode::SD,
  334|    942|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  335|    942|                        ArgumentType::FloatRegister, ArgumentType::None, RegisterAccessType::Double,
  336|    942|                        impl::SD);
  337|       |
  338|       |        /* Moving data */
  339|       |
  340|       |        // Move float
  341|    942|        InitInstruction(OpCode::MOVF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  342|    942|                        ArgumentType::None, RegisterAccessType::Float, impl::MOVF);
  343|       |
  344|       |        // Move double
  345|    942|        InitInstruction(OpCode::MOVD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  346|    942|                        ArgumentType::None, RegisterAccessType::Double, impl::MOVD);
  347|       |
  348|       |        // Move float to int
  349|    942|        InitInstruction(OpCode::MOVFP2I, ArgumentType::IntRegister, ArgumentType::FloatRegister,
  350|    942|                        ArgumentType::None, RegisterAccessType::Float, impl::MOVFP2I);
  351|       |
  352|       |        // Move int to float
  353|    942|        InitInstruction(OpCode::MOVI2FP, ArgumentType::FloatRegister, ArgumentType::IntRegister,
  354|    942|                        ArgumentType::None, RegisterAccessType::Float, impl::MOVI2FP);
  355|       |
  356|       |        /* Converting data */
  357|       |
  358|       |        // Convert float to double
  359|    942|        InitInstruction(OpCode::CVTF2D, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  360|    942|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTF2D);
  361|       |
  362|       |        // Convert float to int
  363|    942|        InitInstruction(OpCode::CVTF2I, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  364|    942|                        ArgumentType::None, RegisterAccessType::Float, impl::CVTF2I);
  365|       |
  366|       |        // Convert double to float
  367|    942|        InitInstruction(OpCode::CVTD2F, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  368|    942|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTD2F);
  369|       |
  370|       |        // Convert double to int
  371|    942|        InitInstruction(OpCode::CVTD2I, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  372|    942|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTD2I);
  373|       |
  374|       |        // Convert int to float
  375|    942|        InitInstruction(OpCode::CVTI2F, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  376|    942|                        ArgumentType::None, RegisterAccessType::Float, impl::CVTI2F);
  377|       |
  378|       |        // Convert int to double
  379|    942|        InitInstruction(OpCode::CVTI2D, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  380|    942|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTI2D);
  381|       |
  382|       |        /* Special */
  383|       |
  384|       |        // Trap
  385|    942|        InitInstruction(OpCode::TRAP, ArgumentType::ImmediateInteger, ArgumentType::None,
  386|    942|                        ArgumentType::None, RegisterAccessType::None, impl::TRAP);
  387|       |
  388|       |        // Halt
  389|    942|        InitInstruction(OpCode::HALT, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  390|    942|                        RegisterAccessType::None, impl::HALT);
  391|       |
  392|       |        // No operation
  393|    942|        InitInstruction(OpCode::NOP, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  394|    942|                        RegisterAccessType::None, impl::NOP);
  395|       |
  396|    942|        return true;
  397|    942|    }
  398|       |
  399|       |    const InstructionInfo& InstructionLibrary::LookUp(OpCode instruction) const noexcept
  400|   107k|    {
  401|   107k|        return m_Instructions.at(static_cast<std::size_t>(instruction));
  402|   107k|    }
  403|       |
  404|       |    void InstructionLibrary::InitInstruction(OpCode opcode, ArgumentType arg1, ArgumentType arg2,
  405|       |                                             ArgumentType        arg3,
  406|       |                                             RegisterAccessType  register_access_type,
  407|       |                                             InstructionExecutor executor) noexcept
  408|   105k|    {
  409|   105k|        PHI_ASSERT(LookUp(opcode).GetExecutor() == nullptr, "Already registered instruction {}",
  410|   105k|                   magic_enum::enum_name(opcode));
  411|       |
  412|   105k|        m_Instructions.at(static_cast<std::size_t>(opcode)) =
  413|   105k|                InstructionInfo(opcode, arg1, arg2, arg3, register_access_type, executor);
  414|   105k|    }
  415|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/MemoryBlock.cpp:
    1|       |#include "DLX/MemoryBlock.hpp"
    2|       |#include "Phi/Core/Boolean.hpp"
    3|       |#include "Phi/Core/Log.hpp"
    4|       |#include <cstdint>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    MemoryBlock::MemoryBlock(phi::usize start_address, phi::usize starting_size) noexcept
    9|       |        : m_StartingAddress(start_address)
   10|      0|    {
   11|      0|        m_Values.resize(starting_size.get());
   12|      0|    }
   13|       |
   14|       |    std::optional<phi::i8> MemoryBlock::LoadByte(phi::usize address) const noexcept
   15|      0|    {
   16|      0|        if (!IsAddressValid(address, 1u))
   17|      0|        {
   18|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   19|      0|            return {};
   20|      0|        }
   21|       |
   22|      0|        std::size_t index = (address - m_StartingAddress).get();
   23|      0|        return m_Values[index].signed_value;
   24|      0|    }
   25|       |
   26|       |    std::optional<phi::u8> MemoryBlock::LoadUnsignedByte(phi::usize address) const noexcept
   27|      0|    {
   28|      0|        if (!IsAddressValid(address, 1u))
   29|      0|        {
   30|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   31|      0|            return {};
   32|      0|        }
   33|       |
   34|      0|        std::size_t index = (address - m_StartingAddress).get();
   35|      0|        return m_Values[index].unsigned_value;
   36|      0|    }
   37|       |
   38|       |    std::optional<phi::i16> MemoryBlock::LoadHalfWord(phi::usize address) const noexcept
   39|      0|    {
   40|      0|        if (!IsAddressValid(address, 2u))
   41|      0|        {
   42|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   43|      0|            return {};
   44|      0|        }
   45|       |
   46|      0|        std::size_t index = (address - m_StartingAddress).get();
   47|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[index].signed_value);
   48|      0|    }
   49|       |
   50|       |    std::optional<phi::u16> MemoryBlock::LoadUnsignedHalfWord(phi::usize address) const noexcept
   51|      0|    {
   52|      0|        if (!IsAddressValid(address, 2u))
   53|      0|        {
   54|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   55|      0|            return {};
   56|      0|        }
   57|       |
   58|      0|        std::size_t index = (address - m_StartingAddress).get();
   59|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[index].unsigned_value);
   60|      0|    }
   61|       |
   62|       |    std::optional<phi::i32> MemoryBlock::LoadWord(phi::usize address) const noexcept
   63|      0|    {
   64|      0|        if (!IsAddressValid(address, 4u))
   65|      0|        {
   66|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   67|      0|            return {};
   68|      0|        }
   69|       |
   70|      0|        std::size_t index = (address - m_StartingAddress).get();
   71|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[index].signed_value);
   72|      0|    }
   73|       |
   74|       |    std::optional<phi::u32> MemoryBlock::LoadUnsignedWord(phi::usize address) const noexcept
   75|      0|    {
   76|      0|        if (!IsAddressValid(address, 4u))
   77|      0|        {
   78|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   79|      0|            return {};
   80|      0|        }
   81|       |
   82|      0|        std::size_t index = (address - m_StartingAddress).get();
   83|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[index].unsigned_value);
   84|      0|    }
   85|       |
   86|       |    std::optional<phi::f32> MemoryBlock::LoadFloat(phi::usize address) const noexcept
   87|      0|    {
   88|      0|        if (!IsAddressValid(address, 4u))
   89|      0|        {
   90|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   91|      0|            return {};
   92|      0|        }
   93|       |
   94|      0|        std::size_t index = (address - m_StartingAddress).get();
   95|      0|        return *reinterpret_cast<const float*>(&m_Values[index].signed_value);
   96|      0|    }
   97|       |
   98|       |    std::optional<phi::f64> MemoryBlock::LoadDouble(phi::usize address) const noexcept
   99|      0|    {
  100|      0|        if (!IsAddressValid(address, 8u))
  101|      0|        {
  102|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|      0|        std::size_t index = (address - m_StartingAddress).get();
  107|      0|        return *reinterpret_cast<const double*>(&m_Values[(index)].signed_value);
  108|      0|    }
  109|       |
  110|       |    phi::Boolean MemoryBlock::StoreByte(phi::usize address, phi::i8 value) noexcept
  111|      0|    {
  112|      0|        if (!IsAddressValid(address, 1u))
  113|      0|        {
  114|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  115|      0|            return false;
  116|      0|        }
  117|       |
  118|      0|        m_Values[(address - m_StartingAddress).get()].signed_value = value.get();
  119|      0|        return true;
  120|      0|    }
  121|       |
  122|       |    phi::Boolean MemoryBlock::StoreUnsignedByte(phi::usize address, phi::u8 value) noexcept
  123|      0|    {
  124|      0|        if (!IsAddressValid(address, 1u))
  125|      0|        {
  126|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  127|      0|            return false;
  128|      0|        }
  129|       |
  130|      0|        m_Values[(address - m_StartingAddress).get()].unsigned_value = value.get();
  131|      0|        return true;
  132|      0|    }
  133|       |
  134|       |    phi::Boolean MemoryBlock::StoreHalfWord(phi::usize address, phi::i16 value) noexcept
  135|      0|    {
  136|      0|        if (!IsAddressValid(address, 2u))
  137|      0|        {
  138|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  139|      0|            return false;
  140|      0|        }
  141|       |
  142|      0|        std::size_t index = (address - m_StartingAddress).get();
  143|      0|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.get();
  144|       |
  145|      0|        return true;
  146|      0|    }
  147|       |
  148|       |    phi::Boolean MemoryBlock::StoreUnsignedHalfWord(phi::usize address, phi::u16 value) noexcept
  149|      0|    {
  150|      0|        if (!IsAddressValid(address, 2u))
  151|      0|        {
  152|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  153|      0|            return false;
  154|      0|        }
  155|       |
  156|      0|        std::size_t index = (address - m_StartingAddress).get();
  157|      0|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.get();
  158|       |
  159|      0|        return true;
  160|      0|    }
  161|       |
  162|       |    phi::Boolean MemoryBlock::StoreWord(phi::usize address, phi::i32 value) noexcept
  163|      0|    {
  164|      0|        if (!IsAddressValid(address, 4u))
  165|      0|        {
  166|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  167|      0|            return false;
  168|      0|        }
  169|       |
  170|      0|        std::size_t index = (address - m_StartingAddress).get();
  171|      0|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.get();
  172|       |
  173|      0|        return true;
  174|      0|    }
  175|       |
  176|       |    phi::Boolean MemoryBlock::StoreUnsignedWord(phi::usize address, phi::u32 value) noexcept
  177|      0|    {
  178|      0|        if (!IsAddressValid(address, 4u))
  179|      0|        {
  180|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  181|      0|            return false;
  182|      0|        }
  183|       |
  184|      0|        std::size_t index = (address - m_StartingAddress).get();
  185|      0|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.get();
  186|       |
  187|      0|        return true;
  188|      0|    }
  189|       |
  190|       |    phi::Boolean MemoryBlock::StoreFloat(phi::usize address, phi::f32 value) noexcept
  191|      0|    {
  192|      0|        if (!IsAddressValid(address, 4u))
  193|      0|        {
  194|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|      0|        std::size_t index = (address - m_StartingAddress).get();
  199|      0|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.get();
  200|       |
  201|      0|        return true;
  202|      0|    }
  203|       |
  204|       |    phi::Boolean MemoryBlock::StoreDouble(phi::usize address, phi::f64 value) noexcept
  205|      0|    {
  206|      0|        if (!IsAddressValid(address, 8u))
  207|      0|        {
  208|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  209|      0|            return false;
  210|      0|        }
  211|       |
  212|      0|        std::size_t index = (address - m_StartingAddress).get();
  213|      0|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.get();
  214|       |
  215|      0|        return true;
  216|      0|    }
  217|       |
  218|       |    phi::Boolean MemoryBlock::IsAddressValid(phi::usize address, phi::usize size) const noexcept
  219|      0|    {
  220|      0|        return address >= m_StartingAddress &&
  221|      0|               (address + size) <= (m_StartingAddress + m_Values.size());
  222|      0|    }
  223|       |
  224|       |    void MemoryBlock::Clear() noexcept
  225|      0|    {
  226|      0|        for (auto& val : m_Values)
  227|      0|        {
  228|      0|            val.signed_value = 0;
  229|      0|        }
  230|      0|    }
  231|       |
  232|       |    phi::usize MemoryBlock::GetStartingAddress() const noexcept
  233|      0|    {
  234|      0|        return m_StartingAddress;
  235|      0|    }
  236|       |
  237|       |    void MemoryBlock::SetStartingAddress(phi::usize new_starting_address) noexcept
  238|      0|    {
  239|      0|        m_StartingAddress = new_starting_address;
  240|      0|    }
  241|       |
  242|       |    std::vector<MemoryBlock::MemoryByte>& MemoryBlock::GetRawMemory() noexcept
  243|      0|    {
  244|      0|        return m_Values;
  245|      0|    }
  246|       |
  247|       |    const std::vector<MemoryBlock::MemoryByte>& MemoryBlock::GetRawMemory() const noexcept
  248|      0|    {
  249|      0|        return m_Values;
  250|      0|    }
  251|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionImplementation.cpp:
    1|       |#include "DLX/InstructionImplementation.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/InstructionInfo.hpp"
    5|       |#include "DLX/Parser.hpp"
    6|       |#include "DLX/Processor.hpp"
    7|       |#include "DLX/RegisterNames.hpp"
    8|       |#include "Phi/Core/Assert.hpp"
    9|       |#include "Phi/Core/Boolean.hpp"
   10|       |#include "Phi/Core/Types.hpp"
   11|       |#include <string_view>
   12|       |
   13|       |namespace dlx
   14|       |{
   15|       |    static std::int32_t clear_top_n_bits(std::int32_t value, std::int32_t n) noexcept
   16|      0|    {
   17|      0|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behaviour");
   18|       |
   19|      0|        return value & ~(-1 << (32 - n));
   20|      0|    }
   21|       |
   22|       |    static void JumpToLabel(Processor& processor, std::string_view label_name) noexcept
   23|      0|    {
   24|       |        // Lookup the label
   25|      0|        const phi::ObserverPtr<ParsedProgram> program = processor.GetCurrentProgramm();
   26|      0|        PHI_ASSERT(program);
   27|       |
   28|      0|        std::string label(label_name.data(), label_name.size());
   29|      0|        if (program->m_JumpData.find(label) == program->m_JumpData.end())
   30|      0|        {
   31|      0|            PHI_LOG_ERROR("Unable to find jump label {}", label_name);
   32|      0|            processor.Raise(Exception::UnknownLabel);
   33|      0|            return;
   34|      0|        }
   35|       |
   36|       |        // Set program counter
   37|      0|        processor.SetNextProgramCounter(program->m_JumpData.at(label));
   38|      0|    }
   39|       |
   40|       |    static void JumpToRegister(Processor& processor, IntRegisterID reg_id) noexcept
   41|      0|    {
   42|      0|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   43|       |
   44|      0|        phi::u32 max_address =
   45|      0|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   46|      0|        if (address >= max_address)
   47|      0|        {
   48|      0|            processor.Raise(Exception::AddressOutOfBounds);
   49|      0|            return;
   50|      0|        }
   51|       |
   52|      0|        processor.SetNextProgramCounter(address.get());
   53|      0|    }
   54|       |
   55|       |    static std::optional<phi::i32> CalculateDisplacementAddress(
   56|       |            Processor&                                 processor,
   57|       |            const InstructionArg::AddressDisplacement& adr_displacement) noexcept
   58|      0|    {
   59|      0|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   60|       |
   61|      0|        phi::i32 address = adr_displacement.displacement + register_value;
   62|       |
   63|      0|        if (address < 0)
   64|      0|        {
   65|      0|            processor.Raise(Exception::AddressOutOfBounds);
   66|      0|            return {};
   67|      0|        }
   68|       |
   69|      0|        return address;
   70|      0|    }
   71|       |
   72|       |    static std::optional<phi::i32> GetLoadStoreAddress(Processor&           processor,
   73|       |                                                       const InstructionArg argument) noexcept
   74|      0|    {
   75|      0|        if (argument.GetType() == ArgumentType::ImmediateInteger)
   76|      0|        {
   77|      0|            const auto& imm_value = argument.AsImmediateValue();
   78|       |
   79|      0|            if (imm_value.signed_value < 0)
   80|      0|            {
   81|      0|                return {};
   82|      0|            }
   83|       |
   84|      0|            return imm_value.signed_value;
   85|      0|        }
   86|       |
   87|      0|        if (argument.GetType() == ArgumentType::AddressDisplacement)
   88|      0|        {
   89|      0|            const auto& adr_displacement = argument.AsAddressDisplacement();
   90|      0|            return CalculateDisplacementAddress(processor, adr_displacement);
   91|      0|        }
   92|       |
   93|      0|        PHI_ASSERT_NOT_REACHED();
   94|      0|    }
   95|       |
   96|       |    static void SafeWriteInteger(Processor& processor, IntRegisterID dest_reg,
   97|       |                                 phi::i64 value) noexcept
   98|      0|    {
   99|      0|        constexpr phi::i64 min = phi::i32::limits_type::min();
  100|      0|        constexpr phi::i64 max = phi::i32::limits_type::max();
  101|       |
  102|       |        // Check for underflow
  103|      0|        if (value < min)
  104|      0|        {
  105|      0|            processor.Raise(Exception::Underflow);
  106|       |
  107|      0|            value = max + (value % (min - 1));
  108|      0|        }
  109|       |        // Check for overflow
  110|      0|        else if (value > max)
  111|      0|        {
  112|      0|            processor.Raise(Exception::Overflow);
  113|       |
  114|      0|            value = min + (value % (max + 1));
  115|      0|        }
  116|       |
  117|      0|        PHI_ASSERT(value >= min);
  118|      0|        PHI_ASSERT(value <= max);
  119|       |
  120|      0|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.get()));
  121|      0|    }
  122|       |
  123|       |    static void SafeWriteInteger(Processor& processor, IntRegisterID dest_reg,
  124|       |                                 phi::u64 value) noexcept
  125|      0|    {
  126|      0|        constexpr phi::u64 min = phi::u32::limits_type::min();
  127|      0|        constexpr phi::u64 max = phi::u32::limits_type::max();
  128|       |
  129|       |        // Check for overflow
  130|      0|        if (value > max)
  131|      0|        {
  132|      0|            processor.Raise(Exception::Overflow);
  133|       |
  134|      0|            value %= max + 1u;
  135|      0|        }
  136|       |
  137|      0|        PHI_ASSERT(value <= max);
  138|       |
  139|      0|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.get()));
  140|      0|    }
  141|       |
  142|       |    static void Addition(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  143|       |                         phi::i32 rhs) noexcept
  144|      0|    {
  145|      0|        phi::i64 res = phi::i64(lhs) + rhs;
  146|       |
  147|      0|        SafeWriteInteger(processor, dest_reg, res);
  148|      0|    }
  149|       |
  150|       |    static void Addition(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  151|       |                         phi::u32 rhs) noexcept
  152|      0|    {
  153|      0|        phi::u64 res = phi::u64(lhs) + rhs;
  154|       |
  155|      0|        SafeWriteInteger(processor, dest_reg, res);
  156|      0|    }
  157|       |
  158|       |    static void Subtraction(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  159|       |                            phi::i32 rhs) noexcept
  160|      0|    {
  161|      0|        phi::i64 res = phi::i64(lhs) - rhs;
  162|       |
  163|      0|        SafeWriteInteger(processor, dest_reg, res);
  164|      0|    }
  165|       |
  166|       |    static void Subtraction(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  167|       |                            phi::u32 rhs) noexcept
  168|      0|    {
  169|      0|        constexpr phi::u32 max = phi::u32::limits_type::max();
  170|       |
  171|      0|        if (lhs < rhs)
  172|      0|        {
  173|      0|            processor.Raise(Exception::Underflow);
  174|       |
  175|      0|            phi::u64 res = max - rhs + lhs + 1u;
  176|      0|            SafeWriteInteger(processor, dest_reg, res);
  177|      0|            return;
  178|      0|        }
  179|       |
  180|      0|        phi::u64 res = phi::u64(lhs) - rhs;
  181|       |
  182|      0|        SafeWriteInteger(processor, dest_reg, res);
  183|      0|    }
  184|       |
  185|       |    static void Multiplication(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  186|       |                               phi::i32 rhs) noexcept
  187|      0|    {
  188|      0|        phi::i64 res = phi::i64(lhs) * rhs;
  189|       |
  190|      0|        SafeWriteInteger(processor, dest_reg, res);
  191|      0|    }
  192|       |
  193|       |    static void Multiplication(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  194|       |                               phi::u32 rhs) noexcept
  195|      0|    {
  196|      0|        phi::u64 res = phi::u64(lhs) * rhs;
  197|       |
  198|      0|        SafeWriteInteger(processor, dest_reg, res);
  199|      0|    }
  200|       |
  201|       |    static void Division(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  202|       |                         phi::i32 rhs) noexcept
  203|      0|    {
  204|      0|        if (rhs == 0)
  205|      0|        {
  206|      0|            processor.Raise(Exception::DivideByZero);
  207|      0|            return;
  208|      0|        }
  209|       |
  210|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  211|       |
  212|      0|        SafeWriteInteger(processor, dest_reg, res);
  213|      0|    }
  214|       |
  215|       |    static void Division(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  216|       |                         phi::u32 rhs) noexcept
  217|      0|    {
  218|      0|        if (rhs == 0u)
  219|      0|        {
  220|      0|            processor.Raise(Exception::DivideByZero);
  221|      0|            return;
  222|      0|        }
  223|       |
  224|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  225|       |
  226|      0|        SafeWriteInteger(processor, dest_reg, res);
  227|      0|    }
  228|       |
  229|       |    static void ShiftRightLogical(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  230|       |                                  phi::i32 shift) noexcept
  231|      0|    {
  232|       |        // Prevent undefined behavior by shifting by more than 31
  233|      0|        if (shift > 31)
  234|      0|        {
  235|      0|            processor.Raise(Exception::BadShift);
  236|       |
  237|       |            // Just set register to 0
  238|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  239|      0|            return;
  240|      0|        }
  241|       |
  242|       |        // Do nothing when shifting by zero to prevent undefined behavior
  243|      0|        if (shift == 0)
  244|      0|        {
  245|      0|            return;
  246|      0|        }
  247|       |
  248|       |        // Negative shifts are undefiend behaviour
  249|      0|        if (shift < 0)
  250|      0|        {
  251|      0|            processor.Raise(Exception::BadShift);
  252|      0|            return;
  253|      0|        }
  254|       |
  255|      0|        phi::i32 new_value = base.get() >> shift.get();
  256|       |
  257|      0|        new_value = clear_top_n_bits(new_value.get(), shift.get());
  258|       |
  259|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  260|      0|    }
  261|       |
  262|       |    static void ShiftRightArithmetic(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  263|       |                                     phi::i32 shift) noexcept
  264|      0|    {
  265|       |        // Prevent undefined behavior by shifting by more than 31
  266|      0|        if (shift > 31)
  267|      0|        {
  268|      0|            processor.Raise(Exception::BadShift);
  269|       |
  270|       |            // Is negative ie. sign bit is set
  271|      0|            if (base < 0)
  272|      0|            {
  273|       |                // Set every byte to 1
  274|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  275|      0|            }
  276|      0|            else
  277|      0|            {
  278|       |                // Set every byte to 0
  279|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  280|      0|            }
  281|      0|            return;
  282|      0|        }
  283|       |
  284|       |        // Negative shifts are undefined behaviour
  285|      0|        if (shift < 0)
  286|      0|        {
  287|      0|            processor.Raise(Exception::BadShift);
  288|      0|            return;
  289|      0|        }
  290|       |
  291|      0|        phi::i32 new_value = base.get() >> shift.get();
  292|       |
  293|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  294|      0|    }
  295|       |
  296|       |    // Behavior is the same for logical and arithmetic shifts
  297|       |    static void ShiftLeft(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  298|       |                          phi::i32 shift) noexcept
  299|      0|    {
  300|      0|        if (shift > 31)
  301|      0|        {
  302|      0|            processor.Raise(Exception::BadShift);
  303|       |
  304|       |            // Just set register to 0
  305|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|      0|            return;
  307|      0|        }
  308|       |
  309|       |        // Negative shifts are undefined behaviour
  310|      0|        if (shift < 0)
  311|      0|        {
  312|      0|            processor.Raise(Exception::BadShift);
  313|      0|            return;
  314|      0|        }
  315|       |
  316|      0|        phi::i32 new_value = base.get() << shift.get();
  317|       |
  318|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  319|      0|    }
  320|       |
  321|       |    namespace impl
  322|       |    {
  323|       |        void ADD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  324|       |                 const InstructionArg& arg3) noexcept
  325|      0|        {
  326|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  327|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  328|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  329|       |
  330|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  331|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  332|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  333|       |
  334|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  335|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  336|       |
  337|      0|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  338|      0|        }
  339|       |
  340|       |        void ADDI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  341|       |                  const InstructionArg& arg3) noexcept
  342|      0|        {
  343|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  344|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  345|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  346|       |
  347|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  348|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  349|      0|            const auto& imm_value = arg3.AsImmediateValue();
  350|       |
  351|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  352|       |
  353|      0|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  354|      0|        }
  355|       |
  356|       |        void ADDU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  357|       |                  const InstructionArg& arg3) noexcept
  358|      0|        {
  359|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  360|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  361|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  362|       |
  363|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  364|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  365|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  366|       |
  367|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  368|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  369|       |
  370|      0|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  371|      0|        }
  372|       |
  373|       |        void ADDUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  374|       |                   const InstructionArg& arg3) noexcept
  375|      0|        {
  376|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  377|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  378|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  379|       |
  380|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  381|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  382|      0|            const auto& imm_value = arg3.AsImmediateValue();
  383|       |
  384|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  385|       |
  386|      0|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  387|      0|        }
  388|       |
  389|       |        void ADDF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  390|       |                  const InstructionArg& arg3) noexcept
  391|      0|        {
  392|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  393|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  394|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  395|       |
  396|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  397|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  398|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  399|       |
  400|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  401|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  402|       |
  403|      0|            const phi::f32 new_value = lhs_value + rhs_value;
  404|       |
  405|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  406|      0|        }
  407|       |
  408|       |        void ADDD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  409|       |                  const InstructionArg& arg3) noexcept
  410|      0|        {
  411|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  412|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  413|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  414|       |
  415|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  416|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  417|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  418|       |
  419|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  420|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  421|       |
  422|      0|            const phi::f64 new_value = lhs_value + rhs_value;
  423|       |
  424|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  425|      0|        }
  426|       |
  427|       |        void SUB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  428|       |                 const InstructionArg& arg3) noexcept
  429|      0|        {
  430|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  431|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  432|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  433|       |
  434|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  435|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  436|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  437|       |
  438|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  439|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  440|       |
  441|      0|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  442|      0|        }
  443|       |
  444|       |        void SUBI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  445|       |                  const InstructionArg& arg3) noexcept
  446|      0|        {
  447|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  448|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  449|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  450|       |
  451|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  452|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  453|      0|            const auto& imm_value = arg3.AsImmediateValue();
  454|       |
  455|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  456|       |
  457|      0|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  458|      0|        }
  459|       |
  460|       |        void SUBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  461|       |                  const InstructionArg& arg3) noexcept
  462|      0|        {
  463|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  464|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  465|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  466|       |
  467|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  468|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  469|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  470|       |
  471|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  472|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  473|       |
  474|      0|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  475|      0|        }
  476|       |
  477|       |        void SUBUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  478|       |                   const InstructionArg& arg3) noexcept
  479|      0|        {
  480|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  481|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  482|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  483|       |
  484|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  485|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  486|      0|            const auto& imm_value = arg3.AsImmediateValue();
  487|       |
  488|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  489|       |
  490|      0|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  491|      0|        }
  492|       |
  493|       |        void SUBF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  494|       |                  const InstructionArg& arg3) noexcept
  495|      0|        {
  496|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  497|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  498|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  499|       |
  500|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  501|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  502|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  503|       |
  504|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  505|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  506|       |
  507|      0|            const phi::f32 new_value = lhs_value - rhs_value;
  508|       |
  509|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  510|      0|        }
  511|       |
  512|       |        void SUBD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  513|       |                  const InstructionArg& arg3) noexcept
  514|      0|        {
  515|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  516|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  517|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  518|       |
  519|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  520|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  521|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  522|       |
  523|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  524|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  525|       |
  526|      0|            const phi::f64 new_value = lhs_value - rhs_value;
  527|       |
  528|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  529|      0|        }
  530|       |
  531|       |        void MULT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  532|       |                  const InstructionArg& arg3) noexcept
  533|      0|        {
  534|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  535|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  536|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  537|       |
  538|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  539|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  540|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  541|       |
  542|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  543|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  544|       |
  545|      0|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  546|      0|        }
  547|       |
  548|       |        void MULTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  549|       |                   const InstructionArg& arg3) noexcept
  550|      0|        {
  551|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  552|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  553|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  554|       |
  555|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  556|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  557|      0|            const auto& imm_value = arg3.AsImmediateValue();
  558|       |
  559|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  560|       |
  561|      0|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  562|      0|        }
  563|       |
  564|       |        void MULTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  565|       |                   const InstructionArg& arg3) noexcept
  566|      0|        {
  567|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  568|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  569|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  570|       |
  571|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  572|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  573|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  574|       |
  575|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  576|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  577|       |
  578|      0|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  579|      0|        }
  580|       |
  581|       |        void MULTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  582|       |                    const InstructionArg& arg3) noexcept
  583|      0|        {
  584|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  585|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  586|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  587|       |
  588|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  589|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  590|      0|            const auto& imm_value = arg3.AsImmediateValue();
  591|       |
  592|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  593|       |
  594|      0|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  595|      0|        }
  596|       |
  597|       |        void MULTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  598|       |                   const InstructionArg& arg3) noexcept
  599|      0|        {
  600|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  601|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  602|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  603|       |
  604|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  605|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  606|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  607|       |
  608|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  609|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  610|       |
  611|      0|            const phi::f32 new_value = lhs_value * rhs_value;
  612|       |
  613|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  614|      0|        }
  615|       |
  616|       |        void MULTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  617|       |                   const InstructionArg& arg3) noexcept
  618|      0|        {
  619|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  620|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  621|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  622|       |
  623|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  624|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  625|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  626|       |
  627|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  628|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  629|       |
  630|      0|            const phi::f64 new_value = lhs_value * rhs_value;
  631|       |
  632|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  633|      0|        }
  634|       |
  635|       |        void DIV(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  636|       |                 const InstructionArg& arg3) noexcept
  637|      0|        {
  638|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  639|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  640|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  641|       |
  642|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  643|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  644|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  645|       |
  646|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  647|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  648|       |
  649|      0|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  650|      0|        }
  651|       |
  652|       |        void DIVI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  653|       |                  const InstructionArg& arg3) noexcept
  654|      0|        {
  655|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  656|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  657|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  658|       |
  659|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  660|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  661|      0|            const auto& imm_value = arg3.AsImmediateValue();
  662|       |
  663|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  664|       |
  665|      0|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  666|      0|        }
  667|       |
  668|       |        void DIVU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  669|       |                  const InstructionArg& arg3) noexcept
  670|      0|        {
  671|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  672|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  673|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  674|       |
  675|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  676|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  677|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  678|       |
  679|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  680|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  681|       |
  682|      0|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  683|      0|        }
  684|       |
  685|       |        void DIVUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  686|       |                   const InstructionArg& arg3) noexcept
  687|      0|        {
  688|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  689|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  690|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  691|       |
  692|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  693|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  694|      0|            const auto& imm_value = arg3.AsImmediateValue();
  695|       |
  696|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  697|       |
  698|      0|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  699|      0|        }
  700|       |
  701|       |        void DIVF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  702|       |                  const InstructionArg& arg3) noexcept
  703|      0|        {
  704|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  705|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  706|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  707|       |
  708|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  709|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  710|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  711|       |
  712|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  713|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  714|       |
  715|      0|            if (rhs_value.get() == 0.0f)
  716|      0|            {
  717|      0|                processor.Raise(Exception::DivideByZero);
  718|      0|                return;
  719|      0|            }
  720|       |
  721|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  722|       |
  723|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  724|      0|        }
  725|       |
  726|       |        void DIVD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  727|       |                  const InstructionArg& arg3) noexcept
  728|      0|        {
  729|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  730|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  731|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  732|       |
  733|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  734|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  735|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  736|       |
  737|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  738|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  739|       |
  740|      0|            if (rhs_value.get() == 0.0)
  741|      0|            {
  742|      0|                processor.Raise(Exception::DivideByZero);
  743|      0|                return;
  744|      0|            }
  745|       |
  746|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  747|       |
  748|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  749|      0|        }
  750|       |
  751|       |        void SLL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  752|       |                 const InstructionArg& arg3) noexcept
  753|      0|        {
  754|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  755|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  756|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  757|       |
  758|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  759|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  760|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  761|       |
  762|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  763|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  764|       |
  765|      0|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  766|      0|        }
  767|       |
  768|       |        void SLLI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  769|       |                  const InstructionArg& arg3) noexcept
  770|      0|        {
  771|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  772|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  773|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  774|       |
  775|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  776|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  777|      0|            const auto& imm_value = arg3.AsImmediateValue();
  778|       |
  779|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  780|      0|            phi::i32 shift_value = imm_value.signed_value;
  781|       |
  782|      0|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  783|      0|        }
  784|       |
  785|       |        void SRL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  786|       |                 const InstructionArg& arg3) noexcept
  787|      0|        {
  788|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  789|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  790|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  791|       |
  792|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  793|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  794|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  795|       |
  796|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  797|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  798|       |
  799|      0|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  800|      0|        }
  801|       |
  802|       |        void SRLI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  803|       |                  const InstructionArg& arg3) noexcept
  804|      0|        {
  805|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  806|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  807|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  808|       |
  809|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  810|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  811|      0|            const auto& imm_value = arg3.AsImmediateValue();
  812|       |
  813|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  814|      0|            phi::i32 shift_value = imm_value.signed_value;
  815|       |
  816|      0|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  817|      0|        }
  818|       |
  819|       |        void SLA(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  820|       |                 const InstructionArg& arg3) noexcept
  821|      0|        {
  822|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  823|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  824|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  825|       |
  826|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  827|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  828|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  829|       |
  830|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  831|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  832|       |
  833|      0|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  834|      0|        }
  835|       |
  836|       |        void SLAI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  837|       |                  const InstructionArg& arg3) noexcept
  838|      0|        {
  839|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  840|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  841|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  842|       |
  843|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  844|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  845|      0|            const auto& imm_value = arg3.AsImmediateValue();
  846|       |
  847|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  848|      0|            phi::i32 shift_value = imm_value.signed_value;
  849|       |
  850|      0|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  851|      0|        }
  852|       |
  853|       |        void SRA(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  854|       |                 const InstructionArg& arg3) noexcept
  855|      0|        {
  856|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  857|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  858|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  859|       |
  860|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  861|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  862|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  863|       |
  864|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  865|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  866|       |
  867|      0|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  868|      0|        }
  869|       |
  870|       |        void SRAI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  871|       |                  const InstructionArg& arg3) noexcept
  872|      0|        {
  873|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  874|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  875|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  876|       |
  877|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  878|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  879|      0|            const auto& imm_value = arg3.AsImmediateValue();
  880|       |
  881|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  882|      0|            phi::i32 shift_value = imm_value.signed_value;
  883|       |
  884|      0|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  885|      0|        }
  886|       |
  887|       |        void AND(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  888|       |                 const InstructionArg& arg3) noexcept
  889|      0|        {
  890|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  891|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  892|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  893|       |
  894|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  895|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  896|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  897|       |
  898|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  899|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  900|      0|            phi::i32 new_value = lhs_value.get() & rhs_value.get();
  901|       |
  902|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  903|      0|        }
  904|       |
  905|       |        void ANDI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  906|       |                  const InstructionArg& arg3) noexcept
  907|      0|        {
  908|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  909|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  910|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  911|       |
  912|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  913|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  914|      0|            const auto& imm_value = arg3.AsImmediateValue();
  915|       |
  916|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  917|      0|            phi::i32 new_value = src_value.get() & imm_value.signed_value.get();
  918|       |
  919|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  920|      0|        }
  921|       |
  922|       |        void OR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  923|       |                const InstructionArg& arg3) noexcept
  924|      0|        {
  925|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  926|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  927|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  928|       |
  929|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  930|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  931|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  932|       |
  933|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  934|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  935|      0|            phi::i32 new_value = lhs_value.get() | rhs_value.get();
  936|       |
  937|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  938|      0|        }
  939|       |
  940|       |        void ORI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  941|       |                 const InstructionArg& arg3) noexcept
  942|      0|        {
  943|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  944|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  945|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  946|       |
  947|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  948|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  949|      0|            const auto& imm_value = arg3.AsImmediateValue();
  950|       |
  951|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  952|      0|            phi::i32 new_value = src_value.get() | imm_value.signed_value.get();
  953|       |
  954|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  955|      0|        }
  956|       |
  957|       |        void XOR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  958|       |                 const InstructionArg& arg3) noexcept
  959|      0|        {
  960|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  961|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  962|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  963|       |
  964|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  965|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  966|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  967|       |
  968|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  969|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  970|      0|            phi::i32 new_value = lhs_value.get() ^ rhs_value.get();
  971|       |
  972|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  973|      0|        }
  974|       |
  975|       |        void XORI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  976|       |                  const InstructionArg& arg3) noexcept
  977|      0|        {
  978|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  979|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  980|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  981|       |
  982|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  983|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  984|      0|            const auto& imm_value = arg3.AsImmediateValue();
  985|       |
  986|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  987|      0|            phi::i32 new_value = src_value.get() ^ imm_value.signed_value.get();
  988|       |
  989|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  990|      0|        }
  991|       |
  992|       |        void SLT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  993|       |                 const InstructionArg& arg3) noexcept
  994|      0|        {
  995|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  996|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  997|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  998|       |
  999|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1000|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1001|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1002|       |
 1003|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1004|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1005|       |
 1006|      0|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
 1007|       |
 1008|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1009|      0|        }
 1010|       |
 1011|       |        void SLTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1012|       |                  const InstructionArg& arg3) noexcept
 1013|      0|        {
 1014|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1015|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1016|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1017|       |
 1018|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1019|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1020|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1021|       |
 1022|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1023|       |
 1024|      0|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
 1025|       |
 1026|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1027|      0|        }
 1028|       |
 1029|       |        void SLTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1030|       |                  const InstructionArg& arg3) noexcept
 1031|      0|        {
 1032|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1033|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1034|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1035|       |
 1036|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1037|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1038|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1039|       |
 1040|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1041|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1042|       |
 1043|      0|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
 1044|       |
 1045|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1046|      0|        }
 1047|       |
 1048|       |        void SLTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1049|       |                   const InstructionArg& arg3) noexcept
 1050|      0|        {
 1051|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1052|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1053|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1054|       |
 1055|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1056|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1057|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1058|       |
 1059|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1060|       |
 1061|      0|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
 1062|       |
 1063|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1064|      0|        }
 1065|       |
 1066|       |        void LTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1067|       |                 const InstructionArg& arg3) noexcept
 1068|      0|        {
 1069|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1070|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1071|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1072|       |
 1073|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1074|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1075|       |
 1076|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1077|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1078|       |
 1079|      0|            const phi::Boolean new_value = (lhs_value < rhs_value);
 1080|       |
 1081|      0|            processor.SetFPSRValue(new_value);
 1082|      0|        }
 1083|       |
 1084|       |        void LTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1085|       |                 const InstructionArg& arg3) noexcept
 1086|      0|        {
 1087|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1088|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1089|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1090|       |
 1091|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1092|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1093|       |
 1094|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1095|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1096|       |
 1097|      0|            const phi::Boolean new_value = (lhs_value < rhs_value);
 1098|       |
 1099|      0|            processor.SetFPSRValue(new_value);
 1100|      0|        }
 1101|       |
 1102|       |        void SGT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1103|       |                 const InstructionArg& arg3) noexcept
 1104|      0|        {
 1105|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1106|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1107|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1108|       |
 1109|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1110|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1111|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1112|       |
 1113|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1114|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1115|       |
 1116|      0|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
 1117|       |
 1118|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1119|      0|        }
 1120|       |
 1121|       |        void SGTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1122|       |                  const InstructionArg& arg3) noexcept
 1123|      0|        {
 1124|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1125|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1126|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1127|       |
 1128|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1129|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1130|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1131|       |
 1132|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1133|       |
 1134|      0|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
 1135|       |
 1136|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|      0|        }
 1138|       |
 1139|       |        void SGTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1140|       |                  const InstructionArg& arg3) noexcept
 1141|      0|        {
 1142|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1143|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1144|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1145|       |
 1146|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1147|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1148|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1149|       |
 1150|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1151|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1152|       |
 1153|      0|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
 1154|       |
 1155|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1156|      0|        }
 1157|       |
 1158|       |        void SGTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1159|       |                   const InstructionArg& arg3) noexcept
 1160|      0|        {
 1161|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1162|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1163|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1164|       |
 1165|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1166|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1167|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1168|       |
 1169|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1170|       |
 1171|      0|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
 1172|       |
 1173|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1174|      0|        }
 1175|       |
 1176|       |        void GTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1177|       |                 const InstructionArg& arg3) noexcept
 1178|      0|        {
 1179|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1180|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1181|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1182|       |
 1183|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1184|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1185|       |
 1186|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1187|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1188|       |
 1189|      0|            const phi::Boolean new_value = (lhs_value > rhs_value);
 1190|       |
 1191|      0|            processor.SetFPSRValue(new_value);
 1192|      0|        }
 1193|       |
 1194|       |        void GTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1195|       |                 const InstructionArg& arg3) noexcept
 1196|      0|        {
 1197|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1198|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1199|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1200|       |
 1201|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1202|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1203|       |
 1204|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1205|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1206|       |
 1207|      0|            const phi::Boolean new_value = (lhs_value > rhs_value);
 1208|       |
 1209|      0|            processor.SetFPSRValue(new_value);
 1210|      0|        }
 1211|       |
 1212|       |        void SLE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1213|       |                 const InstructionArg& arg3) noexcept
 1214|      0|        {
 1215|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1216|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1217|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1218|       |
 1219|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1220|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1221|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1222|       |
 1223|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1224|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1225|       |
 1226|      0|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
 1227|       |
 1228|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1229|      0|        }
 1230|       |
 1231|       |        void SLEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1232|       |                  const InstructionArg& arg3) noexcept
 1233|      0|        {
 1234|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1235|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1236|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1237|       |
 1238|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1239|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1240|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1241|       |
 1242|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1243|       |
 1244|      0|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
 1245|       |
 1246|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1247|      0|        }
 1248|       |
 1249|       |        void SLEU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1250|       |                  const InstructionArg& arg3) noexcept
 1251|      0|        {
 1252|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1253|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1254|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1255|       |
 1256|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1257|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1258|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1259|       |
 1260|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1261|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1262|       |
 1263|      0|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
 1264|       |
 1265|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1266|      0|        }
 1267|       |
 1268|       |        void SLEUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1269|       |                   const InstructionArg& arg3) noexcept
 1270|      0|        {
 1271|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1272|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1273|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1274|       |
 1275|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1276|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1277|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1278|       |
 1279|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1280|       |
 1281|      0|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
 1282|       |
 1283|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1284|      0|        }
 1285|       |
 1286|       |        void LEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1287|       |                 const InstructionArg& arg3) noexcept
 1288|      0|        {
 1289|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1290|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1291|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1292|       |
 1293|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1294|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1295|       |
 1296|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1297|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1298|       |
 1299|      0|            const phi::Boolean new_value = (lhs_value <= rhs_value);
 1300|       |
 1301|      0|            processor.SetFPSRValue(new_value);
 1302|      0|        }
 1303|       |
 1304|       |        void LED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1305|       |                 const InstructionArg& arg3) noexcept
 1306|      0|        {
 1307|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1308|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1309|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1310|       |
 1311|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1312|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1313|       |
 1314|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1315|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1316|       |
 1317|      0|            const phi::Boolean new_value = (lhs_value <= rhs_value);
 1318|       |
 1319|      0|            processor.SetFPSRValue(new_value);
 1320|      0|        }
 1321|       |
 1322|       |        void SGE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1323|       |                 const InstructionArg& arg3) noexcept
 1324|      0|        {
 1325|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1326|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1327|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1328|       |
 1329|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1330|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1331|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1332|       |
 1333|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1334|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1335|       |
 1336|      0|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
 1337|       |
 1338|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1339|      0|        }
 1340|       |
 1341|       |        void SGEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1342|       |                  const InstructionArg& arg3) noexcept
 1343|      0|        {
 1344|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1345|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1346|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1347|       |
 1348|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1349|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1350|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1351|       |
 1352|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1353|       |
 1354|      0|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
 1355|       |
 1356|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1357|      0|        }
 1358|       |
 1359|       |        void SGEU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1360|       |                  const InstructionArg& arg3) noexcept
 1361|      0|        {
 1362|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1363|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1364|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1365|       |
 1366|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1367|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1368|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1369|       |
 1370|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1371|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1372|       |
 1373|      0|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
 1374|       |
 1375|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1376|      0|        }
 1377|       |
 1378|       |        void SGEUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1379|       |                   const InstructionArg& arg3) noexcept
 1380|      0|        {
 1381|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1382|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1383|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1384|       |
 1385|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1386|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1387|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1388|       |
 1389|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1390|       |
 1391|      0|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
 1392|       |
 1393|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1394|      0|        }
 1395|       |
 1396|       |        void GEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1397|       |                 const InstructionArg& arg3) noexcept
 1398|      0|        {
 1399|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1400|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1401|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1402|       |
 1403|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1404|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1405|       |
 1406|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1407|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1408|       |
 1409|      0|            const phi::Boolean new_value = (lhs_value >= rhs_value);
 1410|       |
 1411|      0|            processor.SetFPSRValue(new_value);
 1412|      0|        }
 1413|       |
 1414|       |        void GED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1415|       |                 const InstructionArg& arg3) noexcept
 1416|      0|        {
 1417|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1418|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1419|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1420|       |
 1421|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1422|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1423|       |
 1424|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1425|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1426|       |
 1427|      0|            const phi::Boolean new_value = (lhs_value >= rhs_value);
 1428|       |
 1429|      0|            processor.SetFPSRValue(new_value);
 1430|      0|        }
 1431|       |
 1432|       |        void SEQ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1433|       |                 const InstructionArg& arg3) noexcept
 1434|      0|        {
 1435|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1436|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1437|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1438|       |
 1439|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1440|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1441|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1442|       |
 1443|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1444|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1445|       |
 1446|      0|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
 1447|       |
 1448|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1449|      0|        }
 1450|       |
 1451|       |        void SEQI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1452|       |                  const InstructionArg& arg3) noexcept
 1453|      0|        {
 1454|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1455|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1456|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1457|       |
 1458|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1459|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1460|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1461|       |
 1462|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1463|       |
 1464|      0|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
 1465|       |
 1466|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1467|      0|        }
 1468|       |
 1469|       |        void SEQU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1470|       |                  const InstructionArg& arg3) noexcept
 1471|      0|        {
 1472|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1473|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1474|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1475|       |
 1476|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1477|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1478|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1479|       |
 1480|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1481|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1482|       |
 1483|      0|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
 1484|       |
 1485|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1486|      0|        }
 1487|       |
 1488|       |        void SEQUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1489|       |                   const InstructionArg& arg3) noexcept
 1490|      0|        {
 1491|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1492|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1493|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1494|       |
 1495|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1496|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1497|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1498|       |
 1499|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1500|       |
 1501|      0|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
 1502|       |
 1503|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1504|      0|        }
 1505|       |
 1506|       |        void EQF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1507|       |                 const InstructionArg& arg3) noexcept
 1508|      0|        {
 1509|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1510|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1511|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1512|       |
 1513|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1514|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1515|       |
 1516|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1517|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1518|       |
 1519|      0|            const phi::Boolean new_value = (lhs_value.get() == rhs_value.get());
 1520|       |
 1521|      0|            processor.SetFPSRValue(new_value);
 1522|      0|        }
 1523|       |
 1524|       |        void EQD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1525|       |                 const InstructionArg& arg3) noexcept
 1526|      0|        {
 1527|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1528|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1529|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1530|       |
 1531|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1532|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1533|       |
 1534|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1535|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1536|       |
 1537|      0|            const phi::Boolean new_value = (lhs_value.get() == rhs_value.get());
 1538|       |
 1539|      0|            processor.SetFPSRValue(new_value);
 1540|      0|        }
 1541|       |
 1542|       |        void SNE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1543|       |                 const InstructionArg& arg3) noexcept
 1544|      0|        {
 1545|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1546|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1547|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1548|       |
 1549|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1550|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1551|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1552|       |
 1553|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1554|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1555|       |
 1556|      0|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
 1557|       |
 1558|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1559|      0|        }
 1560|       |
 1561|       |        void SNEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1562|       |                  const InstructionArg& arg3) noexcept
 1563|      0|        {
 1564|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1565|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1566|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1567|       |
 1568|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1569|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1570|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1571|       |
 1572|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1573|       |
 1574|      0|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
 1575|       |
 1576|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1577|      0|        }
 1578|       |
 1579|       |        void SNEU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1580|       |                  const InstructionArg& arg3) noexcept
 1581|      0|        {
 1582|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1583|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1584|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1585|       |
 1586|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1587|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1588|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1589|       |
 1590|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1591|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1592|       |
 1593|      0|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
 1594|       |
 1595|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1596|      0|        }
 1597|       |
 1598|       |        void SNEUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1599|       |                   const InstructionArg& arg3) noexcept
 1600|      0|        {
 1601|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1602|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1603|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1604|       |
 1605|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1606|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1607|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1608|       |
 1609|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1610|       |
 1611|      0|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
 1612|       |
 1613|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1614|      0|        }
 1615|       |
 1616|       |        void NEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1617|       |                 const InstructionArg& arg3) noexcept
 1618|      0|        {
 1619|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1620|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1621|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1622|       |
 1623|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1624|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1625|       |
 1626|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1627|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1628|       |
 1629|      0|            const phi::Boolean new_value = (lhs_value.get() != rhs_value.get());
 1630|       |
 1631|      0|            processor.SetFPSRValue(new_value);
 1632|      0|        }
 1633|       |
 1634|       |        void NED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1635|       |                 const InstructionArg& arg3) noexcept
 1636|      0|        {
 1637|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1638|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1639|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1640|       |
 1641|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1642|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1643|       |
 1644|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1645|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1646|       |
 1647|      0|            const phi::Boolean new_value = (lhs_value.get() != rhs_value.get());
 1648|       |
 1649|      0|            processor.SetFPSRValue(new_value);
 1650|      0|        }
 1651|       |
 1652|       |        void BEQZ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1653|       |                  const InstructionArg& arg3) noexcept
 1654|      0|        {
 1655|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1656|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1657|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1658|       |
 1659|      0|            const auto& test_reg   = arg1.AsRegisterInt();
 1660|      0|            const auto& jump_label = arg2.AsLabel();
 1661|       |
 1662|      0|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1663|       |
 1664|      0|            if (test_value == 0)
 1665|      0|            {
 1666|      0|                JumpToLabel(processor, jump_label.label_name);
 1667|      0|            }
 1668|      0|        }
 1669|       |
 1670|       |        void BNEZ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1671|       |                  const InstructionArg& arg3) noexcept
 1672|      0|        {
 1673|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1674|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1675|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1676|       |
 1677|      0|            const auto& test_reg   = arg1.AsRegisterInt();
 1678|      0|            const auto& jump_label = arg2.AsLabel();
 1679|       |
 1680|      0|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1681|       |
 1682|      0|            if (test_value != 0)
 1683|      0|            {
 1684|      0|                JumpToLabel(processor, jump_label.label_name);
 1685|      0|            }
 1686|      0|        }
 1687|       |
 1688|       |        void BFPT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1689|       |                  const InstructionArg& arg3) noexcept
 1690|      0|        {
 1691|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1692|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1693|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1694|       |
 1695|      0|            const auto& jump_label = arg1.AsLabel();
 1696|       |
 1697|      0|            phi::Boolean test_value = processor.GetFPSRValue();
 1698|       |
 1699|      0|            if (test_value)
 1700|      0|            {
 1701|      0|                JumpToLabel(processor, jump_label.label_name);
 1702|      0|            }
 1703|      0|        }
 1704|       |
 1705|       |        void BFPF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1706|       |                  const InstructionArg& arg3) noexcept
 1707|      0|        {
 1708|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1709|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1710|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1711|       |
 1712|      0|            const auto& jump_label = arg1.AsLabel();
 1713|       |
 1714|      0|            phi::Boolean test_value = processor.GetFPSRValue();
 1715|       |
 1716|      0|            if (!test_value)
 1717|      0|            {
 1718|      0|                JumpToLabel(processor, jump_label.label_name);
 1719|      0|            }
 1720|      0|        }
 1721|       |
 1722|       |        void J(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1723|       |               const InstructionArg& arg3) noexcept
 1724|      0|        {
 1725|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1726|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1727|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1728|       |
 1729|      0|            const auto& jump_label = arg1.AsLabel();
 1730|       |
 1731|      0|            JumpToLabel(processor, jump_label.label_name);
 1732|      0|        }
 1733|       |
 1734|       |        void JR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1735|       |                const InstructionArg& arg3) noexcept
 1736|      0|        {
 1737|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1738|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1739|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1740|       |
 1741|      0|            const auto& jump_register = arg1.AsRegisterInt();
 1742|       |
 1743|      0|            JumpToRegister(processor, jump_register.register_id);
 1744|      0|        }
 1745|       |
 1746|       |        void JAL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1747|       |                 const InstructionArg& arg3) noexcept
 1748|      0|        {
 1749|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1750|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1751|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1752|       |
 1753|      0|            const auto& jump_label = arg1.AsLabel();
 1754|       |
 1755|      0|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1756|      0|                                                  processor.GetNextProgramCounter());
 1757|       |
 1758|      0|            JumpToLabel(processor, jump_label.label_name);
 1759|      0|        }
 1760|       |
 1761|       |        void JALR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1762|       |                  const InstructionArg& arg3) noexcept
 1763|      0|        {
 1764|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1765|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1766|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1767|       |
 1768|      0|            const auto& jump_register = arg1.AsRegisterInt();
 1769|       |
 1770|      0|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1771|      0|                                                  processor.GetNextProgramCounter());
 1772|       |
 1773|      0|            JumpToRegister(processor, jump_register.register_id);
 1774|      0|        }
 1775|       |
 1776|       |        void LHI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1777|       |                 const InstructionArg& arg3) noexcept
 1778|      0|        {
 1779|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1780|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::ImmediateInteger);
 1781|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1782|       |
 1783|      0|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1784|      0|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.get();
 1785|       |
 1786|      0|            imm_value = (imm_value << 16) & 0xFFFF0000;
 1787|       |
 1788|      0|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1789|      0|        }
 1790|       |
 1791|       |        void LB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1792|       |                const InstructionArg& arg3) noexcept
 1793|      0|        {
 1794|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1795|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1796|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1797|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1798|       |
 1799|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1800|       |
 1801|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1802|       |
 1803|      0|            if (!optional_address.has_value())
 1804|      0|            {
 1805|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1806|      0|                return;
 1807|      0|            }
 1808|       |
 1809|      0|            phi::i32 address = optional_address.value();
 1810|       |
 1811|      0|            auto optional_value =
 1812|      0|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.get()));
 1813|       |
 1814|      0|            if (!optional_value.has_value())
 1815|      0|            {
 1816|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1817|      0|                PHI_LOG_ERROR("Failed to load byte at address {}", address.get());
 1818|      0|                return;
 1819|      0|            }
 1820|       |
 1821|      0|            phi::i32 value = optional_value.value();
 1822|       |
 1823|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1824|      0|        }
 1825|       |
 1826|       |        void LBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1827|       |                 const InstructionArg& arg3) noexcept
 1828|      0|        {
 1829|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1830|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1831|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1832|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1833|       |
 1834|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1835|       |
 1836|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1837|       |
 1838|      0|            if (!optional_address.has_value())
 1839|      0|            {
 1840|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1841|      0|                return;
 1842|      0|            }
 1843|       |
 1844|      0|            phi::i32 address = optional_address.value();
 1845|       |
 1846|      0|            auto optional_value =
 1847|      0|                    processor.GetMemory().LoadUnsignedByte(static_cast<std::size_t>(address.get()));
 1848|       |
 1849|      0|            if (!optional_value.has_value())
 1850|      0|            {
 1851|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1852|      0|                PHI_LOG_ERROR("Failed to load unsigned byte at address {}", address.get());
 1853|      0|                return;
 1854|      0|            }
 1855|       |
 1856|      0|            phi::i32 value = optional_value.value();
 1857|       |
 1858|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1859|      0|        }
 1860|       |
 1861|       |        void LH(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1862|       |                const InstructionArg& arg3) noexcept
 1863|      0|        {
 1864|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1865|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1866|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1867|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1868|       |
 1869|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1870|       |
 1871|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1872|       |
 1873|      0|            if (!optional_address.has_value())
 1874|      0|            {
 1875|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1876|      0|                return;
 1877|      0|            }
 1878|       |
 1879|      0|            phi::i32 address = optional_address.value();
 1880|       |
 1881|      0|            auto optional_value =
 1882|      0|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.get()));
 1883|       |
 1884|      0|            if (!optional_value.has_value())
 1885|      0|            {
 1886|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1887|      0|                PHI_LOG_ERROR("Failed to load half byte at address {}", address.get());
 1888|      0|                return;
 1889|      0|            }
 1890|       |
 1891|      0|            phi::i32 value = optional_value.value();
 1892|       |
 1893|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1894|      0|        }
 1895|       |
 1896|       |        void LHU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1897|       |                 const InstructionArg& arg3) noexcept
 1898|      0|        {
 1899|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1900|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1901|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1902|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1903|       |
 1904|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1905|       |
 1906|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1907|       |
 1908|      0|            if (!optional_address.has_value())
 1909|      0|            {
 1910|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1911|      0|                return;
 1912|      0|            }
 1913|       |
 1914|      0|            phi::i32 address = optional_address.value();
 1915|       |
 1916|      0|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1917|      0|                    static_cast<std::size_t>(address.get()));
 1918|       |
 1919|      0|            if (!optional_value.has_value())
 1920|      0|            {
 1921|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1922|      0|                PHI_LOG_ERROR("Failed to load unsigned half byte at address {}", address.get());
 1923|      0|                return;
 1924|      0|            }
 1925|       |
 1926|      0|            phi::i32 value = optional_value.value();
 1927|       |
 1928|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1929|      0|        }
 1930|       |
 1931|       |        void LW(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1932|       |                const InstructionArg& arg3) noexcept
 1933|      0|        {
 1934|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1935|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1936|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1937|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1938|       |
 1939|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1940|       |
 1941|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1942|       |
 1943|      0|            if (!optional_address.has_value())
 1944|      0|            {
 1945|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1946|      0|                return;
 1947|      0|            }
 1948|       |
 1949|      0|            phi::i32 address = optional_address.value();
 1950|       |
 1951|      0|            auto optional_value =
 1952|      0|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.get()));
 1953|       |
 1954|      0|            if (!optional_value.has_value())
 1955|      0|            {
 1956|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1957|      0|                PHI_LOG_ERROR("Failed to load word at address {}", address.get());
 1958|      0|                return;
 1959|      0|            }
 1960|       |
 1961|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1962|      0|        }
 1963|       |
 1964|       |        void LWU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1965|       |                 const InstructionArg& arg3) noexcept
 1966|      0|        {
 1967|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1968|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1969|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1970|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1971|       |
 1972|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1973|       |
 1974|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1975|       |
 1976|      0|            if (!optional_address.has_value())
 1977|      0|            {
 1978|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1979|      0|                return;
 1980|      0|            }
 1981|       |
 1982|      0|            phi::i32 address = optional_address.value();
 1983|       |
 1984|      0|            auto optional_value =
 1985|      0|                    processor.GetMemory().LoadUnsignedWord(static_cast<std::size_t>(address.get()));
 1986|       |
 1987|      0|            if (!optional_value.has_value())
 1988|      0|            {
 1989|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1990|      0|                PHI_LOG_ERROR("Failed to load unsigned word at address {}", address.get());
 1991|      0|                return;
 1992|      0|            }
 1993|       |
 1994|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1995|      0|        }
 1996|       |
 1997|       |        void LF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1998|       |                const InstructionArg& arg3) noexcept
 1999|      0|        {
 2000|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2001|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 2002|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 2003|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2004|       |
 2005|      0|            const auto& dest_reg = arg1.AsRegisterFloat();
 2006|       |
 2007|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 2008|       |
 2009|      0|            if (!optional_address.has_value())
 2010|      0|            {
 2011|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2012|      0|                return;
 2013|      0|            }
 2014|       |
 2015|      0|            phi::i32 address = optional_address.value();
 2016|       |
 2017|      0|            auto optional_value =
 2018|      0|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.get()));
 2019|       |
 2020|      0|            if (!optional_value.has_value())
 2021|      0|            {
 2022|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2023|      0|                PHI_LOG_ERROR("Failed to load float at address {}", address.get());
 2024|      0|                return;
 2025|      0|            }
 2026|       |
 2027|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 2028|      0|        }
 2029|       |
 2030|       |        void LD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2031|       |                const InstructionArg& arg3) noexcept
 2032|      0|        {
 2033|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2034|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 2035|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 2036|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2037|       |
 2038|      0|            const auto& dest_reg = arg1.AsRegisterFloat();
 2039|       |
 2040|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 2041|       |
 2042|      0|            if (!optional_address.has_value())
 2043|      0|            {
 2044|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2045|      0|                return;
 2046|      0|            }
 2047|       |
 2048|      0|            phi::i32 address = optional_address.value();
 2049|       |
 2050|      0|            auto optional_value =
 2051|      0|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.get()));
 2052|       |
 2053|      0|            if (!optional_value.has_value())
 2054|      0|            {
 2055|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2056|      0|                PHI_LOG_ERROR("Failed to load double at address {}", address.get());
 2057|      0|                return;
 2058|      0|            }
 2059|       |
 2060|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 2061|      0|        }
 2062|       |
 2063|       |        void SB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2064|       |                const InstructionArg& arg3) noexcept
 2065|      0|        {
 2066|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2067|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2068|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2069|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2070|       |
 2071|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2072|       |
 2073|      0|            if (!optional_address.has_value())
 2074|      0|            {
 2075|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2076|      0|                return;
 2077|      0|            }
 2078|       |
 2079|      0|            phi::i32 address = optional_address.value();
 2080|       |
 2081|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2082|       |
 2083|      0|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 2084|       |
 2085|      0|            phi::Boolean success = processor.GetMemory().StoreByte(
 2086|      0|                    static_cast<std::size_t>(address.get()), static_cast<std::int8_t>(value.get()));
 2087|       |
 2088|      0|            if (!success)
 2089|      0|            {
 2090|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2091|      0|                PHI_LOG_ERROR("Failed to store byte at address {}", address.get());
 2092|      0|            }
 2093|      0|        }
 2094|       |
 2095|       |        void SBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2096|       |                 const InstructionArg& arg3) noexcept
 2097|      0|        {
 2098|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2099|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2100|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2101|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2102|       |
 2103|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2104|       |
 2105|      0|            if (!optional_address.has_value())
 2106|      0|            {
 2107|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2108|      0|                return;
 2109|      0|            }
 2110|       |
 2111|      0|            phi::i32 address = optional_address.value();
 2112|       |
 2113|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2114|       |
 2115|      0|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2116|       |
 2117|      0|            phi::Boolean success =
 2118|      0|                    processor.GetMemory().StoreUnsignedByte(static_cast<std::size_t>(address.get()),
 2119|      0|                                                            static_cast<std::uint8_t>(value.get()));
 2120|       |
 2121|      0|            if (!success)
 2122|      0|            {
 2123|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2124|      0|                PHI_LOG_ERROR("Failed to store unsigned byte at address {}", address.get());
 2125|      0|            }
 2126|      0|        }
 2127|       |
 2128|       |        void SH(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2129|       |                const InstructionArg& arg3) noexcept
 2130|      0|        {
 2131|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2132|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2133|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2134|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2135|       |
 2136|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2137|       |
 2138|      0|            if (!optional_address.has_value())
 2139|      0|            {
 2140|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2141|      0|                return;
 2142|      0|            }
 2143|       |
 2144|      0|            phi::i32 address = optional_address.value();
 2145|       |
 2146|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2147|       |
 2148|      0|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 2149|       |
 2150|      0|            phi::Boolean success =
 2151|      0|                    processor.GetMemory().StoreHalfWord(static_cast<std::size_t>(address.get()),
 2152|      0|                                                        static_cast<std::int16_t>(value.get()));
 2153|       |
 2154|      0|            if (!success)
 2155|      0|            {
 2156|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2157|      0|                PHI_LOG_ERROR("Failed to store half word at address {}", address.get());
 2158|      0|            }
 2159|      0|        }
 2160|       |
 2161|       |        void SHU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2162|       |                 const InstructionArg& arg3) noexcept
 2163|      0|        {
 2164|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2165|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2166|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2167|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2168|       |
 2169|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2170|       |
 2171|      0|            if (!optional_address.has_value())
 2172|      0|            {
 2173|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2174|      0|                return;
 2175|      0|            }
 2176|       |
 2177|      0|            phi::i32 address = optional_address.value();
 2178|       |
 2179|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2180|       |
 2181|      0|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2182|       |
 2183|      0|            phi::Boolean success = processor.GetMemory().StoreUnsignedHalfWord(
 2184|      0|                    static_cast<std::size_t>(address.get()),
 2185|      0|                    static_cast<std::uint16_t>(value.get()));
 2186|       |
 2187|      0|            if (!success)
 2188|      0|            {
 2189|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2190|      0|                PHI_LOG_ERROR("Failed to store unsigned half word at address {}", address.get());
 2191|      0|            }
 2192|      0|        }
 2193|       |
 2194|       |        void SW(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2195|       |                const InstructionArg& arg3) noexcept
 2196|      0|        {
 2197|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2198|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2199|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2200|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2201|       |
 2202|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2203|       |
 2204|      0|            if (!optional_address.has_value())
 2205|      0|            {
 2206|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2207|      0|                return;
 2208|      0|            }
 2209|       |
 2210|      0|            phi::i32 address = optional_address.value();
 2211|       |
 2212|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2213|       |
 2214|      0|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 2215|       |
 2216|      0|            phi::Boolean success =
 2217|      0|                    processor.GetMemory().StoreWord(static_cast<std::size_t>(address.get()), value);
 2218|       |
 2219|      0|            if (!success)
 2220|      0|            {
 2221|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2222|      0|                PHI_LOG_ERROR("Failed to store word at address {}", address.get());
 2223|      0|            }
 2224|      0|        }
 2225|       |
 2226|       |        void SWU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2227|       |                 const InstructionArg& arg3) noexcept
 2228|      0|        {
 2229|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2230|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2231|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2232|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2233|       |
 2234|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2235|       |
 2236|      0|            if (!optional_address.has_value())
 2237|      0|            {
 2238|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2239|      0|                return;
 2240|      0|            }
 2241|       |
 2242|      0|            phi::i32 address = optional_address.value();
 2243|       |
 2244|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2245|       |
 2246|      0|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2247|       |
 2248|      0|            phi::Boolean success = processor.GetMemory().StoreUnsignedWord(
 2249|      0|                    static_cast<std::size_t>(address.get()), value);
 2250|       |
 2251|      0|            if (!success)
 2252|      0|            {
 2253|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2254|      0|                PHI_LOG_ERROR("Failed to store unsigned word at address {}", address.get());
 2255|      0|            }
 2256|      0|        }
 2257|       |
 2258|       |        void SF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2259|       |                const InstructionArg& arg3) noexcept
 2260|      0|        {
 2261|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2262|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2263|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2264|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2265|       |
 2266|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2267|       |
 2268|      0|            if (!optional_address.has_value())
 2269|      0|            {
 2270|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2271|      0|                return;
 2272|      0|            }
 2273|       |
 2274|      0|            phi::i32 address = optional_address.value();
 2275|       |
 2276|      0|            const auto& src_reg = arg2.AsRegisterFloat();
 2277|       |
 2278|      0|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 2279|       |
 2280|      0|            phi::Boolean success = processor.GetMemory().StoreFloat(
 2281|      0|                    static_cast<std::size_t>(address.get()), value);
 2282|       |
 2283|      0|            if (!success)
 2284|      0|            {
 2285|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2286|      0|                PHI_LOG_ERROR("Failed to store float at address {}", address.get());
 2287|      0|            }
 2288|      0|        }
 2289|       |
 2290|       |        void SD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2291|       |                const InstructionArg& arg3) noexcept
 2292|      0|        {
 2293|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2294|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2295|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2296|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2297|       |
 2298|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2299|       |
 2300|      0|            if (!optional_address.has_value())
 2301|      0|            {
 2302|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2303|      0|                return;
 2304|      0|            }
 2305|       |
 2306|      0|            phi::i32 address = optional_address.value();
 2307|       |
 2308|      0|            const auto& src_reg = arg2.AsRegisterFloat();
 2309|       |
 2310|      0|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 2311|       |
 2312|      0|            phi::Boolean success = processor.GetMemory().StoreDouble(
 2313|      0|                    static_cast<std::size_t>(address.get()), value);
 2314|       |
 2315|      0|            if (!success)
 2316|      0|            {
 2317|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2318|      0|                PHI_LOG_ERROR("Failed to store float at address {}", address.get());
 2319|      0|            }
 2320|      0|        }
 2321|       |
 2322|       |        void MOVF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2323|       |                  const InstructionArg& arg3) noexcept
 2324|      0|        {
 2325|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2326|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2327|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2328|       |
 2329|      0|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 2330|      0|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 2331|       |
 2332|      0|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 2333|       |
 2334|      0|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 2335|      0|        }
 2336|       |
 2337|       |        void MOVD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2338|       |                  const InstructionArg& arg3) noexcept
 2339|      0|        {
 2340|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2341|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2342|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2343|       |
 2344|      0|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 2345|      0|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 2346|       |
 2347|      0|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 2348|       |
 2349|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 2350|      0|        }
 2351|       |
 2352|       |        void MOVFP2I(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2353|       |                     const InstructionArg& arg3) noexcept
 2354|      0|        {
 2355|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 2356|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2357|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2358|       |
 2359|      0|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 2360|      0|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 2361|       |
 2362|      0|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).get();
 2363|       |
 2364|      0|            const std::uint32_t moved_value =
 2365|      0|                    *reinterpret_cast<const std::uint32_t*>(&source_value);
 2366|       |
 2367|      0|            processor.IntRegisterSetUnsignedValue(dest_reg, moved_value);
 2368|      0|        }
 2369|       |
 2370|       |        void MOVI2FP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2371|       |                     const InstructionArg& arg3) noexcept
 2372|      0|        {
 2373|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2374|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2375|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2376|       |
 2377|      0|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 2378|      0|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 2379|       |
 2380|      0|            const std::uint32_t source_value =
 2381|      0|                    processor.IntRegisterGetUnsignedValue(source_reg).get();
 2382|       |
 2383|      0|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 2384|       |
 2385|      0|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 2386|      0|        }
 2387|       |
 2388|       |        void CVTF2D(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2389|       |                    const InstructionArg& arg3) noexcept
 2390|      0|        {
 2391|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2392|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2393|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2394|       |
 2395|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2396|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2397|       |
 2398|      0|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 2399|       |
 2400|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 2401|      0|        }
 2402|       |
 2403|       |        void CVTF2I(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2404|       |                    const InstructionArg& arg3) noexcept
 2405|      0|        {
 2406|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2407|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2408|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2409|       |
 2410|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2411|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2412|       |
 2413|      0|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).get();
 2414|      0|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2415|      0|            const float        converted_value_float =
 2416|      0|                    *reinterpret_cast<const float*>(&converted_value_int);
 2417|       |
 2418|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2419|      0|        }
 2420|       |
 2421|       |        void CVTD2F(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2422|       |                    const InstructionArg& arg3) noexcept
 2423|      0|        {
 2424|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2425|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2426|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2427|       |
 2428|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2429|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2430|       |
 2431|      0|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).get();
 2432|      0|            const float  converted_value = static_cast<float>(src_value);
 2433|       |
 2434|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2435|      0|        }
 2436|       |
 2437|       |        void CVTD2I(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2438|       |                    const InstructionArg& arg3) noexcept
 2439|      0|        {
 2440|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2441|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2442|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2443|       |
 2444|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2445|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2446|       |
 2447|      0|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).get();
 2448|      0|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2449|      0|            const float        converted_value_float =
 2450|      0|                    *reinterpret_cast<const float*>(&converted_value_int);
 2451|       |
 2452|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2453|      0|        }
 2454|       |
 2455|       |        void CVTI2F(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2456|       |                    const InstructionArg& arg3) noexcept
 2457|      0|        {
 2458|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2459|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2460|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2461|       |
 2462|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2463|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2464|       |
 2465|      0|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).get();
 2466|      0|            const std::int32_t converted_value_int =
 2467|      0|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2468|      0|            const float converted_value_float = static_cast<float>(converted_value_int);
 2469|       |
 2470|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2471|      0|        }
 2472|       |
 2473|       |        void CVTI2D(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2474|       |                    const InstructionArg& arg3) noexcept
 2475|      0|        {
 2476|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2477|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2478|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2479|       |
 2480|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2481|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2482|       |
 2483|      0|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).get();
 2484|      0|            const std::int32_t converted_value_int =
 2485|      0|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2486|      0|            const double converted_value_double = static_cast<double>(converted_value_int);
 2487|       |
 2488|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2489|      0|        }
 2490|       |
 2491|       |        void TRAP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2492|       |                  const InstructionArg& arg3) noexcept
 2493|      0|        {
 2494|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::ImmediateInteger);
 2495|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2496|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2497|       |
 2498|      0|            processor.Raise(Exception::Trap);
 2499|      0|        }
 2500|       |
 2501|       |        void HALT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2502|       |                  const InstructionArg& arg3) noexcept
 2503|      0|        {
 2504|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 2505|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2506|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2507|       |
 2508|      0|            processor.Raise(Exception::Halt);
 2509|      0|        }
 2510|       |
 2511|       |        void NOP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2512|       |                 const InstructionArg& arg3) noexcept
 2513|      0|        {
 2514|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 2515|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2516|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2517|       |
 2518|       |            /* Do nothing */
 2519|      0|        }
 2520|       |    } // namespace impl
 2521|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Token.cpp:
    1|       |#include "DLX/Token.hpp"
    2|       |#include "Phi/Core/Assert.hpp"
    3|       |
    4|       |#include <magic_enum.hpp>
    5|       |#include <string>
    6|       |
    7|       |namespace dlx
    8|       |{
    9|       |    Token::Token(Type type, std::string_view text, phi::u64 line_number, phi::u64 column,
   10|       |                 std::uint32_t hint) noexcept
   11|       |        : m_Type{type}
   12|       |        , m_Text{text}
   13|       |        , m_LineNumber{line_number}
   14|       |        , m_Column{column}
   15|       |        , m_Hint{hint}
   16|   252k|    {}
   17|       |
   18|       |    Token::Type Token::GetType() const noexcept
   19|   257k|    {
   20|   257k|        return m_Type;
   21|   257k|    }
   22|       |
   23|       |    std::string_view Token::GetTypeName() const noexcept
   24|  1.34k|    {
   25|  1.34k|        return magic_enum::enum_name(m_Type);
   26|  1.34k|    }
   27|       |
   28|       |    phi::u64 Token::GetLineNumber() const noexcept
   29|      0|    {
   30|      0|        return m_LineNumber;
   31|      0|    }
   32|       |
   33|       |    phi::u64 Token::GetColumn() const noexcept
   34|      0|    {
   35|      0|        return m_Column;
   36|      0|    }
   37|       |
   38|       |    phi::usize Token::GetLength() const noexcept
   39|      0|    {
   40|      0|        return m_Text.length();
   41|      0|    }
   42|       |
   43|       |    std::string_view Token::GetText() const noexcept
   44|   341k|    {
   45|   341k|        return m_Text;
   46|   341k|    }
   47|       |
   48|       |    std::string Token::GetTextString() const noexcept
   49|      0|    {
   50|      0|        return std::string(m_Text.data(), m_Text.length());
   51|      0|    }
   52|       |
   53|       |    std::uint32_t Token::GetHint() const noexcept
   54|  2.55k|    {
   55|  2.55k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   56|  2.55k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode);
   57|       |
   58|  2.55k|        return m_Hint;
   59|  2.55k|    }
   60|       |
   61|       |    std::string Token::DebugInfo() const noexcept
   62|      0|    {
   63|      0|        std::string pos_info = "(" + std::to_string(GetLineNumber().get()) + ":" +
   64|      0|                               std::to_string(GetColumn().get()) + ")";
   65|       |
   66|      0|        switch (m_Type)
   67|      0|        {
   68|      0|            case Type::Colon:
   69|      0|                return "Token[Colon]" + pos_info;
   70|      0|            case Type::Comma:
   71|      0|                return "Token[Comma]" + pos_info;
   72|      0|            case Type::Comment:
   73|      0|                return "Token[Comment]" + pos_info + ": '" + GetTextString() + "'";
   74|      0|            case Type::OpCode:
   75|      0|                return "Token[OpCode]" + pos_info + ": '" + GetTextString() + "'";
   76|      0|            case Type::RegisterInt:
   77|      0|                return "Token[RegisterInt]" + pos_info + ": '" + GetTextString() + "'";
   78|      0|            case Type::RegisterFloat:
   79|      0|                return "Token[RegisterFloat]" + pos_info + ": '" + GetTextString() + "'";
   80|      0|            case Type::RegisterStatus:
   81|      0|                return "Token[RegisterStatus]" + pos_info + ": '" + GetTextString() + "'";
   82|      0|            case Type::LabelIdentifier:
   83|      0|                return "Token[LabelIdentifier]" + pos_info + ": '" + GetTextString() + "'";
   84|      0|            case Type::NewLine:
   85|      0|                return "Token[NewLine]" + pos_info;
   86|      0|            case Type::OpenBracket:
   87|      0|                return "Token[OpenBracket]" + pos_info;
   88|      0|            case Type::ClosingBracket:
   89|      0|                return "Token[ClosingBracket]" + pos_info;
   90|      0|            case Type::IntegerLiteral:
   91|      0|                return "Token[IntegerLiteral]" + pos_info + ": '" + GetTextString() + "'";
   92|      0|            case Type::ImmediateInteger:
   93|      0|                return "Token[ImmediateInteger]" + pos_info + ": " + GetTextString() + "'";
   94|      0|            case Type::Unknown:
   95|      0|                return "Token[Unknown]" + pos_info;
   96|      0|            default:
   97|      0|                PHI_ASSERT_NOT_REACHED();
   98|      0|                return "Token[NotFound]" + pos_info;
   99|      0|        }
  100|      0|    }
  101|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Processor.cpp:
    1|       |#include "DLX/Processor.hpp"
    2|       |
    3|       |#include "DLX/FloatRegister.hpp"
    4|       |#include "DLX/InstructionInfo.hpp"
    5|       |#include "DLX/Parser.hpp"
    6|       |#include "DLX/RegisterNames.hpp"
    7|       |#include "DLX/StatusRegister.hpp"
    8|       |#include "Phi/Core/Log.hpp"
    9|       |#include "Phi/Core/Types.hpp"
   10|       |
   11|       |namespace dlx
   12|       |{
   13|       |    static phi::Boolean RegisterAccessTypeMatches(RegisterAccessType expected_access,
   14|       |                                                  RegisterAccessType access) noexcept
   15|      0|    {
   16|      0|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   17|      0|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   18|       |
   19|      0|        switch (expected_access)
   20|      0|        {
   21|      0|            case RegisterAccessType::Ignored:
   22|      0|                return true;
   23|      0|            case RegisterAccessType::None:
   24|      0|                return false;
   25|      0|            case RegisterAccessType::MixedFloatDouble:
   26|      0|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
   27|      0|            default:
   28|      0|                return expected_access == access;
   29|      0|        }
   30|      0|    }
   31|       |
   32|       |    Processor::Processor() noexcept
   33|       |        : m_MemoryBlock(1000u, 1000u)
   34|      0|    {
   35|       |        // Mark R0 as ready only
   36|      0|        m_IntRegisters.at(0).SetReadOnly(true);
   37|      0|    }
   38|       |
   39|       |    IntRegister& Processor::GetIntRegister(IntRegisterID id) noexcept
   40|      0|    {
   41|      0|        PHI_ASSERT(id != IntRegisterID::None);
   42|      0|        std::underlying_type_t<IntRegisterID> id_value =
   43|      0|                static_cast<std::underlying_type_t<IntRegisterID>>(id);
   44|       |
   45|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
   46|       |
   47|      0|        return m_IntRegisters.at(id_value);
   48|      0|    }
   49|       |
   50|       |    const IntRegister& Processor::GetIntRegister(IntRegisterID id) const noexcept
   51|      0|    {
   52|      0|        PHI_ASSERT(id != IntRegisterID::None);
   53|      0|        std::underlying_type_t<IntRegisterID> id_value =
   54|      0|                static_cast<std::underlying_type_t<IntRegisterID>>(id);
   55|       |
   56|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
   57|       |
   58|      0|        return m_IntRegisters.at(id_value);
   59|      0|    }
   60|       |
   61|       |    phi::i32 Processor::IntRegisterGetSignedValue(IntRegisterID id) const noexcept
   62|      0|    {
   63|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Signed))
   64|      0|        {
   65|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   66|      0|        }
   67|       |
   68|      0|        return GetIntRegister(id).GetSignedValue();
   69|      0|    }
   70|       |
   71|       |    phi::u32 Processor::IntRegisterGetUnsignedValue(IntRegisterID id) const noexcept
   72|      0|    {
   73|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   74|      0|                                       RegisterAccessType::Unsigned))
   75|      0|        {
   76|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   77|      0|        }
   78|       |
   79|      0|        return GetIntRegister(id).GetUnsignedValue();
   80|      0|    }
   81|       |
   82|       |    void Processor::IntRegisterSetSignedValue(IntRegisterID id, phi::i32 value) noexcept
   83|      0|    {
   84|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Signed))
   85|      0|        {
   86|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   87|      0|        }
   88|       |
   89|      0|        IntRegister& reg = GetIntRegister(id);
   90|       |
   91|      0|        if (reg.IsReadOnly())
   92|      0|        {
   93|      0|            return;
   94|      0|        }
   95|       |
   96|      0|        reg.SetSignedValue(value);
   97|      0|    }
   98|       |
   99|       |    void Processor::IntRegisterSetUnsignedValue(IntRegisterID id, phi::u32 value) noexcept
  100|      0|    {
  101|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  102|      0|                                       RegisterAccessType::Unsigned))
  103|      0|        {
  104|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  105|      0|        }
  106|       |
  107|      0|        IntRegister& reg = GetIntRegister(id);
  108|       |
  109|      0|        if (reg.IsReadOnly())
  110|      0|        {
  111|      0|            return;
  112|      0|        }
  113|       |
  114|      0|        reg.SetUnsignedValue(value);
  115|      0|    }
  116|       |
  117|       |    FloatRegister& Processor::GetFloatRegister(FloatRegisterID id) noexcept
  118|      0|    {
  119|      0|        PHI_ASSERT(id != FloatRegisterID::None);
  120|      0|        std::underlying_type_t<FloatRegisterID> id_value =
  121|      0|                static_cast<std::underlying_type_t<FloatRegisterID>>(id);
  122|       |
  123|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
  124|       |
  125|      0|        return m_FloatRegisters.at(id_value);
  126|      0|    }
  127|       |
  128|       |    const FloatRegister& Processor::GetFloatRegister(FloatRegisterID id) const noexcept
  129|      0|    {
  130|      0|        PHI_ASSERT(id != FloatRegisterID::None);
  131|      0|        std::underlying_type_t<FloatRegisterID> id_value =
  132|      0|                static_cast<std::underlying_type_t<FloatRegisterID>>(id);
  133|       |
  134|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
  135|       |
  136|      0|        return m_FloatRegisters.at(id_value);
  137|      0|    }
  138|       |
  139|       |    [[nodiscard]] phi::f32 Processor::FloatRegisterGetFloatValue(FloatRegisterID id) const noexcept
  140|      0|    {
  141|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Float))
  142|      0|        {
  143|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  144|      0|        }
  145|       |
  146|      0|        const FloatRegister& reg = GetFloatRegister(id);
  147|       |
  148|      0|        return reg.GetValue();
  149|      0|    }
  150|       |
  151|       |    [[nodiscard]] phi::f64 Processor::FloatRegisterGetDoubleValue(FloatRegisterID id) noexcept
  152|      0|    {
  153|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Double))
  154|      0|        {
  155|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  156|      0|        }
  157|       |
  158|      0|        if (id == FloatRegisterID::F31)
  159|      0|        {
  160|      0|            Raise(Exception::RegisterOutOfBounds);
  161|      0|            return phi::f64(0.0);
  162|      0|        }
  163|       |
  164|      0|        const FloatRegister& first_reg = GetFloatRegister(id);
  165|      0|        const FloatRegister& second_reg =
  166|      0|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  167|       |
  168|      0|        const float first_value  = first_reg.GetValue().get();
  169|      0|        const float second_value = second_reg.GetValue().get();
  170|       |
  171|      0|        const std::uint32_t first_value_bits =
  172|      0|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  173|      0|        const std::uint32_t second_value_bits =
  174|      0|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  175|       |
  176|      0|        std::uint64_t final_value_bits =
  177|      0|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  178|       |
  179|      0|        return *reinterpret_cast<double*>(&final_value_bits);
  180|      0|    }
  181|       |
  182|       |    void Processor::FloatRegisterSetFloatValue(FloatRegisterID id, phi::f32 value) noexcept
  183|      0|    {
  184|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Float))
  185|      0|        {
  186|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  187|      0|        }
  188|       |
  189|      0|        FloatRegister& reg = GetFloatRegister(id);
  190|       |
  191|      0|        reg.SetValue(value);
  192|      0|    }
  193|       |
  194|       |    void Processor::FloatRegisterSetDoubleValue(FloatRegisterID id, phi::f64 value) noexcept
  195|      0|    {
  196|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Double))
  197|      0|        {
  198|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  199|      0|        }
  200|       |
  201|      0|        if (id == FloatRegisterID::F31)
  202|      0|        {
  203|      0|            Raise(Exception::RegisterOutOfBounds);
  204|      0|            return;
  205|      0|        }
  206|       |
  207|      0|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  208|      0|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  209|       |
  210|      0|        double              value_raw  = value.get();
  211|      0|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  212|       |
  213|      0|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  214|      0|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  215|       |
  216|      0|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  217|      0|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  218|       |
  219|      0|        FloatRegister& first_reg = GetFloatRegister(id);
  220|      0|        FloatRegister& second_reg =
  221|      0|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  222|       |
  223|      0|        first_reg.SetValue(first_value);
  224|      0|        second_reg.SetValue(second_value);
  225|      0|    }
  226|       |
  227|       |    StatusRegister& Processor::GetFPSR() noexcept
  228|      0|    {
  229|      0|        return m_FPSR;
  230|      0|    }
  231|       |
  232|       |    const StatusRegister& Processor::GetFPSR() const noexcept
  233|      0|    {
  234|      0|        return m_FPSR;
  235|      0|    }
  236|       |
  237|       |    phi::Boolean Processor::GetFPSRValue() const noexcept
  238|      0|    {
  239|      0|        const StatusRegister& status_reg = GetFPSR();
  240|       |
  241|      0|        return status_reg.Get();
  242|      0|    }
  243|       |
  244|       |    void Processor::SetFPSRValue(phi::Boolean value) noexcept
  245|      0|    {
  246|      0|        StatusRegister& status_reg = GetFPSR();
  247|       |
  248|      0|        status_reg.SetStatus(value);
  249|      0|    }
  250|       |
  251|       |    void Processor::ExecuteInstruction(const Instruction& inst) noexcept
  252|      0|    {
  253|      0|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  254|       |
  255|      0|        inst.Execute(*this);
  256|      0|    }
  257|       |
  258|       |    void Processor::LoadProgram(ParsedProgram& programm) noexcept
  259|      0|    {
  260|      0|        m_CurrentProgram = &programm;
  261|       |
  262|      0|        m_ProgramCounter               = 0u;
  263|      0|        m_Halted                       = false;
  264|      0|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  265|      0|    }
  266|       |
  267|       |    phi::ObserverPtr<ParsedProgram> Processor::GetCurrentProgramm() const noexcept
  268|      0|    {
  269|      0|        return m_CurrentProgram;
  270|      0|    }
  271|       |
  272|       |    void Processor::ExecuteCurrentProgram() noexcept
  273|      0|    {
  274|      0|        PHI_ASSERT(m_CurrentProgram);
  275|       |
  276|       |        // Don't execute a program with parsing errors
  277|      0|        if (!m_CurrentProgram->m_ParseErrors.empty())
  278|      0|        {
  279|      0|            return;
  280|      0|        }
  281|       |
  282|      0|        m_ProgramCounter      = 0u;
  283|      0|        m_Halted              = false;
  284|      0|        m_LastRaisedException = Exception::None;
  285|       |
  286|      0|        phi::usize StepCount{0u};
  287|       |
  288|      0|        while (m_ProgramCounter < m_CurrentProgram->m_Instructions.size() && !m_Halted &&
  289|      0|               (m_MaxNumberOfSteps != 0u && StepCount < m_MaxNumberOfSteps))
  290|      0|        {
  291|      0|            m_NextProgramCounter = m_ProgramCounter + 1u;
  292|       |
  293|      0|            const auto& current_instruction =
  294|      0|                    m_CurrentProgram->m_Instructions.at(m_ProgramCounter.get());
  295|      0|            ExecuteInstruction(current_instruction);
  296|       |
  297|      0|            m_ProgramCounter = m_NextProgramCounter;
  298|       |
  299|      0|            ++StepCount;
  300|      0|        }
  301|      0|    }
  302|       |
  303|       |    void Processor::ClearRegisters() noexcept
  304|      0|    {
  305|      0|        for (auto& reg : m_IntRegisters)
  306|      0|        {
  307|      0|            reg.SetSignedValue(0);
  308|      0|        }
  309|       |
  310|      0|        for (auto& reg : m_FloatRegisters)
  311|      0|        {
  312|      0|            reg.SetValue(0.0f);
  313|      0|        }
  314|       |
  315|      0|        m_FPSR.SetStatus(false);
  316|      0|    }
  317|       |
  318|       |    void Processor::ClearMemory() noexcept
  319|      0|    {
  320|      0|        m_MemoryBlock.Clear();
  321|      0|    }
  322|       |
  323|       |    void Processor::Raise(Exception exception) noexcept
  324|      0|    {
  325|      0|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  326|       |
  327|      0|        m_LastRaisedException = exception;
  328|       |
  329|      0|        switch (exception)
  330|      0|        {
  331|      0|            case Exception::None:
  332|      0|                PHI_ASSERT_NOT_REACHED();
  333|      0|                return;
  334|      0|            case Exception::DivideByZero:
  335|      0|                m_Halted = true;
  336|      0|                PHI_LOG_ERROR("Division through zero");
  337|      0|                return;
  338|      0|            case Exception::Overflow:
  339|      0|                PHI_LOG_WARN("Overflow");
  340|      0|                return;
  341|      0|            case Exception::Underflow:
  342|      0|                PHI_LOG_WARN("Underflow");
  343|      0|                return;
  344|      0|            case Exception::Trap:
  345|      0|                m_Halted = true;
  346|      0|                PHI_LOG_ERROR("Trapped");
  347|      0|                return;
  348|      0|            case Exception::Halt:
  349|      0|                m_Halted = true;
  350|      0|                return;
  351|      0|            case Exception::UnknownLabel:
  352|      0|                m_Halted = true;
  353|      0|                PHI_LOG_ERROR("Unknown label");
  354|      0|                return;
  355|      0|            case Exception::BadShift:
  356|      0|                PHI_LOG_ERROR("Bad shift");
  357|      0|                return;
  358|      0|            case Exception::AddressOutOfBounds:
  359|      0|                PHI_LOG_ERROR("Address out of bounds");
  360|      0|                m_Halted = true;
  361|      0|                return;
  362|      0|            case Exception::RegisterOutOfBounds:
  363|      0|                PHI_LOG_ERROR("Register out of bounds");
  364|      0|                m_Halted = true;
  365|      0|                return;
  366|      0|        }
  367|       |
  368|      0|        PHI_ASSERT_NOT_REACHED();
  369|      0|    }
  370|       |
  371|       |    Exception Processor::GetLastRaisedException() const noexcept
  372|      0|    {
  373|      0|        return m_LastRaisedException;
  374|      0|    }
  375|       |
  376|       |    phi::Boolean Processor::IsHalted() const noexcept
  377|      0|    {
  378|      0|        return m_Halted;
  379|      0|    }
  380|       |
  381|       |    const MemoryBlock& Processor::GetMemory() const noexcept
  382|      0|    {
  383|      0|        return m_MemoryBlock;
  384|      0|    }
  385|       |
  386|       |    MemoryBlock& Processor::GetMemory() noexcept
  387|      0|    {
  388|      0|        return m_MemoryBlock;
  389|      0|    }
  390|       |
  391|       |    phi::u32 Processor::GetProgramCounter() const noexcept
  392|      0|    {
  393|      0|        return m_ProgramCounter;
  394|      0|    }
  395|       |
  396|       |    void Processor::SetProgramCounter(phi::u32 new_pc) noexcept
  397|      0|    {
  398|      0|        m_ProgramCounter = new_pc;
  399|      0|    }
  400|       |
  401|       |    [[nodiscard]] phi::u32 Processor::GetNextProgramCounter() const noexcept
  402|      0|    {
  403|      0|        return m_NextProgramCounter;
  404|      0|    }
  405|       |
  406|       |    void Processor::SetNextProgramCounter(phi::u32 new_npc) noexcept
  407|      0|    {
  408|      0|        m_NextProgramCounter = new_npc;
  409|      0|    }
  410|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/FloatRegister.cpp:
    1|       |#include "DLX/FloatRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void FloatRegister::SetValue(const phi::f32 val) noexcept
    6|      0|    {
    7|      0|        m_Value = val;
    8|      0|    }
    9|       |
   10|       |    phi::f32 FloatRegister::GetValue() const noexcept
   11|      0|    {
   12|      0|        return m_Value;
   13|      0|    }
   14|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Parser.cpp:
    1|       |#include "DLX/Parser.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/OpCode.hpp"
    5|       |#include "DLX/ParserUtils.hpp"
    6|       |#include "DLX/RegisterNames.hpp"
    7|       |#include "DLX/Token.hpp"
    8|       |#include "Phi/Core/Types.hpp"
    9|       |#include <Phi/Config/FunctionLikeMacro.hpp>
   10|       |#include <Phi/Core/Assert.hpp>
   11|       |#include <Phi/Core/Conversion.hpp>
   12|       |#include <Phi/Core/Log.hpp>
   13|       |#include <magic_enum.hpp>
   14|       |#include <algorithm>
   15|       |#include <limits>
   16|       |#include <optional>
   17|       |#include <regex>
   18|       |#include <stdexcept>
   19|       |#include <string_view>
   20|       |
   21|       |using namespace phi::literals;
   22|       |
   23|       |namespace dlx
   24|       |{
   25|       |    Token ParseToken(std::string_view token, phi::u64 line_number, phi::u64 column) noexcept
   26|   165k|    {
   27|       |        // TODO: Parse the given number here directly?
   28|   165k|        if (token.at(0) == '#' && token.size() > 1)
   29|  1.88k|        {
   30|  1.88k|            return Token(Token::Type::ImmediateInteger, token, line_number, column);
   31|  1.88k|        }
   32|       |
   33|   163k|        if (token.at(0) == '/' || token.at(0) == ';')
   34|  7.75k|        {
   35|  7.75k|            return Token(Token::Type::Comment, token, line_number, column);
   36|  7.75k|        }
   37|       |
   38|   155k|        if (auto number = ParseNumber(token); number.has_value())
   39|  1.57k|        {
   40|  1.57k|            return Token(Token::Type::IntegerLiteral, token, line_number, column, number->get());
   41|  1.57k|        }
   42|       |
   43|   153k|        std::string token_upper(token.data(), token.size());
   44|   153k|        std::transform(token_upper.begin(), token_upper.end(), token_upper.begin(), ::toupper);
   45|       |
   46|   153k|        if (token_upper == "FPSR")
   47|      0|        {
   48|      0|            return Token(Token::Type::RegisterStatus, token, line_number, column);
   49|      0|        }
   50|       |
   51|   153k|        if (IntRegisterID id = StringToIntRegister(token_upper); id != IntRegisterID::None)
   52|    346|        {
   53|    346|            return Token(Token::Type::RegisterInt, token, line_number, column,
   54|    346|                         static_cast<std::uint32_t>(id));
   55|    346|        }
   56|       |
   57|   153k|        if (FloatRegisterID id = StringToFloatRegister(token_upper); id != FloatRegisterID::None)
   58|     13|        {
   59|     13|            return Token(Token::Type::RegisterFloat, token, line_number, column,
   60|     13|                         static_cast<std::uint32_t>(id));
   61|     13|        }
   62|       |
   63|   153k|        if (OpCode opcode = StringToOpCode(token_upper); opcode != OpCode::NONE)
   64|  2.26k|        {
   65|  2.26k|            return Token(Token::Type::OpCode, token, line_number, column,
   66|  2.26k|                         static_cast<std::uint32_t>(opcode));
   67|  2.26k|        }
   68|       |
   69|   151k|        return Token(Token::Type::LabelIdentifier, token, line_number, column);
   70|   151k|    }
   71|       |
   72|       |    std::vector<Token> Parser::Tokenize(std::string_view source) noexcept
   73|    942|    {
   74|    942|        std::vector<Token> tokens{};
   75|    942|        tokens.reserve(5);
   76|       |
   77|    942|        std::string_view current_token;
   78|       |
   79|    942|        phi::u64 current_line_number{1u};
   80|    942|        phi::u64 current_column{1u};
   81|    942|        phi::u64 token_begin{0u};
   82|       |
   83|    942|        phi::Boolean parsing_comment{false};
   84|       |
   85|  7.25M|        for (phi::usize i{0u}; i < source.length(); ++i)
   86|  7.25M|        {
   87|  7.25M|            const char c{source.at(i.get())};
   88|       |
   89|  7.25M|            if (c == '\n')
   90|  37.7k|            {
   91|  37.7k|                if (current_token.empty())
   92|  3.73k|                {
   93|       |                    // Skip empty lines
   94|  3.73k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(token_begin.get(), 1),
   95|  3.73k|                                        current_line_number, current_column - 1u);
   96|       |
   97|  3.73k|                    parsing_comment = false;
   98|  3.73k|                    current_line_number += 1u;
   99|  3.73k|                    current_column = 1u;
  100|  3.73k|                    continue;
  101|  3.73k|                }
  102|       |
  103|       |                // Otherwise a new line separates tokens
  104|  34.0k|                tokens.emplace_back(
  105|  34.0k|                        ParseToken(source.substr(token_begin.get(), current_token.length()),
  106|  34.0k|                                   current_line_number, current_column - current_token.length()));
  107|       |
  108|  34.0k|                token_begin = i;
  109|       |
  110|  34.0k|                tokens.emplace_back(Token::Type::NewLine, source.substr(token_begin.get(), 1),
  111|  34.0k|                                    current_line_number, current_column - 1u);
  112|       |
  113|  34.0k|                current_token   = std::string_view{};
  114|  34.0k|                parsing_comment = false;
  115|  34.0k|                current_line_number += 1u;
  116|  34.0k|                current_column = 0u;
  117|  34.0k|            }
  118|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  119|  7.22M|            else if (c == '/' || c == ';')
  120|   240k|            {
  121|   240k|                if (current_token.empty())
  122|  7.75k|                {
  123|  7.75k|                    token_begin = i;
  124|  7.75k|                }
  125|       |
  126|   240k|                parsing_comment = true;
  127|   240k|                current_token   = std::string_view(
  128|   240k|                        source.substr(token_begin.get(), current_token.length() + 1));
  129|   240k|            }
  130|  6.97M|            else if (parsing_comment)
  131|  5.32M|            {
  132|       |                // simply append the character
  133|  5.32M|                current_token = std::string_view(
  134|  5.32M|                        source.substr(token_begin.get(), current_token.length() + 1));
  135|  5.32M|            }
  136|  1.64M|            else
  137|  1.64M|            {
  138|       |                // Not parsing a comment
  139|       |
  140|  1.64M|                switch (c)
  141|  1.64M|                {
  142|   480k|                    case ' ':
  143|   481k|                    case '\t':
  144|   482k|                    case '\v':
  145|   482k|                        if (current_token.empty())
  146|   402k|                        {
  147|   402k|                            current_column += 1u;
  148|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  149|   402k|                            continue;
  150|   402k|                        }
  151|       |
  152|       |                        // Otherwise a whitespace separates tokens
  153|  80.0k|                        tokens.emplace_back(ParseToken(
  154|  80.0k|                                source.substr(token_begin.get(), current_token.length()),
  155|  80.0k|                                current_line_number, current_column - current_token.length()));
  156|  80.0k|                        current_token = std::string_view{};
  157|  80.0k|                        break;
  158|  80.0k|                    case ':':
  159|       |                        // Need to parse label names together with their colon
  160|  31.4k|                        if (!current_token.empty())
  161|  20.5k|                        {
  162|  20.5k|                            current_token = std::string_view(
  163|  20.5k|                                    source.substr(token_begin.get(), current_token.length() + 1));
  164|  20.5k|                            tokens.emplace_back(ParseToken(
  165|  20.5k|                                    source.substr(token_begin.get(), current_token.length()),
  166|  20.5k|                                    current_line_number,
  167|  20.5k|                                    current_column + 1u - current_token.length()));
  168|       |
  169|  20.5k|                            current_token = std::string_view{};
  170|  20.5k|                        }
  171|  10.8k|                        else
  172|  10.8k|                        {
  173|       |                            // Orphan colon
  174|  10.8k|                            token_begin = i;
  175|       |
  176|  10.8k|                            tokens.emplace_back(Token::Type::Colon,
  177|  10.8k|                                                source.substr(token_begin.get(), 1),
  178|  10.8k|                                                current_line_number, current_column);
  179|  10.8k|                        }
  180|  31.4k|                        break;
  181|  80.0k|                    case ',':
  182|  24.1k|                    case '(':
  183|  38.5k|                    case ')':
  184|  38.5k|                        if (!current_token.empty())
  185|  29.7k|                        {
  186|  29.7k|                            tokens.emplace_back(ParseToken(
  187|  29.7k|                                    source.substr(token_begin.get(), current_token.length()),
  188|  29.7k|                                    current_line_number, current_column - current_token.length()));
  189|       |
  190|  29.7k|                            current_token = std::string_view{};
  191|  29.7k|                        }
  192|       |
  193|  38.5k|                        Token::Type type;
  194|  38.5k|                        switch (c)
  195|  38.5k|                        {
  196|  10.1k|                            case ',':
  197|  10.1k|                                type = Token::Type::Comma;
  198|  10.1k|                                break;
  199|  13.9k|                            case '(':
  200|  13.9k|                                type = Token::Type::OpenBracket;
  201|  13.9k|                                break;
  202|  14.3k|                            case ')':
  203|  14.3k|                                type = Token::Type::ClosingBracket;
  204|  14.3k|                                break;
  205|      0|                            default:
  206|      0|                                PHI_ASSERT_NOT_REACHED();
  207|      0|                                break;
  208|  38.5k|                        }
  209|       |
  210|  38.5k|                        token_begin = i;
  211|       |
  212|  38.5k|                        tokens.emplace_back(type, source.substr(token_begin.get(), 1),
  213|  38.5k|                                            current_line_number, current_column);
  214|  38.5k|                        break;
  215|       |
  216|  1.09M|                    default:
  217|  1.09M|                        if (current_token.empty())
  218|   157k|                        {
  219|   157k|                            token_begin = i;
  220|   157k|                        }
  221|       |
  222|       |                        // simply append the character
  223|  1.09M|                        current_token = std::string_view(
  224|  1.09M|                                source.substr(token_begin.get(), current_token.length() + 1));
  225|  1.64M|                }
  226|  1.64M|            }
  227|       |
  228|  7.25M|            current_column += 1u;
  229|  6.85M|        }
  230|       |
  231|       |        // Checked the entire string. Parse whats left if anything
  232|    942|        if (!current_token.empty())
  233|    734|        {
  234|    734|            tokens.emplace_back(ParseToken(source.substr(token_begin.get(), current_token.length()),
  235|    734|                                           current_line_number,
  236|    734|                                           current_column - current_token.length()));
  237|    734|        }
  238|       |
  239|    942|        return tokens;
  240|    942|    }
  241|       |
  242|       |    static phi::Boolean has_x_more_tokens(const std::vector<Token>& tokens, phi::usize index,
  243|       |                                          phi::u64 x) noexcept
  244|  3.05k|    {
  245|  3.05k|        return index + x <= tokens.size();
  246|  3.05k|    }
  247|       |
  248|       |    static phi::Boolean has_one_more_token(const std::vector<Token>& tokens,
  249|       |                                           phi::usize                index) noexcept
  250|  3.03k|    {
  251|  3.03k|        return has_x_more_tokens(tokens, index, 1u);
  252|  3.03k|    }
  253|       |
  254|       |    static phi::Boolean next_token_is(const std::vector<Token>& tokens, phi::usize index,
  255|       |                                      Token::Type token_type) noexcept
  256|      0|    {
  257|      0|        PHI_ASSERT(has_one_more_token(tokens, index));
  258|      0|
  259|      0|        const auto& next_token = tokens.at((index + 1u).get());
  260|      0|
  261|      0|        return next_token.GetType() == token_type;
  262|      0|    }
  263|       |
  264|       |    static phi::Boolean has_one_more_token_of_type(const std::vector<Token>& tokens,
  265|       |                                                   phi::usize                index,
  266|       |                                                   Token::Type               token_type) noexcept
  267|      0|    {
  268|      0|        if (!has_one_more_token(tokens, index))
  269|      0|        {
  270|      0|            return false;
  271|      0|        }
  272|      0|
  273|      0|        return (next_token_is(tokens, index, token_type));
  274|      0|    }
  275|       |
  276|       |    static void AddParseError(ParsedProgram& program, const std::string& message) noexcept
  277|   185k|    {
  278|   185k|        ParseError err;
  279|   185k|        err.message = message;
  280|       |
  281|       |        //PHI_LOG_ERROR("Parsing error: {}", message);
  282|       |
  283|   185k|        program.m_ParseErrors.emplace_back(err);
  284|   185k|    }
  285|       |
  286|       |    static std::optional<InstructionArg> parse_instruction_argument(
  287|       |            const Token& token, ArgumentType expected_argument_type,
  288|       |            const std::vector<Token>& tokens, phi::usize& index, ParsedProgram& program) noexcept
  289|  2.36k|    {
  290|       |        // PHI_LOG_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
  291|       |        //              magic_enum::enum_name(expected_argument_type));
  292|       |
  293|  2.36k|        switch (token.GetType())
  294|  2.36k|        {
  295|     19|            case Token::Type::IntegerLiteral: {
  296|     19|                if (!ArgumentTypeIncludes(expected_argument_type,
  297|     19|                                          ArgumentType::AddressDisplacement))
  298|      2|                {
  299|      2|                    AddParseError(program,
  300|      2|                                  fmt::format("Expected {} but got address displacement",
  301|      2|                                              magic_enum::enum_name(expected_argument_type)));
  302|      2|                    return {};
  303|      2|                }
  304|       |
  305|       |                // Parse address displacement
  306|     17|                auto displacement_value = ParseNumber(token.GetText());
  307|     17|                if (!displacement_value)
  308|      0|                {
  309|      0|                    AddParseError(program,
  310|      0|                                  "Failed to parse displacement value for Address displacement");
  311|      0|                    return {};
  312|      0|                }
  313|     17|                std::int16_t value = displacement_value.value().get();
  314|       |
  315|     17|                if (!has_x_more_tokens(tokens, index, 3u))
  316|      0|                {
  317|      0|                    AddParseError(program,
  318|      0|                                  "Not enough arguments left to parse address displacement");
  319|      0|                    return {};
  320|      0|                }
  321|       |
  322|     17|                const Token& first_token  = tokens.at(index.get());
  323|     17|                const Token& second_token = tokens.at((index + 1u).get());
  324|     17|                const Token& third_token  = tokens.at((index + 2u).get());
  325|       |
  326|     17|                if (first_token.GetType() != Token::Type::OpenBracket)
  327|      0|                {
  328|      0|                    AddParseError(program, "Expected open bracket");
  329|      0|                    return {};
  330|      0|                }
  331|       |
  332|       |                // Second token is the register
  333|     17|                if (second_token.GetType() != Token::Type::RegisterInt)
  334|      0|                {
  335|      0|                    AddParseError(program, "Expected IntRegister");
  336|      0|                    return {};
  337|      0|                }
  338|       |
  339|     17|                if (third_token.GetType() != Token::Type::ClosingBracket)
  340|      0|                {
  341|      0|                    AddParseError(program, "Expected closing bracket");
  342|      0|                    return {};
  343|      0|                }
  344|       |
  345|     17|                index += 3u;
  346|       |
  347|       |                //PHI_LOG_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
  348|       |                //             value, magic_enum::enum_name(reg_id));
  349|       |
  350|     17|                return ConstructInstructionArgAddressDisplacement(
  351|     17|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
  352|     17|            }
  353|    274|            case Token::Type::RegisterInt: {
  354|    274|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  355|      0|                {
  356|      0|                    AddParseError(program,
  357|      0|                                  fmt::format("Got IntRegister but expected '{}'",
  358|      0|                                              magic_enum::enum_name(expected_argument_type)));
  359|      0|                    return {};
  360|      0|                }
  361|       |
  362|       |                //PHI_LOG_INFO("Parsed identifier as int register {}",
  363|       |                //             magic_enum::enum_name(reg_id));
  364|       |
  365|    274|                return ConstructInstructionArgRegisterInt(
  366|    274|                        static_cast<IntRegisterID>(token.GetHint()));
  367|    274|            }
  368|    274|            case Token::Type::RegisterFloat: {
  369|      0|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  370|      0|                {
  371|      0|                    AddParseError(program,
  372|      0|                                  fmt::format("Got FloatRegister but expected '{}'",
  373|      0|                                              magic_enum::enum_name(expected_argument_type)));
  374|      0|                    return {};
  375|      0|                }
  376|       |
  377|       |                //PHI_LOG_INFO("Parsed identifier as float register {}",
  378|       |                //             magic_enum::enum_name(float_reg_id));
  379|       |
  380|      0|                return ConstructInstructionArgRegisterFloat(
  381|      0|                        static_cast<FloatRegisterID>(token.GetHint()));
  382|      0|            }
  383|      0|            case Token::Type::RegisterStatus: {
  384|      0|            }
  385|    651|            case Token::Type::LabelIdentifier: {
  386|       |                // Parse as Label
  387|    651|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  388|    613|                {
  389|    613|                    AddParseError(program,
  390|    613|                                  fmt::format("Got Label but expected '{}'",
  391|    613|                                              magic_enum::enum_name(expected_argument_type)));
  392|    613|                    return {};
  393|    613|                }
  394|       |
  395|     38|                if (!IsValidIdentifier(token.GetText()))
  396|     21|                {
  397|     21|                    AddParseError(program, fmt::format("Invalid label identifier found {}",
  398|     21|                                                       token.GetText()));
  399|     21|                    return {};
  400|     21|                }
  401|       |
  402|       |                //PHI_LOG_INFO("Parsed Label identifier as '{}'", token.GetText());
  403|       |
  404|     17|                return ConstructInstructionArgLabel(token.GetText());
  405|     17|            }
  406|     82|            case Token::Type::ImmediateInteger: {
  407|     82|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  408|     10|                {
  409|     10|                    AddParseError(program,
  410|     10|                                  fmt::format("Got ImmediateInteger but expected '{}'",
  411|     10|                                              magic_enum::enum_name(expected_argument_type)));
  412|     10|                    return {};
  413|     10|                }
  414|       |
  415|     72|                auto parsed_value = ParseNumber(token.GetText().substr(1));
  416|     72|                if (!parsed_value)
  417|      3|                {
  418|      3|                    AddParseError(program, "Failed to parse immediate Integer value");
  419|      3|                    return {};
  420|      3|                }
  421|       |
  422|       |                //PHI_LOG_INFO("Parsed Immediate Integer with value {}", parsed_value.value().get());
  423|       |
  424|     69|                return ConstructInstructionArgImmediateValue(parsed_value.value().get());
  425|     69|            }
  426|  1.34k|            default:
  427|  1.34k|                AddParseError(program,
  428|  1.34k|                              fmt::format("Unexpected token of type '{}'", token.GetTypeName()));
  429|  1.34k|                return {};
  430|  2.36k|        }
  431|  2.36k|    }
  432|       |
  433|       |    static void consume_x_tokens(phi::usize& index, phi::usize x) noexcept
  434|   252k|    {
  435|   252k|        index += x;
  436|   252k|    }
  437|       |
  438|       |    static void consume_current_token(phi::usize& index) noexcept
  439|   252k|    {
  440|   252k|        consume_x_tokens(index, 1u);
  441|   252k|    }
  442|       |
  443|       |    ParsedProgram Parser::Parse(const InstructionLibrary& lib, std::vector<Token>& tokens) noexcept
  444|    942|    {
  445|    942|        ParsedProgram program;
  446|       |
  447|    942|        program.m_Tokens = tokens;
  448|       |
  449|    942|        phi::Boolean line_has_instruction{false};
  450|       |
  451|   250k|        for (phi::usize index{0u}; index < tokens.size();)
  452|   249k|        {
  453|   249k|            Token& current_token = tokens.at(index.get());
  454|       |
  455|   249k|            consume_current_token(index);
  456|       |
  457|       |            //PHI_LOG_INFO("Parsing '{}'", current_token.DebugInfo());
  458|       |
  459|   249k|            switch (current_token.GetType())
  460|   249k|            {
  461|       |                // Ignore comments
  462|  7.75k|                case Token::Type::Comment:
  463|       |                    //PHI_LOG_DEBUG("Ignoring comment");
  464|  7.75k|                    break;
  465|  37.7k|                case Token::Type::NewLine:
  466|       |                    //PHI_LOG_DEBUG("Ignoring newline");
  467|  37.7k|                    line_has_instruction = false;
  468|  37.7k|                    break;
  469|   150k|                case Token::Type::LabelIdentifier: {
  470|   150k|                    if (line_has_instruction)
  471|      0|                    {
  472|      0|                        AddParseError(program, "Expected new line but got label identifer");
  473|      0|                        break;
  474|      0|                    }
  475|       |
  476|       |                    // Handle jump labels
  477|       |                    // Check if the last character of the identifier is a colon
  478|   150k|                    if (current_token.GetText().at(current_token.GetText().size() - 1) == ':')
  479|  20.0k|                    {
  480|  20.0k|                        std::string_view label_name = current_token.GetText().substr(
  481|  20.0k|                                0, current_token.GetText().size() - 1);
  482|       |
  483|  20.0k|                        program.m_JumpData[label_name] =
  484|  20.0k|                                static_cast<std::uint32_t>(program.m_Instructions.size());
  485|       |
  486|       |                        //PHI_LOG_INFO("Added jump label {} -> {}", label_name,
  487|       |                        //             program.m_Instructions.size());
  488|  20.0k|                    }
  489|   130k|                    else
  490|   130k|                    {
  491|   130k|                        AddParseError(program, "Label identifier is missing a colon");
  492|   130k|                    }
  493|       |
  494|   150k|                    break;
  495|   150k|                }
  496|   150k|                case Token::Type::OpCode: {
  497|  2.26k|                    if (line_has_instruction)
  498|      0|                    {
  499|      0|                        AddParseError(program, "Expected new line but got op code");
  500|      0|                        break;
  501|      0|                    }
  502|       |
  503|       |                    // Handle normal instructions
  504|  2.26k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  505|       |
  506|       |                    //PHI_LOG_INFO("Instruction opcode: {}", magic_enum::enum_name(opcode));
  507|       |
  508|  2.26k|                    const InstructionInfo& info = lib.LookUp(opcode);
  509|       |
  510|       |                    // Make sure we got no problems here
  511|  2.26k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  512|  2.26k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  513|  2.26k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  514|  2.26k|                    PHI_ASSERT(info.GetExecutor());
  515|       |
  516|  2.26k|                    phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  517|       |                    //PHI_LOG_INFO("Instruction requires {} arguments",
  518|       |                    //             number_of_argument_required.get());
  519|       |
  520|       |                    // Create instruction
  521|  2.26k|                    Instruction instruction(info);
  522|       |
  523|       |                    // Parse arguments
  524|  3.23k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  525|  3.03k|                    {
  526|       |                        // Get next token
  527|  3.03k|                        if (!has_one_more_token(tokens, index))
  528|     20|                        {
  529|     20|                            AddParseError(
  530|     20|                                    program,
  531|     20|                                    fmt::format("Missing {} arguments for instruction {}",
  532|     20|                                                (number_of_argument_required - argument_num).get(),
  533|     20|                                                magic_enum::enum_name(opcode)));
  534|     20|                            break;
  535|     20|                        }
  536|       |
  537|  3.01k|                        current_token = tokens.at(index.get());
  538|  3.01k|                        consume_current_token(index);
  539|       |
  540|       |                        // Skip commas
  541|  3.01k|                        if (current_token.GetType() == Token::Type::Comma)
  542|    590|                        {
  543|       |                            //PHI_LOG_DEBUG("Skipping comma");
  544|    590|                            continue;
  545|    590|                        }
  546|       |
  547|  2.42k|                        if (current_token.GetType() == Token::Type::NewLine)
  548|     57|                        {
  549|     57|                            AddParseError(program, "Unexpected end of line");
  550|     57|                            break;
  551|     57|                        }
  552|       |
  553|  2.36k|                        std::optional<InstructionArg> optional_parsed_argument =
  554|  2.36k|                                parse_instruction_argument(current_token,
  555|  2.36k|                                                           info.GetArgumentType(argument_num),
  556|  2.36k|                                                           tokens, index, program);
  557|  2.36k|                        if (!optional_parsed_argument.has_value())
  558|  1.99k|                        {
  559|  1.99k|                            AddParseError(program, fmt::format("Failed to parse argument number {}",
  560|  1.99k|                                                               argument_num.get()));
  561|  1.99k|                            break;
  562|  1.99k|                        }
  563|       |
  564|       |                        // Successfully parsed one argument
  565|    377|                        InstructionArg parsed_argument = optional_parsed_argument.value();
  566|       |
  567|    377|                        instruction.SetArgument(argument_num, parsed_argument);
  568|    377|                        argument_num++;
  569|       |
  570|       |                        //PHI_LOG_INFO("Successfully parsed argument {}", argument_num.get());
  571|    377|                    }
  572|       |
  573|       |                    // Only add the instruction if we got no parsing errors
  574|  2.26k|                    if (program.m_ParseErrors.empty())
  575|    129|                    {
  576|       |                        //PHI_LOG_INFO("Successfully parsed instruction '{}'",
  577|       |                        //            instruction.DebugInfo());
  578|    129|                        program.m_Instructions.emplace_back(instruction);
  579|    129|                        line_has_instruction = true;
  580|    129|                    }
  581|  2.26k|                    break;
  582|  2.26k|                }
  583|       |
  584|  50.8k|                default:
  585|  50.8k|                    AddParseError(program, "Unexpected token");
  586|  50.8k|                    break;
  587|   249k|            }
  588|   249k|        }
  589|       |
  590|    942|        return program;
  591|    942|    }
  592|       |
  593|       |    ParsedProgram Parser::Parse(const InstructionLibrary& lib, std::string_view source) noexcept
  594|    942|    {
  595|    942|        std::vector<Token> tokens = Tokenize(source);
  596|    942|        return Parse(lib, tokens);
  597|    942|    }
  598|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/StatusRegister.cpp:
    1|       |#include "DLX/StatusRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void StatusRegister::SetStatus(phi::Boolean value) noexcept
    6|      0|    {
    7|      0|        m_Value = value;
    8|      0|    }
    9|       |
   10|       |    phi::Boolean StatusRegister::Get() const noexcept
   11|      0|    {
   12|      0|        return m_Value;
   13|      0|    }
   14|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/RegisterNames.cpp:
    1|       |#include "DLX/RegisterNames.hpp"
    2|       |
    3|       |#include "DLX/Containers/LookUpMap.hpp"
    4|       |#include <algorithm>
    5|       |#include <cctype>
    6|       |#include <string_view>
    7|       |
    8|       |namespace dlx
    9|       |{
   10|       |    static constexpr std::array<std::pair<std::string_view, IntRegisterID>, 32> IntRegisterValues{
   11|       |            {{"R0", IntRegisterID::R0},   {"R1", IntRegisterID::R1},   {"R2", IntRegisterID::R2},
   12|       |             {"R3", IntRegisterID::R3},   {"R4", IntRegisterID::R4},   {"R5", IntRegisterID::R5},
   13|       |             {"R6", IntRegisterID::R6},   {"R7", IntRegisterID::R7},   {"R8", IntRegisterID::R8},
   14|       |             {"R9", IntRegisterID::R9},   {"R10", IntRegisterID::R10}, {"R11", IntRegisterID::R11},
   15|       |             {"R12", IntRegisterID::R12}, {"R13", IntRegisterID::R13}, {"R14", IntRegisterID::R14},
   16|       |             {"R15", IntRegisterID::R15}, {"R16", IntRegisterID::R16}, {"R17", IntRegisterID::R17},
   17|       |             {"R18", IntRegisterID::R18}, {"R19", IntRegisterID::R19}, {"R20", IntRegisterID::R20},
   18|       |             {"R21", IntRegisterID::R21}, {"R22", IntRegisterID::R22}, {"R23", IntRegisterID::R23},
   19|       |             {"R24", IntRegisterID::R24}, {"R25", IntRegisterID::R25}, {"R26", IntRegisterID::R26},
   20|       |             {"R27", IntRegisterID::R27}, {"R28", IntRegisterID::R28}, {"R29", IntRegisterID::R29},
   21|       |             {"R30", IntRegisterID::R30}, {"R31", IntRegisterID::R31}}};
   22|       |
   23|       |    static constexpr std::array<std::pair<std::string_view, FloatRegisterID>, 32>
   24|       |            FloatRegisterValues{{{"F0", FloatRegisterID::F0},   {"F1", FloatRegisterID::F1},
   25|       |                                 {"F2", FloatRegisterID::F2},   {"F3", FloatRegisterID::F3},
   26|       |                                 {"F4", FloatRegisterID::F4},   {"F5", FloatRegisterID::F5},
   27|       |                                 {"F6", FloatRegisterID::F6},   {"F7", FloatRegisterID::F7},
   28|       |                                 {"F8", FloatRegisterID::F8},   {"F9", FloatRegisterID::F9},
   29|       |                                 {"F10", FloatRegisterID::F10}, {"F11", FloatRegisterID::F11},
   30|       |                                 {"F12", FloatRegisterID::F12}, {"F13", FloatRegisterID::F13},
   31|       |                                 {"F14", FloatRegisterID::F14}, {"F15", FloatRegisterID::F15},
   32|       |                                 {"F16", FloatRegisterID::F16}, {"F17", FloatRegisterID::F17},
   33|       |                                 {"F18", FloatRegisterID::F18}, {"F19", FloatRegisterID::F19},
   34|       |                                 {"F20", FloatRegisterID::F20}, {"F21", FloatRegisterID::F21},
   35|       |                                 {"F22", FloatRegisterID::F22}, {"F23", FloatRegisterID::F23},
   36|       |                                 {"F24", FloatRegisterID::F24}, {"F25", FloatRegisterID::F25},
   37|       |                                 {"F26", FloatRegisterID::F26}, {"F27", FloatRegisterID::F27},
   38|       |                                 {"F28", FloatRegisterID::F28}, {"F29", FloatRegisterID::F29},
   39|       |                                 {"F30", FloatRegisterID::F30}, {"F31", FloatRegisterID::F31}}};
   40|       |
   41|       |    IntRegisterID StringToIntRegister(std::string_view token) noexcept
   42|   153k|    {
   43|   153k|        static constexpr auto map =
   44|   153k|                LookUpMap<std::string_view, IntRegisterID, IntRegisterValues.size()>(
   45|   153k|                        IntRegisterValues, IntRegisterID::None);
   46|       |
   47|   153k|        return map.at(token);
   48|   153k|    }
   49|       |
   50|       |    FloatRegisterID StringToFloatRegister(std::string_view token) noexcept
   51|   153k|    {
   52|   153k|        static constexpr auto map =
   53|   153k|                LookUpMap<std::string_view, FloatRegisterID, FloatRegisterValues.size()>(
   54|   153k|                        FloatRegisterValues, FloatRegisterID::None);
   55|       |
   56|   153k|        return map.at(token);
   57|   153k|    }
   58|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/IntRegister.cpp:
    1|       |#include "DLX/IntRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    IntRegister::IntRegister() noexcept
    6|       |        : m_ValueSigned{0}
    7|       |        , m_IsReadOnly{false}
    8|      0|    {}
    9|       |
   10|       |    void IntRegister::SetSignedValue(phi::i32 val) noexcept
   11|      0|    {
   12|      0|        m_ValueSigned = val;
   13|      0|    }
   14|       |
   15|       |    void IntRegister::SetUnsignedValue(phi::u32 val) noexcept
   16|      0|    {
   17|      0|        m_ValueUnsigned = val;
   18|      0|    }
   19|       |
   20|       |    phi::i32 IntRegister::GetSignedValue() const noexcept
   21|      0|    {
   22|      0|        return m_ValueSigned;
   23|      0|    }
   24|       |
   25|       |    phi::u32 IntRegister::GetUnsignedValue() const noexcept
   26|      0|    {
   27|      0|        return m_ValueUnsigned;
   28|      0|    }
   29|       |
   30|       |    phi::Boolean IntRegister::IsReadOnly() const noexcept
   31|      0|    {
   32|      0|        return m_IsReadOnly;
   33|      0|    }
   34|       |
   35|       |    void IntRegister::SetReadOnly(phi::Boolean read_only) noexcept
   36|      0|    {
   37|      0|        m_IsReadOnly = read_only;
   38|      0|    }
   39|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionArg.cpp:
    1|       |#include "DLX/InstructionArg.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    InstructionArg::InstructionArg() noexcept
    6|       |        : m_Type(ArgumentType::None)
    7|       |        , address_displacement()
    8|  7.17k|    {}
    9|       |
   10|       |    ArgumentType InstructionArg::GetType() const noexcept
   11|      0|    {
   12|      0|        return m_Type;
   13|      0|    }
   14|       |
   15|       |    std::string InstructionArg::DebugInfo() const noexcept
   16|      0|    {
   17|      0|        return "InstructionArgument";
   18|      0|    }
   19|       |
   20|       |    const InstructionArg::RegisterInt& InstructionArg::AsRegisterInt() const noexcept
   21|      0|    {
   22|      0|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   23|       |
   24|      0|        return register_int;
   25|      0|    }
   26|       |
   27|       |    const InstructionArg::RegisterFloat& InstructionArg::AsRegisterFloat() const noexcept
   28|      0|    {
   29|      0|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   30|       |
   31|      0|        return register_float;
   32|      0|    }
   33|       |
   34|       |    const InstructionArg::ImmediateValue& InstructionArg::AsImmediateValue() const noexcept
   35|      0|    {
   36|      0|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   37|       |
   38|      0|        return immediate_value;
   39|      0|    }
   40|       |
   41|       |    const InstructionArg::AddressDisplacement& InstructionArg::AsAddressDisplacement()
   42|       |            const noexcept
   43|      0|    {
   44|      0|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
   45|       |
   46|      0|        return address_displacement;
   47|      0|    }
   48|       |
   49|       |    const InstructionArg::Label& InstructionArg::AsLabel() const noexcept
   50|      0|    {
   51|      0|        PHI_ASSERT(m_Type == ArgumentType::Label);
   52|       |
   53|      0|        return label;
   54|      0|    }
   55|       |
   56|       |    phi::Boolean operator==(const InstructionArg& lhs, const InstructionArg& rhs) noexcept
   57|      0|    {
   58|      0|        if (lhs.GetType() != rhs.GetType())
   59|      0|        {
   60|      0|            return false;
   61|      0|        }
   62|       |
   63|      0|        switch (lhs.GetType())
   64|      0|        {
   65|      0|            case ArgumentType::AddressDisplacement:
   66|      0|                return (lhs.AsAddressDisplacement().displacement ==
   67|      0|                        rhs.AsAddressDisplacement().displacement) &&
   68|      0|                       (lhs.AsAddressDisplacement().register_id ==
   69|      0|                        rhs.AsAddressDisplacement().register_id);
   70|      0|            case ArgumentType::ImmediateInteger:
   71|      0|                return lhs.AsImmediateValue().signed_value == rhs.AsImmediateValue().signed_value;
   72|      0|            case ArgumentType::IntRegister:
   73|      0|                return lhs.AsRegisterInt().register_id == rhs.AsRegisterInt().register_id;
   74|      0|            case ArgumentType::FloatRegister:
   75|      0|                return lhs.AsRegisterFloat().register_id == rhs.AsRegisterFloat().register_id;
   76|      0|            case ArgumentType::Label:
   77|      0|                return lhs.AsLabel().label_name == rhs.AsLabel().label_name;
   78|      0|            case ArgumentType::None:
   79|      0|                return true;
   80|      0|            default:
   81|      0|                PHI_ASSERT_NOT_REACHED();
   82|      0|                break;
   83|      0|        }
   84|       |
   85|      0|        PHI_ASSERT_NOT_REACHED();
   86|      0|        return false;
   87|      0|    }
   88|       |
   89|       |    phi::Boolean operator!=(const InstructionArg& lhs, const InstructionArg& rhs) noexcept
   90|      0|    {
   91|      0|        return !(lhs == rhs);
   92|      0|    }
   93|       |
   94|       |    InstructionArg ConstructInstructionArgRegisterInt(IntRegisterID id) noexcept
   95|    274|    {
   96|    274|        InstructionArg arg;
   97|    274|        arg.m_Type                   = ArgumentType::IntRegister;
   98|    274|        arg.register_int.register_id = id;
   99|    274|        return arg;
  100|    274|    }
  101|       |
  102|       |    InstructionArg ConstructInstructionArgRegisterFloat(FloatRegisterID id) noexcept
  103|      0|    {
  104|      0|        InstructionArg arg;
  105|      0|        arg.m_Type                     = ArgumentType::FloatRegister;
  106|      0|        arg.register_float.register_id = id;
  107|      0|        return arg;
  108|      0|    }
  109|       |
  110|       |    InstructionArg ConstructInstructionArgImmediateValue(std::int16_t value) noexcept
  111|     69|    {
  112|     69|        InstructionArg arg;
  113|     69|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  114|     69|        arg.immediate_value.signed_value = value;
  115|     69|        return arg;
  116|     69|    }
  117|       |
  118|       |    InstructionArg ConstructInstructionArgAddressDisplacement(IntRegisterID id,
  119|       |                                                              phi::i32      displacement) noexcept
  120|     17|    {
  121|     17|        InstructionArg arg;
  122|     17|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  123|     17|        arg.address_displacement.register_id  = id;
  124|     17|        arg.address_displacement.displacement = displacement;
  125|     17|        return arg;
  126|     17|    }
  127|       |
  128|       |    InstructionArg ConstructInstructionArgLabel(std::string_view label_name) noexcept
  129|     17|    {
  130|     17|        InstructionArg arg;
  131|     17|        arg.m_Type           = ArgumentType::Label;
  132|     17|        arg.label.label_name = label_name;
  133|     17|        return arg;
  134|     17|    }
  135|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Instruction.cpp:
    1|       |#include "DLX/Instruction.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include <Phi/Core/Assert.hpp>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    Instruction::Instruction(const InstructionInfo& info) noexcept
    9|       |        : m_Info(info)
   10|  2.26k|    {}
   11|       |
   12|       |    void Instruction::SetArgument(phi::u8 argument_number, InstructionArg argument) noexcept
   13|    377|    {
   14|    377|        PHI_ASSERT(argument_number < 3u);
   15|       |
   16|    377|        switch (argument_number.get())
   17|    377|        {
   18|    159|            case 0u:
   19|    159|                m_Arg1 = argument;
   20|    159|                break;
   21|    130|            case 1u:
   22|    130|                m_Arg2 = argument;
   23|    130|                break;
   24|     88|            case 2u:
   25|     88|                m_Arg3 = argument;
   26|     88|                break;
   27|      0|            default:
   28|      0|                PHI_ASSERT_NOT_REACHED();
   29|    377|        }
   30|    377|    }
   31|       |
   32|       |    std::string Instruction::DebugInfo() const noexcept
   33|      0|    {
   34|      0|        return std::string("Instruction");
   35|      0|    }
   36|       |
   37|       |    void Instruction::Execute(Processor& processor) const noexcept
   38|      0|    {
   39|      0|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   40|      0|    }
   41|       |
   42|       |    const InstructionInfo& Instruction::GetInfo() const noexcept
   43|      0|    {
   44|      0|        return m_Info;
   45|      0|    }
   46|       |
   47|       |    const InstructionArg& Instruction::GetArg1() const noexcept
   48|      0|    {
   49|      0|        return m_Arg1;
   50|      0|    }
   51|       |
   52|       |    const InstructionArg& Instruction::GetArg2() const noexcept
   53|      0|    {
   54|      0|        return m_Arg2;
   55|      0|    }
   56|       |
   57|       |    const InstructionArg& Instruction::GetArg3() const noexcept
   58|      0|    {
   59|      0|        return m_Arg3;
   60|      0|    }
   61|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/OpCode.cpp:
    1|       |#include "DLX/OpCode.hpp"
    2|       |
    3|       |#include <magic_enum.hpp>
    4|       |#include <algorithm>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    OpCode StringToOpCode(std::string_view token) noexcept
    9|   153k|    {
   10|   153k|        std::optional<OpCode> opcode_casted = magic_enum::enum_cast<OpCode>(token);
   11|   153k|        if (opcode_casted.has_value())
   12|  2.94k|        {
   13|       |            // TODO: Bit of a hacky way around magic_enum begin able to cast every member...
   14|  2.94k|            if (opcode_casted.value() == OpCode::NUMBER_OF_ELEMENTS)
   15|      5|            {
   16|      5|                return OpCode::NONE;
   17|      5|            }
   18|  2.94k|            return opcode_casted.value();
   19|  2.94k|        }
   20|       |
   21|       |        // None found
   22|   150k|        return OpCode::NONE;
   23|   150k|    }
   24|       |} // namespace dlx

