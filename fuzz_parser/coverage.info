/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Processor.cpp:
    1|       |#include "DLX/Processor.hpp"
    2|       |
    3|       |#include "DLX/FloatRegister.hpp"
    4|       |#include "DLX/InstructionInfo.hpp"
    5|       |#include "DLX/Parser.hpp"
    6|       |#include "DLX/RegisterNames.hpp"
    7|       |#include "DLX/StatusRegister.hpp"
    8|       |#include "Phi/Core/Log.hpp"
    9|       |#include "Phi/Core/Types.hpp"
   10|       |
   11|       |namespace dlx
   12|       |{
   13|       |    static phi::Boolean RegisterAccessTypeMatches(RegisterAccessType expected_access,
   14|       |                                                  RegisterAccessType access)
   15|      0|    {
   16|      0|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   17|      0|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   18|      0|
   19|      0|        switch (expected_access)
   20|      0|        {
   21|      0|            case RegisterAccessType::Ignored:
   22|      0|                return true;
   23|      0|            case RegisterAccessType::None:
   24|      0|                return false;
   25|      0|            case RegisterAccessType::MixedFloatDouble:
   26|      0|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
   27|      0|            default:
   28|      0|                return expected_access == access;
   29|      0|        }
   30|      0|    }
   31|       |
   32|       |    Processor::Processor()
   33|       |        : m_MemoryBlock(1000u, 1000u)
   34|      0|    {
   35|      0|        // Mark R0 as ready only
   36|      0|        m_IntRegisters.at(0).SetReadOnly(true);
   37|      0|    }
   38|       |
   39|       |    IntRegister& Processor::GetIntRegister(IntRegisterID id)
   40|      0|    {
   41|      0|        PHI_ASSERT(id != IntRegisterID::None);
   42|      0|        std::underlying_type_t<IntRegisterID> id_value =
   43|      0|                static_cast<std::underlying_type_t<IntRegisterID>>(id);
   44|      0|
   45|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
   46|      0|
   47|      0|        return m_IntRegisters.at(id_value);
   48|      0|    }
   49|       |
   50|       |    const IntRegister& Processor::GetIntRegister(IntRegisterID id) const
   51|      0|    {
   52|      0|        PHI_ASSERT(id != IntRegisterID::None);
   53|      0|        std::underlying_type_t<IntRegisterID> id_value =
   54|      0|                static_cast<std::underlying_type_t<IntRegisterID>>(id);
   55|      0|
   56|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
   57|      0|
   58|      0|        return m_IntRegisters.at(id_value);
   59|      0|    }
   60|       |
   61|       |    phi::i32 Processor::IntRegisterGetSignedValue(IntRegisterID id) const
   62|      0|    {
   63|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Signed))
   64|      0|        {
   65|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   66|      0|        }
   67|      0|
   68|      0|        return GetIntRegister(id).GetSignedValue();
   69|      0|    }
   70|       |
   71|       |    phi::u32 Processor::IntRegisterGetUnsignedValue(IntRegisterID id) const
   72|      0|    {
   73|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   74|      0|                                       RegisterAccessType::Unsigned))
   75|      0|        {
   76|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   77|      0|        }
   78|      0|
   79|      0|        return GetIntRegister(id).GetUnsignedValue();
   80|      0|    }
   81|       |
   82|       |    void Processor::IntRegisterSetSignedValue(IntRegisterID id, phi::i32 value)
   83|      0|    {
   84|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Signed))
   85|      0|        {
   86|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
   87|      0|        }
   88|      0|
   89|      0|        IntRegister& reg = GetIntRegister(id);
   90|      0|
   91|      0|        if (reg.IsReadOnly())
   92|      0|        {
   93|      0|            return;
   94|      0|        }
   95|      0|
   96|      0|        reg.SetSignedValue(value);
   97|      0|    }
   98|       |
   99|       |    void Processor::IntRegisterSetUnsignedValue(IntRegisterID id, phi::u32 value)
  100|      0|    {
  101|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  102|      0|                                       RegisterAccessType::Unsigned))
  103|      0|        {
  104|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  105|      0|        }
  106|      0|
  107|      0|        IntRegister& reg = GetIntRegister(id);
  108|      0|
  109|      0|        if (reg.IsReadOnly())
  110|      0|        {
  111|      0|            return;
  112|      0|        }
  113|      0|
  114|      0|        reg.SetUnsignedValue(value);
  115|      0|    }
  116|       |
  117|       |    FloatRegister& Processor::GetFloatRegister(FloatRegisterID id)
  118|      0|    {
  119|      0|        PHI_ASSERT(id != FloatRegisterID::None);
  120|      0|        std::underlying_type_t<FloatRegisterID> id_value =
  121|      0|                static_cast<std::underlying_type_t<FloatRegisterID>>(id);
  122|      0|
  123|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
  124|      0|
  125|      0|        return m_FloatRegisters.at(id_value);
  126|      0|    }
  127|       |
  128|       |    const FloatRegister& Processor::GetFloatRegister(FloatRegisterID id) const
  129|      0|    {
  130|      0|        PHI_ASSERT(id != FloatRegisterID::None);
  131|      0|        std::underlying_type_t<FloatRegisterID> id_value =
  132|      0|                static_cast<std::underlying_type_t<FloatRegisterID>>(id);
  133|      0|
  134|      0|        PHI_ASSERT(id_value >= 0 && id_value <= 31);
  135|      0|
  136|      0|        return m_FloatRegisters.at(id_value);
  137|      0|    }
  138|       |
  139|       |    [[nodiscard]] phi::f32 Processor::FloatRegisterGetFloatValue(FloatRegisterID id) const
  140|      0|    {
  141|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Float))
  142|      0|        {
  143|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  144|      0|        }
  145|      0|
  146|      0|        const FloatRegister& reg = GetFloatRegister(id);
  147|      0|
  148|      0|        return reg.GetValue();
  149|      0|    }
  150|       |
  151|       |    [[nodiscard]] phi::f64 Processor::FloatRegisterGetDoubleValue(FloatRegisterID id)
  152|      0|    {
  153|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Double))
  154|      0|        {
  155|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  156|      0|        }
  157|      0|
  158|      0|        if (id == FloatRegisterID::F31)
  159|      0|        {
  160|      0|            Raise(Exception::RegisterOutOfBounds);
  161|      0|            return phi::f64(0.0);
  162|      0|        }
  163|      0|
  164|      0|        const FloatRegister& first_reg = GetFloatRegister(id);
  165|      0|        const FloatRegister& second_reg =
  166|      0|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  167|      0|
  168|      0|        const float first_value  = first_reg.GetValue().get();
  169|      0|        const float second_value = second_reg.GetValue().get();
  170|      0|
  171|      0|        const std::uint32_t first_value_bits =
  172|      0|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  173|      0|        const std::uint32_t second_value_bits =
  174|      0|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  175|      0|
  176|      0|        std::uint64_t final_value_bits =
  177|      0|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  178|      0|
  179|      0|        return *reinterpret_cast<double*>(&final_value_bits);
  180|      0|    }
  181|       |
  182|       |    void Processor::FloatRegisterSetFloatValue(FloatRegisterID id, phi::f32 value)
  183|      0|    {
  184|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Float))
  185|      0|        {
  186|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  187|      0|        }
  188|      0|
  189|      0|        FloatRegister& reg = GetFloatRegister(id);
  190|      0|
  191|      0|        reg.SetValue(value);
  192|      0|    }
  193|       |
  194|       |    void Processor::FloatRegisterSetDoubleValue(FloatRegisterID id, phi::f64 value)
  195|      0|    {
  196|      0|        if (!RegisterAccessTypeMatches(m_CurrentInstructionAccessType, RegisterAccessType::Double))
  197|      0|        {
  198|      0|            PHI_LOG_WARN("Mismatch for instruction access type");
  199|      0|        }
  200|      0|
  201|      0|        if (id == FloatRegisterID::F31)
  202|      0|        {
  203|      0|            Raise(Exception::RegisterOutOfBounds);
  204|      0|            return;
  205|      0|        }
  206|      0|
  207|      0|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  208|      0|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  209|      0|
  210|      0|        double              value_raw  = value.get();
  211|      0|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  212|      0|
  213|      0|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  214|      0|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  215|      0|
  216|      0|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  217|      0|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  218|      0|
  219|      0|        FloatRegister& first_reg = GetFloatRegister(id);
  220|      0|        FloatRegister& second_reg =
  221|      0|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  222|      0|
  223|      0|        first_reg.SetValue(first_value);
  224|      0|        second_reg.SetValue(second_value);
  225|      0|    }
  226|       |
  227|       |    StatusRegister& Processor::GetFPSR()
  228|      0|    {
  229|      0|        return m_FPSR;
  230|      0|    }
  231|       |
  232|       |    const StatusRegister& Processor::GetFPSR() const
  233|      0|    {
  234|      0|        return m_FPSR;
  235|      0|    }
  236|       |
  237|       |    phi::Boolean Processor::GetFPSRValue() const
  238|      0|    {
  239|      0|        const StatusRegister& status_reg = GetFPSR();
  240|      0|
  241|      0|        return status_reg.Get();
  242|      0|    }
  243|       |
  244|       |    void Processor::SetFPSRValue(phi::Boolean value)
  245|      0|    {
  246|      0|        StatusRegister& status_reg = GetFPSR();
  247|      0|
  248|      0|        status_reg.SetStatus(value);
  249|      0|    }
  250|       |
  251|       |    void Processor::ExecuteInstruction(const Instruction& inst)
  252|      0|    {
  253|      0|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  254|      0|
  255|      0|        inst.Execute(*this);
  256|      0|    }
  257|       |
  258|       |    void Processor::LoadProgram(ParsedProgram& programm)
  259|      0|    {
  260|      0|        m_CurrentProgram = &programm;
  261|      0|
  262|      0|        m_ProgramCounter               = 0u;
  263|      0|        m_Halted                       = false;
  264|      0|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  265|      0|    }
  266|       |
  267|       |    phi::ObserverPtr<ParsedProgram> Processor::GetCurrentProgramm() const noexcept
  268|      0|    {
  269|      0|        return m_CurrentProgram;
  270|      0|    }
  271|       |
  272|       |    void Processor::ExecuteCurrentProgram()
  273|      0|    {
  274|      0|        PHI_ASSERT(m_CurrentProgram);
  275|      0|
  276|      0|        // Don't execute a program with parsing errors
  277|      0|        if (!m_CurrentProgram->m_ParseErrors.empty())
  278|      0|        {
  279|      0|            return;
  280|      0|        }
  281|      0|
  282|      0|        m_ProgramCounter      = 0u;
  283|      0|        m_Halted              = false;
  284|      0|        m_LastRaisedException = Exception::None;
  285|      0|
  286|      0|        phi::usize StepCount{0u};
  287|      0|
  288|      0|        while (m_ProgramCounter < m_CurrentProgram->m_Instructions.size() && !m_Halted &&
  289|      0|               (m_MaxNumberOfSteps != 0u && StepCount < m_MaxNumberOfSteps))
  290|      0|        {
  291|      0|            m_NextProgramCounter = m_ProgramCounter + 1u;
  292|      0|
  293|      0|            const auto& current_instruction =
  294|      0|                    m_CurrentProgram->m_Instructions.at(m_ProgramCounter.get());
  295|      0|            ExecuteInstruction(current_instruction);
  296|      0|
  297|      0|            m_ProgramCounter = m_NextProgramCounter;
  298|      0|
  299|      0|            ++StepCount;
  300|      0|        }
  301|      0|    }
  302|       |
  303|       |    void Processor::ClearRegisters()
  304|      0|    {
  305|      0|        for (auto& reg : m_IntRegisters)
  306|      0|        {
  307|      0|            reg.SetSignedValue(0);
  308|      0|        }
  309|      0|
  310|      0|        for (auto& reg : m_FloatRegisters)
  311|      0|        {
  312|      0|            reg.SetValue(0.0f);
  313|      0|        }
  314|      0|
  315|      0|        m_FPSR.SetStatus(false);
  316|      0|    }
  317|       |
  318|       |    void Processor::ClearMemory()
  319|      0|    {
  320|      0|        m_MemoryBlock.Clear();
  321|      0|    }
  322|       |
  323|       |    void Processor::Raise(Exception exception)
  324|      0|    {
  325|      0|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  326|      0|
  327|      0|        m_LastRaisedException = exception;
  328|      0|
  329|      0|        switch (exception)
  330|      0|        {
  331|      0|            case Exception::None:
  332|      0|                PHI_ASSERT_NOT_REACHED();
  333|      0|                return;
  334|      0|            case Exception::DivideByZero:
  335|      0|                m_Halted = true;
  336|      0|                PHI_LOG_ERROR("Division through zero");
  337|      0|                return;
  338|      0|            case Exception::Overflow:
  339|      0|                PHI_LOG_WARN("Overflow");
  340|      0|                return;
  341|      0|            case Exception::Underflow:
  342|      0|                PHI_LOG_WARN("Underflow");
  343|      0|                return;
  344|      0|            case Exception::Trap:
  345|      0|                m_Halted = true;
  346|      0|                PHI_LOG_ERROR("Trapped");
  347|      0|                return;
  348|      0|            case Exception::Halt:
  349|      0|                m_Halted = true;
  350|      0|                return;
  351|      0|            case Exception::UnknownLabel:
  352|      0|                m_Halted = true;
  353|      0|                PHI_LOG_ERROR("Unknown label");
  354|      0|                return;
  355|      0|            case Exception::BadShift:
  356|      0|                PHI_LOG_ERROR("Bad shift");
  357|      0|                return;
  358|      0|            case Exception::AddressOutOfBounds:
  359|      0|                PHI_LOG_ERROR("Address out of bounds");
  360|      0|                m_Halted = true;
  361|      0|                return;
  362|      0|            case Exception::RegisterOutOfBounds:
  363|      0|                PHI_LOG_ERROR("Register out of bounds");
  364|      0|                m_Halted = true;
  365|      0|                return;
  366|      0|        }
  367|      0|
  368|      0|        PHI_ASSERT_NOT_REACHED();
  369|      0|    }
  370|       |
  371|       |    Exception Processor::GetLastRaisedException() const noexcept
  372|      0|    {
  373|      0|        return m_LastRaisedException;
  374|      0|    }
  375|       |
  376|       |    [[nodiscard]] phi::Boolean Processor::IsHalted() const noexcept
  377|      0|    {
  378|      0|        return m_Halted;
  379|      0|    }
  380|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/RegisterNames.cpp:
    1|       |#include "DLX/RegisterNames.hpp"
    2|       |
    3|       |#include "DLX/Containers/LookUpMap.hpp"
    4|       |#include <algorithm>
    5|       |#include <cctype>
    6|       |
    7|       |namespace dlx
    8|       |{
    9|       |    static constexpr std::array<std::pair<std::string_view, IntRegisterID>, 32> IntRegisterValues{
   10|       |            {{"R0", IntRegisterID::R0},   {"R1", IntRegisterID::R1},   {"R2", IntRegisterID::R2},
   11|       |             {"R3", IntRegisterID::R3},   {"R4", IntRegisterID::R4},   {"R5", IntRegisterID::R5},
   12|       |             {"R6", IntRegisterID::R6},   {"R7", IntRegisterID::R7},   {"R8", IntRegisterID::R8},
   13|       |             {"R9", IntRegisterID::R9},   {"R10", IntRegisterID::R10}, {"R11", IntRegisterID::R11},
   14|       |             {"R12", IntRegisterID::R12}, {"R13", IntRegisterID::R13}, {"R14", IntRegisterID::R14},
   15|       |             {"R15", IntRegisterID::R15}, {"R16", IntRegisterID::R16}, {"R17", IntRegisterID::R17},
   16|       |             {"R18", IntRegisterID::R18}, {"R19", IntRegisterID::R19}, {"R20", IntRegisterID::R20},
   17|       |             {"R21", IntRegisterID::R21}, {"R22", IntRegisterID::R22}, {"R23", IntRegisterID::R23},
   18|       |             {"R24", IntRegisterID::R24}, {"R25", IntRegisterID::R25}, {"R26", IntRegisterID::R26},
   19|       |             {"R27", IntRegisterID::R27}, {"R28", IntRegisterID::R28}, {"R29", IntRegisterID::R29},
   20|       |             {"R30", IntRegisterID::R30}, {"R31", IntRegisterID::R31}}};
   21|       |
   22|       |    static constexpr std::array<std::pair<std::string_view, FloatRegisterID>, 32>
   23|       |            FloatRegisterValues{{{"F0", FloatRegisterID::F0},   {"F1", FloatRegisterID::F1},
   24|       |                                 {"F2", FloatRegisterID::F2},   {"F3", FloatRegisterID::F3},
   25|       |                                 {"F4", FloatRegisterID::F4},   {"F5", FloatRegisterID::F5},
   26|       |                                 {"F6", FloatRegisterID::F6},   {"F7", FloatRegisterID::F7},
   27|       |                                 {"F8", FloatRegisterID::F8},   {"F9", FloatRegisterID::F9},
   28|       |                                 {"F10", FloatRegisterID::F10}, {"F11", FloatRegisterID::F11},
   29|       |                                 {"F12", FloatRegisterID::F12}, {"F13", FloatRegisterID::F13},
   30|       |                                 {"F14", FloatRegisterID::F14}, {"F15", FloatRegisterID::F15},
   31|       |                                 {"F16", FloatRegisterID::F16}, {"F17", FloatRegisterID::F17},
   32|       |                                 {"F18", FloatRegisterID::F18}, {"F19", FloatRegisterID::F19},
   33|       |                                 {"F20", FloatRegisterID::F20}, {"F21", FloatRegisterID::F21},
   34|       |                                 {"F22", FloatRegisterID::F22}, {"F23", FloatRegisterID::F23},
   35|       |                                 {"F24", FloatRegisterID::F24}, {"F25", FloatRegisterID::F25},
   36|       |                                 {"F26", FloatRegisterID::F26}, {"F27", FloatRegisterID::F27},
   37|       |                                 {"F28", FloatRegisterID::F28}, {"F29", FloatRegisterID::F29},
   38|       |                                 {"F30", FloatRegisterID::F30}, {"F31", FloatRegisterID::F31}}};
   39|       |
   40|       |    IntRegisterID StringToIntRegister(std::string token)
   41|  22.6k|    {
   42|  22.6k|        std::transform(token.begin(), token.end(), token.begin(), ::toupper);
   43|  22.6k|
   44|  22.6k|        static constexpr auto map =
   45|  22.6k|                LookUpMap<std::string_view, IntRegisterID, IntRegisterValues.size()>(
   46|  22.6k|                        IntRegisterValues, IntRegisterID::None);
   47|  22.6k|
   48|  22.6k|        return map.at(token.c_str());
   49|  22.6k|    }
   50|       |
   51|       |    FloatRegisterID StringToFloatRegister(std::string token)
   52|    626|    {
   53|    626|        std::transform(token.begin(), token.end(), token.begin(), ::toupper);
   54|    626|
   55|    626|        static constexpr auto map =
   56|    626|                LookUpMap<std::string_view, FloatRegisterID, FloatRegisterValues.size()>(
   57|    626|                        FloatRegisterValues, FloatRegisterID::None);
   58|    626|
   59|    626|        return map.at(token.c_str());
   60|    626|    }
   61|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionLibrary.cpp:
    1|       |#include "DLX/InstructionLibrary.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/InstructionImplementation.hpp"
    5|       |#include "DLX/InstructionInfo.hpp"
    6|       |#include <magic_enum.hpp>
    7|       |
    8|       |namespace dlx
    9|       |{
   10|       |    InstructionLibrary::InstructionLibrary()
   11|       |        : m_Instructions()
   12|    754|    {
   13|    754|        PHI_ASSERT(Initialize());
   14|    754|    }
   15|       |
   16|       |    phi::Boolean InstructionLibrary::Initialize()
   17|    754|    {
   18|    754|        /* Arithmetic */
   19|    754|
   20|    754|        // Addition
   21|    754|        InitInstruction(OpCode::ADD, ArgumentType::IntRegister, ArgumentType::IntRegister,
   22|    754|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::ADD);
   23|    754|        InitInstruction(OpCode::ADDI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   24|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::ADDI);
   25|    754|        InitInstruction(OpCode::ADDU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   26|    754|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::ADDU);
   27|    754|        InitInstruction(OpCode::ADDUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   28|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::ADDUI);
   29|    754|        InitInstruction(OpCode::ADDF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   30|    754|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::ADDF);
   31|    754|        InitInstruction(OpCode::ADDD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   32|    754|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::ADDD);
   33|    754|
   34|    754|        // Subtraction
   35|    754|        InitInstruction(OpCode::SUB, ArgumentType::IntRegister, ArgumentType::IntRegister,
   36|    754|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SUB);
   37|    754|        InitInstruction(OpCode::SUBI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   38|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SUBI);
   39|    754|        InitInstruction(OpCode::SUBU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   40|    754|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SUBU);
   41|    754|        InitInstruction(OpCode::SUBUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   42|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SUBUI);
   43|    754|        InitInstruction(OpCode::SUBF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   44|    754|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::SUBF);
   45|    754|        InitInstruction(OpCode::SUBD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   46|    754|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::SUBD);
   47|    754|
   48|    754|        // Multiplikation
   49|    754|        InitInstruction(OpCode::MULT, ArgumentType::IntRegister, ArgumentType::IntRegister,
   50|    754|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::MULT);
   51|    754|        InitInstruction(OpCode::MULTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   52|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::MULTI);
   53|    754|        InitInstruction(OpCode::MULTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   54|    754|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::MULTU);
   55|    754|        InitInstruction(OpCode::MULTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   56|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::MULTUI);
   57|    754|        InitInstruction(OpCode::MULTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   58|    754|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::MULTF);
   59|    754|        InitInstruction(OpCode::MULTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   60|    754|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::MULTD);
   61|    754|
   62|    754|        // Division
   63|    754|        InitInstruction(OpCode::DIV, ArgumentType::IntRegister, ArgumentType::IntRegister,
   64|    754|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::DIV);
   65|    754|        InitInstruction(OpCode::DIVI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   66|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::DIVI);
   67|    754|        InitInstruction(OpCode::DIVU, ArgumentType::IntRegister, ArgumentType::IntRegister,
   68|    754|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::DIVU);
   69|    754|        InitInstruction(OpCode::DIVUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   70|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::DIVUI);
   71|    754|        InitInstruction(OpCode::DIVF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   72|    754|                        ArgumentType::FloatRegister, RegisterAccessType::Float, impl::DIVF);
   73|    754|        InitInstruction(OpCode::DIVD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
   74|    754|                        ArgumentType::FloatRegister, RegisterAccessType::Double, impl::DIVD);
   75|    754|
   76|    754|        // Shift left logical
   77|    754|        InitInstruction(OpCode::SLL, ArgumentType::IntRegister, ArgumentType::IntRegister,
   78|    754|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SLL);
   79|    754|        InitInstruction(OpCode::SLLI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   80|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SLLI);
   81|    754|
   82|    754|        // Shift right logical
   83|    754|        InitInstruction(OpCode::SRL, ArgumentType::IntRegister, ArgumentType::IntRegister,
   84|    754|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SRL);
   85|    754|        InitInstruction(OpCode::SRLI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   86|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SRLI);
   87|    754|
   88|    754|        // Shift left arithmetic
   89|    754|        InitInstruction(OpCode::SLA, ArgumentType::IntRegister, ArgumentType::IntRegister,
   90|    754|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SLA);
   91|    754|        InitInstruction(OpCode::SLAI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   92|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SLAI);
   93|    754|
   94|    754|        // Shift right arithmetic
   95|    754|        InitInstruction(OpCode::SRA, ArgumentType::IntRegister, ArgumentType::IntRegister,
   96|    754|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::SRA);
   97|    754|        InitInstruction(OpCode::SRAI, ArgumentType::IntRegister, ArgumentType::IntRegister,
   98|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::SRAI);
   99|    754|
  100|    754|        /* Logical */
  101|    754|
  102|    754|        // And
  103|    754|        InitInstruction(OpCode::AND, ArgumentType::IntRegister, ArgumentType::IntRegister,
  104|    754|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::AND);
  105|    754|        InitInstruction(OpCode::ANDI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  106|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::ANDI);
  107|    754|
  108|    754|        // Or
  109|    754|        InitInstruction(OpCode::OR, ArgumentType::IntRegister, ArgumentType::IntRegister,
  110|    754|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::OR);
  111|    754|        InitInstruction(OpCode::ORI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  112|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::ORI);
  113|    754|
  114|    754|        // Xor
  115|    754|        InitInstruction(OpCode::XOR, ArgumentType::IntRegister, ArgumentType::IntRegister,
  116|    754|                        ArgumentType::IntRegister, RegisterAccessType::Ignored, impl::XOR);
  117|    754|        InitInstruction(OpCode::XORI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  118|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Ignored, impl::XORI);
  119|    754|
  120|    754|        /* Conditionals */
  121|    754|
  122|    754|        // Set less than
  123|    754|        InitInstruction(OpCode::SLT, ArgumentType::IntRegister, ArgumentType::IntRegister,
  124|    754|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SLT);
  125|    754|        InitInstruction(OpCode::SLTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  126|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SLTI);
  127|    754|        InitInstruction(OpCode::SLTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  128|    754|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SLTU);
  129|    754|        InitInstruction(OpCode::SLTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  130|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SLTUI);
  131|    754|        InitInstruction(OpCode::LTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  132|    754|                        ArgumentType::None, RegisterAccessType::Float, impl::LTF);
  133|    754|        InitInstruction(OpCode::LTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  134|    754|                        ArgumentType::None, RegisterAccessType::Double, impl::LTD);
  135|    754|
  136|    754|        // Set greater than
  137|    754|        InitInstruction(OpCode::SGT, ArgumentType::IntRegister, ArgumentType::IntRegister,
  138|    754|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SGT);
  139|    754|        InitInstruction(OpCode::SGTI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  140|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SGTI);
  141|    754|        InitInstruction(OpCode::SGTU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  142|    754|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SGTU);
  143|    754|        InitInstruction(OpCode::SGTUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  144|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SGTUI);
  145|    754|        InitInstruction(OpCode::GTF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  146|    754|                        ArgumentType::None, RegisterAccessType::Float, impl::GTF);
  147|    754|        InitInstruction(OpCode::GTD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  148|    754|                        ArgumentType::None, RegisterAccessType::Double, impl::GTD);
  149|    754|
  150|    754|        // Set less than or equal
  151|    754|        InitInstruction(OpCode::SLE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  152|    754|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SLE);
  153|    754|        InitInstruction(OpCode::SLEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  154|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SLEI);
  155|    754|        InitInstruction(OpCode::SLEU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  156|    754|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SLEU);
  157|    754|        InitInstruction(OpCode::SLEUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  158|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SLEUI);
  159|    754|        InitInstruction(OpCode::LEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  160|    754|                        ArgumentType::None, RegisterAccessType::Float, impl::LEF);
  161|    754|        InitInstruction(OpCode::LED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  162|    754|                        ArgumentType::None, RegisterAccessType::Double, impl::LED);
  163|    754|
  164|    754|        // Set greater than or equal
  165|    754|        InitInstruction(OpCode::SGE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  166|    754|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SGE);
  167|    754|        InitInstruction(OpCode::SGEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  168|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SGEI);
  169|    754|        InitInstruction(OpCode::SGEU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  170|    754|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SGEU);
  171|    754|        InitInstruction(OpCode::SGEUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  172|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SGEUI);
  173|    754|        InitInstruction(OpCode::GEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  174|    754|                        ArgumentType::None, RegisterAccessType::Float, impl::GEF);
  175|    754|        InitInstruction(OpCode::GED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  176|    754|                        ArgumentType::None, RegisterAccessType::Double, impl::GED);
  177|    754|
  178|    754|        // Set equal
  179|    754|        InitInstruction(OpCode::SEQ, ArgumentType::IntRegister, ArgumentType::IntRegister,
  180|    754|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SEQ);
  181|    754|        InitInstruction(OpCode::SEQI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  182|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SEQI);
  183|    754|        InitInstruction(OpCode::SEQU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  184|    754|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SEQU);
  185|    754|        InitInstruction(OpCode::SEQUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  186|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SEQUI);
  187|    754|        InitInstruction(OpCode::EQF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  188|    754|                        ArgumentType::None, RegisterAccessType::Float, impl::EQF);
  189|    754|        InitInstruction(OpCode::EQD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  190|    754|                        ArgumentType::None, RegisterAccessType::Double, impl::EQD);
  191|    754|
  192|    754|        // Set not equal
  193|    754|        InitInstruction(OpCode::SNE, ArgumentType::IntRegister, ArgumentType::IntRegister,
  194|    754|                        ArgumentType::IntRegister, RegisterAccessType::Signed, impl::SNE);
  195|    754|        InitInstruction(OpCode::SNEI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  196|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Signed, impl::SNEI);
  197|    754|        InitInstruction(OpCode::SNEU, ArgumentType::IntRegister, ArgumentType::IntRegister,
  198|    754|                        ArgumentType::IntRegister, RegisterAccessType::Unsigned, impl::SNEU);
  199|    754|        InitInstruction(OpCode::SNEUI, ArgumentType::IntRegister, ArgumentType::IntRegister,
  200|    754|                        ArgumentType::ImmediateInteger, RegisterAccessType::Unsigned, impl::SNEUI);
  201|    754|        InitInstruction(OpCode::NEF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  202|    754|                        ArgumentType::None, RegisterAccessType::Float, impl::NEF);
  203|    754|        InitInstruction(OpCode::NED, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  204|    754|                        ArgumentType::None, RegisterAccessType::Double, impl::NED);
  205|    754|
  206|    754|        /* Conditional branching */
  207|    754|
  208|    754|        // Branch equal zero
  209|    754|        InitInstruction(OpCode::BEQZ, ArgumentType::IntRegister, ArgumentType::Label,
  210|    754|                        ArgumentType::None, RegisterAccessType::Ignored, impl::BEQZ);
  211|    754|
  212|    754|        // Branch not equal zero
  213|    754|        InitInstruction(OpCode::BNEZ, ArgumentType::IntRegister, ArgumentType::Label,
  214|    754|                        ArgumentType::None, RegisterAccessType::Ignored, impl::BNEZ);
  215|    754|
  216|    754|        // Branch floating point true
  217|    754|        InitInstruction(OpCode::BFPT, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  218|    754|                        RegisterAccessType::Ignored, impl::BFPT);
  219|    754|
  220|    754|        // Branch floating point false
  221|    754|        InitInstruction(OpCode::BFPF, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  222|    754|                        RegisterAccessType::Ignored, impl::BFPF);
  223|    754|
  224|    754|        /* Unconditional branching */
  225|    754|
  226|    754|        // Jump
  227|    754|        InitInstruction(OpCode::J, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  228|    754|                        RegisterAccessType::None, impl::J);
  229|    754|
  230|    754|        // Jump to register
  231|    754|        InitInstruction(OpCode::JR, ArgumentType::IntRegister, ArgumentType::None,
  232|    754|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::JR);
  233|    754|
  234|    754|        // Jump and link
  235|    754|        InitInstruction(OpCode::JAL, ArgumentType::Label, ArgumentType::None, ArgumentType::None,
  236|    754|                        RegisterAccessType::Unsigned, impl::JAL);
  237|    754|
  238|    754|        // Jump and link to register
  239|    754|        InitInstruction(OpCode::JALR, ArgumentType::IntRegister, ArgumentType::None,
  240|    754|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::JALR);
  241|    754|
  242|    754|        /* Loading data */
  243|    754|
  244|    754|        // Load high immediate
  245|    754|        InitInstruction(OpCode::LHI, ArgumentType::IntRegister, ArgumentType::ImmediateInteger,
  246|    754|                        ArgumentType::None, RegisterAccessType::Signed, impl::LHI);
  247|    754|
  248|    754|        // Load byte
  249|    754|        InitInstruction(OpCode::LB, ArgumentType::IntRegister,
  250|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  251|    754|                        ArgumentType::None, RegisterAccessType::Signed, impl::LB);
  252|    754|
  253|    754|        // Load byte unsigned
  254|    754|        InitInstruction(OpCode::LBU, ArgumentType::IntRegister,
  255|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  256|    754|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LBU);
  257|    754|
  258|    754|        // Load half word
  259|    754|        InitInstruction(OpCode::LH, ArgumentType::IntRegister,
  260|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  261|    754|                        ArgumentType::None, RegisterAccessType::Signed, impl::LH);
  262|    754|
  263|    754|        // Load half word unsigned
  264|    754|        InitInstruction(OpCode::LHU, ArgumentType::IntRegister,
  265|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  266|    754|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LHU);
  267|    754|
  268|    754|        // Load word
  269|    754|        InitInstruction(OpCode::LW, ArgumentType::IntRegister,
  270|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  271|    754|                        ArgumentType::None, RegisterAccessType::Signed, impl::LW);
  272|    754|
  273|    754|        // Load word unsigned
  274|    754|        InitInstruction(OpCode::LWU, ArgumentType::IntRegister,
  275|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  276|    754|                        ArgumentType::None, RegisterAccessType::Unsigned, impl::LWU);
  277|    754|
  278|    754|        // Load float
  279|    754|        InitInstruction(OpCode::LF, ArgumentType::FloatRegister,
  280|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  281|    754|                        ArgumentType::None, RegisterAccessType::Float, impl::LF);
  282|    754|
  283|    754|        // Load double
  284|    754|        InitInstruction(OpCode::LD, ArgumentType::FloatRegister,
  285|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  286|    754|                        ArgumentType::None, RegisterAccessType::Double, impl::LD);
  287|    754|
  288|    754|        /* Storing data */
  289|    754|
  290|    754|        // Store byte
  291|    754|        InitInstruction(OpCode::SB,
  292|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  293|    754|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  294|    754|                        impl::SB);
  295|    754|
  296|    754|        // Store byte unsigned
  297|    754|        InitInstruction(OpCode::SBU,
  298|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  299|    754|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  300|    754|                        impl::SBU);
  301|    754|
  302|    754|        // Store half word
  303|    754|        InitInstruction(OpCode::SH,
  304|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  305|    754|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  306|    754|                        impl::SH);
  307|    754|
  308|    754|        // Store half word unsigned
  309|    754|        InitInstruction(OpCode::SHU,
  310|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  311|    754|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  312|    754|                        impl::SHU);
  313|    754|
  314|    754|        // Store word
  315|    754|        InitInstruction(OpCode::SW,
  316|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  317|    754|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Signed,
  318|    754|                        impl::SW);
  319|    754|
  320|    754|        // Store word unsigned
  321|    754|        InitInstruction(OpCode::SWU,
  322|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  323|    754|                        ArgumentType::IntRegister, ArgumentType::None, RegisterAccessType::Unsigned,
  324|    754|                        impl::SWU);
  325|    754|
  326|    754|        // Store float
  327|    754|        InitInstruction(OpCode::SF,
  328|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  329|    754|                        ArgumentType::FloatRegister, ArgumentType::None, RegisterAccessType::Float,
  330|    754|                        impl::SF);
  331|    754|
  332|    754|        // Store double
  333|    754|        InitInstruction(OpCode::SD,
  334|    754|                        ArgumentType::ImmediateInteger | ArgumentType::AddressDisplacement,
  335|    754|                        ArgumentType::FloatRegister, ArgumentType::None, RegisterAccessType::Double,
  336|    754|                        impl::SD);
  337|    754|
  338|    754|        /* Moving data */
  339|    754|
  340|    754|        // Move float
  341|    754|        InitInstruction(OpCode::MOVF, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  342|    754|                        ArgumentType::None, RegisterAccessType::Float, impl::MOVF);
  343|    754|
  344|    754|        // Move double
  345|    754|        InitInstruction(OpCode::MOVD, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  346|    754|                        ArgumentType::None, RegisterAccessType::Double, impl::MOVD);
  347|    754|
  348|    754|        // Move float to int
  349|    754|        InitInstruction(OpCode::MOVFP2I, ArgumentType::IntRegister, ArgumentType::FloatRegister,
  350|    754|                        ArgumentType::None, RegisterAccessType::Float, impl::MOVFP2I);
  351|    754|
  352|    754|        // Move int to float
  353|    754|        InitInstruction(OpCode::MOVI2FP, ArgumentType::FloatRegister, ArgumentType::IntRegister,
  354|    754|                        ArgumentType::None, RegisterAccessType::Float, impl::MOVI2FP);
  355|    754|
  356|    754|        /* Converting data */
  357|    754|
  358|    754|        // Convert float to double
  359|    754|        InitInstruction(OpCode::CVTF2D, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  360|    754|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTF2D);
  361|    754|
  362|    754|        // Convert float to int
  363|    754|        InitInstruction(OpCode::CVTF2I, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  364|    754|                        ArgumentType::None, RegisterAccessType::Float, impl::CVTF2I);
  365|    754|
  366|    754|        // Convert double to float
  367|    754|        InitInstruction(OpCode::CVTD2F, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  368|    754|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTD2F);
  369|    754|
  370|    754|        // Convert double to int
  371|    754|        InitInstruction(OpCode::CVTD2I, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  372|    754|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTD2I);
  373|    754|
  374|    754|        // Convert int to float
  375|    754|        InitInstruction(OpCode::CVTI2F, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  376|    754|                        ArgumentType::None, RegisterAccessType::Float, impl::CVTI2F);
  377|    754|
  378|    754|        // Convert int to double
  379|    754|        InitInstruction(OpCode::CVTI2D, ArgumentType::FloatRegister, ArgumentType::FloatRegister,
  380|    754|                        ArgumentType::None, RegisterAccessType::MixedFloatDouble, impl::CVTI2D);
  381|    754|
  382|    754|        /* Special */
  383|    754|
  384|    754|        // Trap
  385|    754|        InitInstruction(OpCode::TRAP, ArgumentType::ImmediateInteger, ArgumentType::None,
  386|    754|                        ArgumentType::None, RegisterAccessType::None, impl::TRAP);
  387|    754|
  388|    754|        // Halt
  389|    754|        InitInstruction(OpCode::HALT, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  390|    754|                        RegisterAccessType::None, impl::HALT);
  391|    754|
  392|    754|        // No operation
  393|    754|        InitInstruction(OpCode::NOP, ArgumentType::None, ArgumentType::None, ArgumentType::None,
  394|    754|                        RegisterAccessType::None, impl::NOP);
  395|    754|
  396|    754|        return true;
  397|    754|    }
  398|       |
  399|       |    const InstructionInfo& InstructionLibrary::LookUp(OpCode instruction) const noexcept
  400|  95.2k|    {
  401|  95.2k|        return m_Instructions.at(static_cast<std::size_t>(instruction));
  402|  95.2k|    }
  403|       |
  404|       |    void InstructionLibrary::InitInstruction(OpCode opcode, ArgumentType arg1, ArgumentType arg2,
  405|       |                                             ArgumentType        arg3,
  406|       |                                             RegisterAccessType  register_access_type,
  407|       |                                             InstructionExecutor executor)
  408|  84.4k|    {
  409|  84.4k|        PHI_ASSERT(LookUp(opcode).GetExecutor() == nullptr, "Already registered instruction {}",
  410|  84.4k|                   magic_enum::enum_name(opcode));
  411|  84.4k|
  412|  84.4k|        m_Instructions.at(static_cast<std::size_t>(opcode)) =
  413|  84.4k|                InstructionInfo(opcode, arg1, arg2, arg3, register_access_type, executor);
  414|  84.4k|    }
  415|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/StatusRegister.cpp:
    1|       |#include "DLX/StatusRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void StatusRegister::SetStatus(phi::Boolean value)
    6|      0|    {
    7|      0|        m_Value = value;
    8|      0|    }
    9|       |
   10|       |    phi::Boolean StatusRegister::Get() const
   11|      0|    {
   12|      0|        return m_Value;
   13|      0|    }
   14|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/IntRegister.cpp:
    1|       |#include "DLX/IntRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    IntRegister::IntRegister()
    6|       |        : m_ValueSigned{0}
    7|       |        , m_IsReadOnly{false}
    8|      0|    {}
    9|       |
   10|       |    void IntRegister::SetSignedValue(phi::i32 val)
   11|      0|    {
   12|      0|        m_ValueSigned = val;
   13|      0|    }
   14|       |
   15|       |    void IntRegister::SetUnsignedValue(phi::u32 val)
   16|      0|    {
   17|      0|        m_ValueUnsigned = val;
   18|      0|    }
   19|       |
   20|       |    phi::i32 IntRegister::GetSignedValue() const
   21|      0|    {
   22|      0|        return m_ValueSigned;
   23|      0|    }
   24|       |
   25|       |    phi::u32 IntRegister::GetUnsignedValue() const
   26|      0|    {
   27|      0|        return m_ValueUnsigned;
   28|      0|    }
   29|       |
   30|       |    phi::Boolean IntRegister::IsReadOnly() const
   31|      0|    {
   32|      0|        return m_IsReadOnly;
   33|      0|    }
   34|       |
   35|       |    void IntRegister::SetReadOnly(phi::Boolean read_only)
   36|      0|    {
   37|      0|        m_IsReadOnly = read_only;
   38|      0|    }
   39|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionInfo.cpp:
    1|       |#include "DLX/InstructionInfo.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void InstructionInfo::Execute(Processor& processor, const InstructionArg& arg1,
    6|       |                                  const InstructionArg& arg2,
    7|       |                                  const InstructionArg& arg3) const noexcept
    8|      0|    {
    9|      0|        PHI_ASSERT(m_Executor, "No execution function defined");
   10|      0|
   11|      0|        m_Executor(processor, arg1, arg2, arg3);
   12|      0|    }
   13|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionImplementation.cpp:
    1|       |#include "DLX/InstructionImplementation.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/InstructionInfo.hpp"
    5|       |#include "DLX/Parser.hpp"
    6|       |#include "DLX/Processor.hpp"
    7|       |#include "DLX/RegisterNames.hpp"
    8|       |#include "Phi/Core/Assert.hpp"
    9|       |#include "Phi/Core/Boolean.hpp"
   10|       |#include "Phi/Core/Types.hpp"
   11|       |#include <string_view>
   12|       |
   13|       |namespace dlx
   14|       |{
   15|       |    static std::int32_t clear_top_n_bits(std::int32_t value, std::int32_t n)
   16|      0|    {
   17|      0|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behaviour");
   18|      0|
   19|      0|        return value & ~(-1 << (32 - n));
   20|      0|    }
   21|       |
   22|       |    static void JumpToLabel(Processor& processor, std::string_view label_name)
   23|      0|    {
   24|      0|        // Lookup the label
   25|      0|        const phi::ObserverPtr<ParsedProgram> program = processor.GetCurrentProgramm();
   26|      0|        PHI_ASSERT(program);
   27|      0|
   28|      0|        std::string label(label_name.data(), label_name.size());
   29|      0|        if (program->m_JumpData.find(label) == program->m_JumpData.end())
   30|      0|        {
   31|      0|            PHI_LOG_ERROR("Unable to find jump label {}", label_name);
   32|      0|            processor.Raise(Exception::UnknownLabel);
   33|      0|            return;
   34|      0|        }
   35|      0|
   36|      0|        // Set program counter
   37|      0|        processor.m_NextProgramCounter = program->m_JumpData.at(label);
   38|      0|    }
   39|       |
   40|       |    static void JumpToRegister(Processor& processor, IntRegisterID reg_id)
   41|      0|    {
   42|      0|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   43|      0|
   44|      0|        phi::u32 max_address =
   45|      0|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   46|      0|        if (address >= max_address)
   47|      0|        {
   48|      0|            processor.Raise(Exception::AddressOutOfBounds);
   49|      0|            return;
   50|      0|        }
   51|      0|
   52|      0|        processor.m_NextProgramCounter = address.get();
   53|      0|    }
   54|       |
   55|       |    static std::optional<phi::i32> CalculateDisplacementAddress(
   56|       |            Processor& processor, const InstructionArg::AddressDisplacement& adr_displacement)
   57|      0|    {
   58|      0|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   59|      0|
   60|      0|        phi::i32 address = adr_displacement.displacement + register_value;
   61|      0|
   62|      0|        if (address < 0)
   63|      0|        {
   64|      0|            processor.Raise(Exception::AddressOutOfBounds);
   65|      0|            return {};
   66|      0|        }
   67|      0|
   68|      0|        return address;
   69|      0|    }
   70|       |
   71|       |    static std::optional<phi::i32> GetLoadStoreAddress(Processor&           processor,
   72|       |                                                       const InstructionArg argument)
   73|      0|    {
   74|      0|        if (argument.GetType() == ArgumentType::ImmediateInteger)
   75|      0|        {
   76|      0|            const auto& imm_value = argument.AsImmediateValue();
   77|      0|
   78|      0|            if (imm_value.signed_value < 0)
   79|      0|            {
   80|      0|                return {};
   81|      0|            }
   82|      0|
   83|      0|            return imm_value.signed_value;
   84|      0|        }
   85|      0|
   86|      0|        if (argument.GetType() == ArgumentType::AddressDisplacement)
   87|      0|        {
   88|      0|            const auto& adr_displacement = argument.AsAddressDisplacement();
   89|      0|            return CalculateDisplacementAddress(processor, adr_displacement);
   90|      0|        }
   91|      0|
   92|      0|        PHI_ASSERT_NOT_REACHED();
   93|      0|    }
   94|       |
   95|       |    static void SafeWriteInteger(Processor& processor, IntRegisterID dest_reg, phi::i64 value)
   96|      0|    {
   97|      0|        constexpr phi::i64 min = phi::i32::limits_type::min();
   98|      0|        constexpr phi::i64 max = phi::i32::limits_type::max();
   99|      0|
  100|      0|        // Check for underflow
  101|      0|        if (value < min)
  102|      0|        {
  103|      0|            processor.Raise(Exception::Underflow);
  104|      0|
  105|      0|            value = max + (value % (min - 1));
  106|      0|        }
  107|      0|        // Check for overflow
  108|      0|        else if (value > max)
  109|      0|        {
  110|      0|            processor.Raise(Exception::Overflow);
  111|      0|
  112|      0|            value = min + (value % (max + 1));
  113|      0|        }
  114|      0|
  115|      0|        PHI_ASSERT(value >= min);
  116|      0|        PHI_ASSERT(value <= max);
  117|      0|
  118|      0|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.get()));
  119|      0|    }
  120|       |
  121|       |    static void SafeWriteInteger(Processor& processor, IntRegisterID dest_reg, phi::u64 value)
  122|      0|    {
  123|      0|        constexpr phi::u64 min = phi::u32::limits_type::min();
  124|      0|        constexpr phi::u64 max = phi::u32::limits_type::max();
  125|      0|
  126|      0|        // Check for overflow
  127|      0|        if (value > max)
  128|      0|        {
  129|      0|            processor.Raise(Exception::Overflow);
  130|      0|
  131|      0|            value %= max + 1u;
  132|      0|        }
  133|      0|
  134|      0|        PHI_ASSERT(value <= max);
  135|      0|
  136|      0|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.get()));
  137|      0|    }
  138|       |
  139|       |    static void Addition(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs, phi::i32 rhs)
  140|      0|    {
  141|      0|        phi::i64 res = phi::i64(lhs) + rhs;
  142|      0|
  143|      0|        SafeWriteInteger(processor, dest_reg, res);
  144|      0|    }
  145|       |
  146|       |    static void Addition(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs, phi::u32 rhs)
  147|      0|    {
  148|      0|        phi::u64 res = phi::u64(lhs) + rhs;
  149|      0|
  150|      0|        SafeWriteInteger(processor, dest_reg, res);
  151|      0|    }
  152|       |
  153|       |    static void Subtraction(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  154|       |                            phi::i32 rhs)
  155|      0|    {
  156|      0|        phi::i64 res = phi::i64(lhs) - rhs;
  157|      0|
  158|      0|        SafeWriteInteger(processor, dest_reg, res);
  159|      0|    }
  160|       |
  161|       |    static void Subtraction(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  162|       |                            phi::u32 rhs)
  163|      0|    {
  164|      0|        constexpr phi::u32 max = phi::u32::limits_type::max();
  165|      0|
  166|      0|        if (lhs < rhs)
  167|      0|        {
  168|      0|            processor.Raise(Exception::Underflow);
  169|      0|
  170|      0|            phi::u64 res = max - rhs + lhs + 1u;
  171|      0|            SafeWriteInteger(processor, dest_reg, res);
  172|      0|            return;
  173|      0|        }
  174|      0|
  175|      0|        phi::u64 res = phi::u64(lhs) - rhs;
  176|      0|
  177|      0|        SafeWriteInteger(processor, dest_reg, res);
  178|      0|    }
  179|       |
  180|       |    static void Multiplication(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs,
  181|       |                               phi::i32 rhs)
  182|      0|    {
  183|      0|        phi::i64 res = phi::i64(lhs) * rhs;
  184|      0|
  185|      0|        SafeWriteInteger(processor, dest_reg, res);
  186|      0|    }
  187|       |
  188|       |    static void Multiplication(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs,
  189|       |                               phi::u32 rhs)
  190|      0|    {
  191|      0|        phi::u64 res = phi::u64(lhs) * rhs;
  192|      0|
  193|      0|        SafeWriteInteger(processor, dest_reg, res);
  194|      0|    }
  195|       |
  196|       |    static void Division(Processor& processor, IntRegisterID dest_reg, phi::i32 lhs, phi::i32 rhs)
  197|      0|    {
  198|      0|        if (rhs == 0)
  199|      0|        {
  200|      0|            processor.Raise(Exception::DivideByZero);
  201|      0|            return;
  202|      0|        }
  203|      0|
  204|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  205|      0|
  206|      0|        SafeWriteInteger(processor, dest_reg, res);
  207|      0|    }
  208|       |
  209|       |    static void Division(Processor& processor, IntRegisterID dest_reg, phi::u32 lhs, phi::u32 rhs)
  210|      0|    {
  211|      0|        if (rhs == 0u)
  212|      0|        {
  213|      0|            processor.Raise(Exception::DivideByZero);
  214|      0|            return;
  215|      0|        }
  216|      0|
  217|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  218|      0|
  219|      0|        SafeWriteInteger(processor, dest_reg, res);
  220|      0|    }
  221|       |
  222|       |    static void ShiftRightLogical(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  223|       |                                  phi::i32 shift)
  224|      0|    {
  225|      0|        // Prevent undefined behavior by shifting by more than 31
  226|      0|        if (shift > 31)
  227|      0|        {
  228|      0|            processor.Raise(Exception::BadShift);
  229|      0|
  230|      0|            // Just set register to 0
  231|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  232|      0|            return;
  233|      0|        }
  234|      0|
  235|      0|        // Do nothing when shifting by zero to prevent undefined behavior
  236|      0|        if (shift == 0)
  237|      0|        {
  238|      0|            return;
  239|      0|        }
  240|      0|
  241|      0|        // Negative shifts are undefiend behaviour
  242|      0|        if (shift < 0)
  243|      0|        {
  244|      0|            processor.Raise(Exception::BadShift);
  245|      0|            return;
  246|      0|        }
  247|      0|
  248|      0|        phi::i32 new_value = base.get() >> shift.get();
  249|      0|
  250|      0|        new_value = clear_top_n_bits(new_value.get(), shift.get());
  251|      0|
  252|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  253|      0|    }
  254|       |
  255|       |    static void ShiftRightArithmetic(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  256|       |                                     phi::i32 shift)
  257|      0|    {
  258|      0|        // Prevent undefined behavior by shifting by more than 31
  259|      0|        if (shift > 31)
  260|      0|        {
  261|      0|            processor.Raise(Exception::BadShift);
  262|      0|
  263|      0|            // Is negative ie. sign bit is set
  264|      0|            if (base < 0)
  265|      0|            {
  266|      0|                // Set every byte to 1
  267|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  268|      0|            }
  269|      0|            else
  270|      0|            {
  271|      0|                // Set every byte to 0
  272|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  273|      0|            }
  274|      0|            return;
  275|      0|        }
  276|      0|
  277|      0|        // Negative shifts are undefined behaviour
  278|      0|        if (shift < 0)
  279|      0|        {
  280|      0|            processor.Raise(Exception::BadShift);
  281|      0|            return;
  282|      0|        }
  283|      0|
  284|      0|        phi::i32 new_value = base.get() >> shift.get();
  285|      0|
  286|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  287|      0|    }
  288|       |
  289|       |    // Behavior is the same for logical and arithmetic shifts
  290|       |    static void ShiftLeft(Processor& processor, IntRegisterID dest_reg, phi::i32 base,
  291|       |                          phi::i32 shift)
  292|      0|    {
  293|      0|        if (shift > 31)
  294|      0|        {
  295|      0|            processor.Raise(Exception::BadShift);
  296|      0|
  297|      0|            // Just set register to 0
  298|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  299|      0|            return;
  300|      0|        }
  301|      0|
  302|      0|        // Negative shifts are undefined behaviour
  303|      0|        if (shift < 0)
  304|      0|        {
  305|      0|            processor.Raise(Exception::BadShift);
  306|      0|            return;
  307|      0|        }
  308|      0|
  309|      0|        phi::i32 new_value = base.get() << shift.get();
  310|      0|
  311|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  312|      0|    }
  313|       |
  314|       |    namespace impl
  315|       |    {
  316|       |        void ADD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  317|       |                 const InstructionArg& arg3)
  318|      0|        {
  319|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  320|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  321|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  322|      0|
  323|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  324|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  325|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  326|      0|
  327|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  328|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  329|      0|
  330|      0|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  331|      0|        }
  332|       |
  333|       |        void ADDI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  334|       |                  const InstructionArg& arg3)
  335|      0|        {
  336|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  337|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  338|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  339|      0|
  340|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  341|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  342|      0|            const auto& imm_value = arg3.AsImmediateValue();
  343|      0|
  344|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  345|      0|
  346|      0|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  347|      0|        }
  348|       |
  349|       |        void ADDU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  350|       |                  const InstructionArg& arg3)
  351|      0|        {
  352|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  353|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  354|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  355|      0|
  356|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  357|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  358|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  359|      0|
  360|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  361|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  362|      0|
  363|      0|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  364|      0|        }
  365|       |
  366|       |        void ADDUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  367|       |                   const InstructionArg& arg3)
  368|      0|        {
  369|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  370|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  371|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  372|      0|
  373|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  374|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  375|      0|            const auto& imm_value = arg3.AsImmediateValue();
  376|      0|
  377|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  378|      0|
  379|      0|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  380|      0|        }
  381|       |
  382|       |        void ADDF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  383|       |                  const InstructionArg& arg3)
  384|      0|        {
  385|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  386|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  387|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  388|      0|
  389|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  390|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  391|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  392|      0|
  393|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  394|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  395|      0|
  396|      0|            const phi::f32 new_value = lhs_value + rhs_value;
  397|      0|
  398|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  399|      0|        }
  400|       |
  401|       |        void ADDD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  402|       |                  const InstructionArg& arg3)
  403|      0|        {
  404|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  405|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  406|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  407|      0|
  408|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  409|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  410|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  411|      0|
  412|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  413|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  414|      0|
  415|      0|            const phi::f64 new_value = lhs_value + rhs_value;
  416|      0|
  417|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  418|      0|        }
  419|       |
  420|       |        void SUB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  421|       |                 const InstructionArg& arg3)
  422|      0|        {
  423|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  424|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  425|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  426|      0|
  427|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  428|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  429|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  430|      0|
  431|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  432|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  433|      0|
  434|      0|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  435|      0|        }
  436|       |
  437|       |        void SUBI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  438|       |                  const InstructionArg& arg3)
  439|      0|        {
  440|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  441|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  442|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  443|      0|
  444|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  445|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  446|      0|            const auto& imm_value = arg3.AsImmediateValue();
  447|      0|
  448|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  449|      0|
  450|      0|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  451|      0|        }
  452|       |
  453|       |        void SUBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  454|       |                  const InstructionArg& arg3)
  455|      0|        {
  456|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  457|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  458|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  459|      0|
  460|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  461|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  462|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  463|      0|
  464|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  465|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  466|      0|
  467|      0|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  468|      0|        }
  469|       |
  470|       |        void SUBUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  471|       |                   const InstructionArg& arg3)
  472|      0|        {
  473|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  474|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  475|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  476|      0|
  477|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  478|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  479|      0|            const auto& imm_value = arg3.AsImmediateValue();
  480|      0|
  481|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  482|      0|
  483|      0|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  484|      0|        }
  485|       |
  486|       |        void SUBF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  487|       |                  const InstructionArg& arg3)
  488|      0|        {
  489|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  490|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  491|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  492|      0|
  493|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  494|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  495|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  496|      0|
  497|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  498|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  499|      0|
  500|      0|            const phi::f32 new_value = lhs_value - rhs_value;
  501|      0|
  502|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  503|      0|        }
  504|       |
  505|       |        void SUBD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  506|       |                  const InstructionArg& arg3)
  507|      0|        {
  508|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  509|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  510|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  511|      0|
  512|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  513|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  514|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  515|      0|
  516|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  517|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  518|      0|
  519|      0|            const phi::f64 new_value = lhs_value - rhs_value;
  520|      0|
  521|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  522|      0|        }
  523|       |
  524|       |        void MULT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  525|       |                  const InstructionArg& arg3)
  526|      0|        {
  527|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  528|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  529|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  530|      0|
  531|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  532|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  533|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  534|      0|
  535|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  536|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  537|      0|
  538|      0|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  539|      0|        }
  540|       |
  541|       |        void MULTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  542|       |                   const InstructionArg& arg3)
  543|      0|        {
  544|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  545|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  546|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  547|      0|
  548|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  549|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  550|      0|            const auto& imm_value = arg3.AsImmediateValue();
  551|      0|
  552|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  553|      0|
  554|      0|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  555|      0|        }
  556|       |
  557|       |        void MULTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  558|       |                   const InstructionArg& arg3)
  559|      0|        {
  560|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  561|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  562|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  563|      0|
  564|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  565|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  566|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  567|      0|
  568|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  569|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  570|      0|
  571|      0|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  572|      0|        }
  573|       |
  574|       |        void MULTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  575|       |                    const InstructionArg& arg3)
  576|      0|        {
  577|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  578|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  579|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  580|      0|
  581|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  582|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  583|      0|            const auto& imm_value = arg3.AsImmediateValue();
  584|      0|
  585|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  586|      0|
  587|      0|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  588|      0|        }
  589|       |
  590|       |        void MULTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  591|       |                   const InstructionArg& arg3)
  592|      0|        {
  593|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  594|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  595|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  596|      0|
  597|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  598|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  599|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  600|      0|
  601|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  602|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  603|      0|
  604|      0|            const phi::f32 new_value = lhs_value * rhs_value;
  605|      0|
  606|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  607|      0|        }
  608|       |
  609|       |        void MULTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  610|       |                   const InstructionArg& arg3)
  611|      0|        {
  612|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  613|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  614|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  615|      0|
  616|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  617|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  618|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  619|      0|
  620|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  621|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  622|      0|
  623|      0|            const phi::f64 new_value = lhs_value * rhs_value;
  624|      0|
  625|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  626|      0|        }
  627|       |
  628|       |        void DIV(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  629|       |                 const InstructionArg& arg3)
  630|      0|        {
  631|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  632|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  633|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  634|      0|
  635|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  636|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  637|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  638|      0|
  639|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  640|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  641|      0|
  642|      0|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  643|      0|        }
  644|       |
  645|       |        void DIVI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  646|       |                  const InstructionArg& arg3)
  647|      0|        {
  648|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  649|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  650|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  651|      0|
  652|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  653|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  654|      0|            const auto& imm_value = arg3.AsImmediateValue();
  655|      0|
  656|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  657|      0|
  658|      0|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  659|      0|        }
  660|       |
  661|       |        void DIVU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  662|       |                  const InstructionArg& arg3)
  663|      0|        {
  664|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  665|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  666|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  667|      0|
  668|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  669|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  670|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  671|      0|
  672|      0|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  673|      0|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  674|      0|
  675|      0|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  676|      0|        }
  677|       |
  678|       |        void DIVUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  679|       |                   const InstructionArg& arg3)
  680|      0|        {
  681|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  682|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  683|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  684|      0|
  685|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  686|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  687|      0|            const auto& imm_value = arg3.AsImmediateValue();
  688|      0|
  689|      0|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  690|      0|
  691|      0|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  692|      0|        }
  693|       |
  694|       |        void DIVF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  695|       |                  const InstructionArg& arg3)
  696|      0|        {
  697|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  698|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  699|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  700|      0|
  701|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  702|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  703|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  704|      0|
  705|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  706|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  707|      0|
  708|      0|            if (rhs_value.get() == 0.0f)
  709|      0|            {
  710|      0|                processor.Raise(Exception::DivideByZero);
  711|      0|                return;
  712|      0|            }
  713|      0|
  714|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  715|      0|
  716|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  717|      0|        }
  718|       |
  719|       |        void DIVD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  720|       |                  const InstructionArg& arg3)
  721|      0|        {
  722|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
  723|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
  724|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::FloatRegister);
  725|      0|
  726|      0|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  727|      0|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  728|      0|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  729|      0|
  730|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  731|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  732|      0|
  733|      0|            if (rhs_value.get() == 0.0)
  734|      0|            {
  735|      0|                processor.Raise(Exception::DivideByZero);
  736|      0|                return;
  737|      0|            }
  738|      0|
  739|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  740|      0|
  741|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  742|      0|        }
  743|       |
  744|       |        void SLL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  745|       |                 const InstructionArg& arg3)
  746|      0|        {
  747|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  748|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  749|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  750|      0|
  751|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  752|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  753|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  754|      0|
  755|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  756|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  757|      0|
  758|      0|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  759|      0|        }
  760|       |
  761|       |        void SLLI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  762|       |                  const InstructionArg& arg3)
  763|      0|        {
  764|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  765|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  766|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  767|      0|
  768|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  769|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  770|      0|            const auto& imm_value = arg3.AsImmediateValue();
  771|      0|
  772|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  773|      0|            phi::i32 shift_value = imm_value.signed_value;
  774|      0|
  775|      0|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  776|      0|        }
  777|       |
  778|       |        void SRL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  779|       |                 const InstructionArg& arg3)
  780|      0|        {
  781|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  782|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  783|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  784|      0|
  785|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  786|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  787|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  788|      0|
  789|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  790|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  791|      0|
  792|      0|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  793|      0|        }
  794|       |
  795|       |        void SRLI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  796|       |                  const InstructionArg& arg3)
  797|      0|        {
  798|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  799|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  800|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  801|      0|
  802|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  803|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  804|      0|            const auto& imm_value = arg3.AsImmediateValue();
  805|      0|
  806|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  807|      0|            phi::i32 shift_value = imm_value.signed_value;
  808|      0|
  809|      0|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  810|      0|        }
  811|       |
  812|       |        void SLA(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  813|       |                 const InstructionArg& arg3)
  814|      0|        {
  815|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  816|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  817|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  818|      0|
  819|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  820|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  821|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  822|      0|
  823|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  824|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  825|      0|
  826|      0|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  827|      0|        }
  828|       |
  829|       |        void SLAI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  830|       |                  const InstructionArg& arg3)
  831|      0|        {
  832|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  833|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  834|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  835|      0|
  836|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  837|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  838|      0|            const auto& imm_value = arg3.AsImmediateValue();
  839|      0|
  840|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  841|      0|            phi::i32 shift_value = imm_value.signed_value;
  842|      0|
  843|      0|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  844|      0|        }
  845|       |
  846|       |        void SRA(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  847|       |                 const InstructionArg& arg3)
  848|      0|        {
  849|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  850|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  851|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  852|      0|
  853|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  854|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  855|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  856|      0|
  857|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  858|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  859|      0|
  860|      0|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  861|      0|        }
  862|       |
  863|       |        void SRAI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  864|       |                  const InstructionArg& arg3)
  865|      0|        {
  866|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  867|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  868|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  869|      0|
  870|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  871|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  872|      0|            const auto& imm_value = arg3.AsImmediateValue();
  873|      0|
  874|      0|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  875|      0|            phi::i32 shift_value = imm_value.signed_value;
  876|      0|
  877|      0|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  878|      0|        }
  879|       |
  880|       |        void AND(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  881|       |                 const InstructionArg& arg3)
  882|      0|        {
  883|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  884|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  885|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  886|      0|
  887|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  888|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  889|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  890|      0|
  891|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  892|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  893|      0|            phi::i32 new_value = lhs_value.get() & rhs_value.get();
  894|      0|
  895|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  896|      0|        }
  897|       |
  898|       |        void ANDI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  899|       |                  const InstructionArg& arg3)
  900|      0|        {
  901|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  902|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  903|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  904|      0|
  905|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  906|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  907|      0|            const auto& imm_value = arg3.AsImmediateValue();
  908|      0|
  909|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  910|      0|            phi::i32 new_value = src_value.get() & imm_value.signed_value.get();
  911|      0|
  912|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  913|      0|        }
  914|       |
  915|       |        void OR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  916|       |                const InstructionArg& arg3)
  917|      0|        {
  918|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  919|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  920|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  921|      0|
  922|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  923|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  924|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  925|      0|
  926|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  927|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  928|      0|            phi::i32 new_value = lhs_value.get() | rhs_value.get();
  929|      0|
  930|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  931|      0|        }
  932|       |
  933|       |        void ORI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  934|       |                 const InstructionArg& arg3)
  935|      0|        {
  936|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  937|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  938|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  939|      0|
  940|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  941|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  942|      0|            const auto& imm_value = arg3.AsImmediateValue();
  943|      0|
  944|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  945|      0|            phi::i32 new_value = src_value.get() | imm_value.signed_value.get();
  946|      0|
  947|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  948|      0|        }
  949|       |
  950|       |        void XOR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  951|       |                 const InstructionArg& arg3)
  952|      0|        {
  953|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  954|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  955|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  956|      0|
  957|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  958|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  959|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  960|      0|
  961|      0|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  962|      0|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  963|      0|            phi::i32 new_value = lhs_value.get() ^ rhs_value.get();
  964|      0|
  965|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  966|      0|        }
  967|       |
  968|       |        void XORI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  969|       |                  const InstructionArg& arg3)
  970|      0|        {
  971|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  972|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  973|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
  974|      0|
  975|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
  976|      0|            const auto& src_reg   = arg2.AsRegisterInt();
  977|      0|            const auto& imm_value = arg3.AsImmediateValue();
  978|      0|
  979|      0|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  980|      0|            phi::i32 new_value = src_value.get() ^ imm_value.signed_value.get();
  981|      0|
  982|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  983|      0|        }
  984|       |
  985|       |        void SLT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
  986|       |                 const InstructionArg& arg3)
  987|      0|        {
  988|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
  989|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
  990|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
  991|      0|
  992|      0|            const auto& dest_reg = arg1.AsRegisterInt();
  993|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
  994|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
  995|      0|
  996|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  997|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  998|      0|
  999|      0|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
 1000|      0|
 1001|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1002|      0|        }
 1003|       |
 1004|       |        void SLTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1005|       |                  const InstructionArg& arg3)
 1006|      0|        {
 1007|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1008|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1009|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1010|      0|
 1011|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1012|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1013|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1014|      0|
 1015|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1016|      0|
 1017|      0|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
 1018|      0|
 1019|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1020|      0|        }
 1021|       |
 1022|       |        void SLTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1023|       |                  const InstructionArg& arg3)
 1024|      0|        {
 1025|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1026|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1027|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1028|      0|
 1029|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1030|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1031|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1032|      0|
 1033|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1034|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1035|      0|
 1036|      0|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
 1037|      0|
 1038|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1039|      0|        }
 1040|       |
 1041|       |        void SLTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1042|       |                   const InstructionArg& arg3)
 1043|      0|        {
 1044|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1045|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1046|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1047|      0|
 1048|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1049|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1050|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1051|      0|
 1052|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1053|      0|
 1054|      0|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
 1055|      0|
 1056|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1057|      0|        }
 1058|       |
 1059|       |        void LTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1060|       |                 const InstructionArg& arg3)
 1061|      0|        {
 1062|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1063|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1064|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1065|      0|
 1066|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1067|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1068|      0|
 1069|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1070|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1071|      0|
 1072|      0|            const phi::Boolean new_value = (lhs_value < rhs_value);
 1073|      0|
 1074|      0|            processor.SetFPSRValue(new_value);
 1075|      0|        }
 1076|       |
 1077|       |        void LTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1078|       |                 const InstructionArg& arg3)
 1079|      0|        {
 1080|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1081|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1082|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1083|      0|
 1084|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1085|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1086|      0|
 1087|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1088|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1089|      0|
 1090|      0|            const phi::Boolean new_value = (lhs_value < rhs_value);
 1091|      0|
 1092|      0|            processor.SetFPSRValue(new_value);
 1093|      0|        }
 1094|       |
 1095|       |        void SGT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1096|       |                 const InstructionArg& arg3)
 1097|      0|        {
 1098|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1099|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1100|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1101|      0|
 1102|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1103|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1104|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1105|      0|
 1106|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1107|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1108|      0|
 1109|      0|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
 1110|      0|
 1111|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1112|      0|        }
 1113|       |
 1114|       |        void SGTI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1115|       |                  const InstructionArg& arg3)
 1116|      0|        {
 1117|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1118|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1119|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1120|      0|
 1121|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1122|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1123|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1124|      0|
 1125|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1126|      0|
 1127|      0|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
 1128|      0|
 1129|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1130|      0|        }
 1131|       |
 1132|       |        void SGTU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1133|       |                  const InstructionArg& arg3)
 1134|      0|        {
 1135|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1136|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1137|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1138|      0|
 1139|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1140|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1141|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1142|      0|
 1143|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1144|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1145|      0|
 1146|      0|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
 1147|      0|
 1148|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1149|      0|        }
 1150|       |
 1151|       |        void SGTUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1152|       |                   const InstructionArg& arg3)
 1153|      0|        {
 1154|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1155|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1156|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1157|      0|
 1158|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1159|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1160|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1161|      0|
 1162|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1163|      0|
 1164|      0|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
 1165|      0|
 1166|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1167|      0|        }
 1168|       |
 1169|       |        void GTF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1170|       |                 const InstructionArg& arg3)
 1171|      0|        {
 1172|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1173|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1174|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1175|      0|
 1176|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1177|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1178|      0|
 1179|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1180|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1181|      0|
 1182|      0|            const phi::Boolean new_value = (lhs_value > rhs_value);
 1183|      0|
 1184|      0|            processor.SetFPSRValue(new_value);
 1185|      0|        }
 1186|       |
 1187|       |        void GTD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1188|       |                 const InstructionArg& arg3)
 1189|      0|        {
 1190|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1191|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1192|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1193|      0|
 1194|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1195|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1196|      0|
 1197|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1198|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1199|      0|
 1200|      0|            const phi::Boolean new_value = (lhs_value > rhs_value);
 1201|      0|
 1202|      0|            processor.SetFPSRValue(new_value);
 1203|      0|        }
 1204|       |
 1205|       |        void SLE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1206|       |                 const InstructionArg& arg3)
 1207|      0|        {
 1208|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1209|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1210|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1211|      0|
 1212|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1213|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1214|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1215|      0|
 1216|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1217|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1218|      0|
 1219|      0|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
 1220|      0|
 1221|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1222|      0|        }
 1223|       |
 1224|       |        void SLEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1225|       |                  const InstructionArg& arg3)
 1226|      0|        {
 1227|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1228|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1229|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1230|      0|
 1231|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1232|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1233|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1234|      0|
 1235|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1236|      0|
 1237|      0|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
 1238|      0|
 1239|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1240|      0|        }
 1241|       |
 1242|       |        void SLEU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1243|       |                  const InstructionArg& arg3)
 1244|      0|        {
 1245|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1246|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1247|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1248|      0|
 1249|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1250|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1251|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1252|      0|
 1253|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1254|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1255|      0|
 1256|      0|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
 1257|      0|
 1258|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1259|      0|        }
 1260|       |
 1261|       |        void SLEUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1262|       |                   const InstructionArg& arg3)
 1263|      0|        {
 1264|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1265|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1266|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1267|      0|
 1268|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1269|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1270|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1271|      0|
 1272|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1273|      0|
 1274|      0|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
 1275|      0|
 1276|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1277|      0|        }
 1278|       |
 1279|       |        void LEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1280|       |                 const InstructionArg& arg3)
 1281|      0|        {
 1282|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1283|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1284|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1285|      0|
 1286|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1287|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1288|      0|
 1289|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1290|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1291|      0|
 1292|      0|            const phi::Boolean new_value = (lhs_value <= rhs_value);
 1293|      0|
 1294|      0|            processor.SetFPSRValue(new_value);
 1295|      0|        }
 1296|       |
 1297|       |        void LED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1298|       |                 const InstructionArg& arg3)
 1299|      0|        {
 1300|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1301|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1302|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1303|      0|
 1304|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1305|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1306|      0|
 1307|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1308|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1309|      0|
 1310|      0|            const phi::Boolean new_value = (lhs_value <= rhs_value);
 1311|      0|
 1312|      0|            processor.SetFPSRValue(new_value);
 1313|      0|        }
 1314|       |
 1315|       |        void SGE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1316|       |                 const InstructionArg& arg3)
 1317|      0|        {
 1318|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1319|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1320|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1321|      0|
 1322|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1323|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1324|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1325|      0|
 1326|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1327|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1328|      0|
 1329|      0|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
 1330|      0|
 1331|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1332|      0|        }
 1333|       |
 1334|       |        void SGEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1335|       |                  const InstructionArg& arg3)
 1336|      0|        {
 1337|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1338|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1339|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1340|      0|
 1341|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1342|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1343|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1344|      0|
 1345|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1346|      0|
 1347|      0|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
 1348|      0|
 1349|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1350|      0|        }
 1351|       |
 1352|       |        void SGEU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1353|       |                  const InstructionArg& arg3)
 1354|      0|        {
 1355|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1356|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1357|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1358|      0|
 1359|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1360|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1361|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1362|      0|
 1363|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1364|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1365|      0|
 1366|      0|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
 1367|      0|
 1368|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1369|      0|        }
 1370|       |
 1371|       |        void SGEUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1372|       |                   const InstructionArg& arg3)
 1373|      0|        {
 1374|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1375|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1376|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1377|      0|
 1378|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1379|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1380|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1381|      0|
 1382|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1383|      0|
 1384|      0|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
 1385|      0|
 1386|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1387|      0|        }
 1388|       |
 1389|       |        void GEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1390|       |                 const InstructionArg& arg3)
 1391|      0|        {
 1392|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1393|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1394|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1395|      0|
 1396|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1397|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1398|      0|
 1399|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1400|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1401|      0|
 1402|      0|            const phi::Boolean new_value = (lhs_value >= rhs_value);
 1403|      0|
 1404|      0|            processor.SetFPSRValue(new_value);
 1405|      0|        }
 1406|       |
 1407|       |        void GED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1408|       |                 const InstructionArg& arg3)
 1409|      0|        {
 1410|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1411|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1412|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1413|      0|
 1414|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1415|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1416|      0|
 1417|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1418|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1419|      0|
 1420|      0|            const phi::Boolean new_value = (lhs_value >= rhs_value);
 1421|      0|
 1422|      0|            processor.SetFPSRValue(new_value);
 1423|      0|        }
 1424|       |
 1425|       |        void SEQ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1426|       |                 const InstructionArg& arg3)
 1427|      0|        {
 1428|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1429|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1430|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1431|      0|
 1432|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1433|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1434|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1435|      0|
 1436|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1437|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1438|      0|
 1439|      0|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
 1440|      0|
 1441|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1442|      0|        }
 1443|       |
 1444|       |        void SEQI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1445|       |                  const InstructionArg& arg3)
 1446|      0|        {
 1447|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1448|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1449|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1450|      0|
 1451|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1452|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1453|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1454|      0|
 1455|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1456|      0|
 1457|      0|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
 1458|      0|
 1459|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1460|      0|        }
 1461|       |
 1462|       |        void SEQU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1463|       |                  const InstructionArg& arg3)
 1464|      0|        {
 1465|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1466|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1467|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1468|      0|
 1469|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1470|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1471|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1472|      0|
 1473|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1474|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1475|      0|
 1476|      0|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
 1477|      0|
 1478|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1479|      0|        }
 1480|       |
 1481|       |        void SEQUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1482|       |                   const InstructionArg& arg3)
 1483|      0|        {
 1484|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1485|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1486|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1487|      0|
 1488|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1489|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1490|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1491|      0|
 1492|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1493|      0|
 1494|      0|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
 1495|      0|
 1496|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1497|      0|        }
 1498|       |
 1499|       |        void EQF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1500|       |                 const InstructionArg& arg3)
 1501|      0|        {
 1502|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1503|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1504|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1505|      0|
 1506|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1507|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1508|      0|
 1509|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1510|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1511|      0|
 1512|      0|            const phi::Boolean new_value = (lhs_value.get() == rhs_value.get());
 1513|      0|
 1514|      0|            processor.SetFPSRValue(new_value);
 1515|      0|        }
 1516|       |
 1517|       |        void EQD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1518|       |                 const InstructionArg& arg3)
 1519|      0|        {
 1520|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1521|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1522|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1523|      0|
 1524|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1525|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1526|      0|
 1527|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1528|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1529|      0|
 1530|      0|            const phi::Boolean new_value = (lhs_value.get() == rhs_value.get());
 1531|      0|
 1532|      0|            processor.SetFPSRValue(new_value);
 1533|      0|        }
 1534|       |
 1535|       |        void SNE(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1536|       |                 const InstructionArg& arg3)
 1537|      0|        {
 1538|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1539|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1540|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1541|      0|
 1542|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1543|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1544|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1545|      0|
 1546|      0|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1547|      0|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1548|      0|
 1549|      0|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
 1550|      0|
 1551|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1552|      0|        }
 1553|       |
 1554|       |        void SNEI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1555|       |                  const InstructionArg& arg3)
 1556|      0|        {
 1557|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1558|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1559|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1560|      0|
 1561|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1562|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1563|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1564|      0|
 1565|      0|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1566|      0|
 1567|      0|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
 1568|      0|
 1569|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1570|      0|        }
 1571|       |
 1572|       |        void SNEU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1573|       |                  const InstructionArg& arg3)
 1574|      0|        {
 1575|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1576|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1577|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::IntRegister);
 1578|      0|
 1579|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1580|      0|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1581|      0|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1582|      0|
 1583|      0|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1584|      0|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1585|      0|
 1586|      0|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
 1587|      0|
 1588|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1589|      0|        }
 1590|       |
 1591|       |        void SNEUI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1592|       |                   const InstructionArg& arg3)
 1593|      0|        {
 1594|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1595|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 1596|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::ImmediateInteger);
 1597|      0|
 1598|      0|            const auto& dest_reg  = arg1.AsRegisterInt();
 1599|      0|            const auto& src_reg   = arg2.AsRegisterInt();
 1600|      0|            const auto& imm_value = arg3.AsImmediateValue();
 1601|      0|
 1602|      0|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1603|      0|
 1604|      0|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
 1605|      0|
 1606|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1607|      0|        }
 1608|       |
 1609|       |        void NEF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1610|       |                 const InstructionArg& arg3)
 1611|      0|        {
 1612|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1613|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1614|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1615|      0|
 1616|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1617|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1618|      0|
 1619|      0|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1620|      0|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1621|      0|
 1622|      0|            const phi::Boolean new_value = (lhs_value.get() != rhs_value.get());
 1623|      0|
 1624|      0|            processor.SetFPSRValue(new_value);
 1625|      0|        }
 1626|       |
 1627|       |        void NED(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1628|       |                 const InstructionArg& arg3)
 1629|      0|        {
 1630|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1631|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 1632|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1633|      0|
 1634|      0|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1635|      0|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1636|      0|
 1637|      0|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1638|      0|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1639|      0|
 1640|      0|            const phi::Boolean new_value = (lhs_value.get() != rhs_value.get());
 1641|      0|
 1642|      0|            processor.SetFPSRValue(new_value);
 1643|      0|        }
 1644|       |
 1645|       |        void BEQZ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1646|       |                  const InstructionArg& arg3)
 1647|      0|        {
 1648|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1649|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1650|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1651|      0|
 1652|      0|            const auto& test_reg   = arg1.AsRegisterInt();
 1653|      0|            const auto& jump_label = arg2.AsLabel();
 1654|      0|
 1655|      0|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1656|      0|
 1657|      0|            if (test_value == 0)
 1658|      0|            {
 1659|      0|                JumpToLabel(processor, jump_label.label_name);
 1660|      0|            }
 1661|      0|        }
 1662|       |
 1663|       |        void BNEZ(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1664|       |                  const InstructionArg& arg3)
 1665|      0|        {
 1666|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1667|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::Label);
 1668|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1669|      0|
 1670|      0|            const auto& test_reg   = arg1.AsRegisterInt();
 1671|      0|            const auto& jump_label = arg2.AsLabel();
 1672|      0|
 1673|      0|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1674|      0|
 1675|      0|            if (test_value != 0)
 1676|      0|            {
 1677|      0|                JumpToLabel(processor, jump_label.label_name);
 1678|      0|            }
 1679|      0|        }
 1680|       |
 1681|       |        void BFPT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1682|       |                  const InstructionArg& arg3)
 1683|      0|        {
 1684|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1685|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1686|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1687|      0|
 1688|      0|            const auto& jump_label = arg1.AsLabel();
 1689|      0|
 1690|      0|            phi::Boolean test_value = processor.GetFPSRValue();
 1691|      0|
 1692|      0|            if (test_value)
 1693|      0|            {
 1694|      0|                JumpToLabel(processor, jump_label.label_name);
 1695|      0|            }
 1696|      0|        }
 1697|       |
 1698|       |        void BFPF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1699|       |                  const InstructionArg& arg3)
 1700|      0|        {
 1701|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1702|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1703|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1704|      0|
 1705|      0|            const auto& jump_label = arg1.AsLabel();
 1706|      0|
 1707|      0|            phi::Boolean test_value = processor.GetFPSRValue();
 1708|      0|
 1709|      0|            if (!test_value)
 1710|      0|            {
 1711|      0|                JumpToLabel(processor, jump_label.label_name);
 1712|      0|            }
 1713|      0|        }
 1714|       |
 1715|       |        void J(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1716|       |               const InstructionArg& arg3)
 1717|      0|        {
 1718|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1719|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1720|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1721|      0|
 1722|      0|            const auto& jump_label = arg1.AsLabel();
 1723|      0|
 1724|      0|            JumpToLabel(processor, jump_label.label_name);
 1725|      0|        }
 1726|       |
 1727|       |        void JR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1728|       |                const InstructionArg& arg3)
 1729|      0|        {
 1730|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1731|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1732|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1733|      0|
 1734|      0|            const auto& jump_register = arg1.AsRegisterInt();
 1735|      0|
 1736|      0|            JumpToRegister(processor, jump_register.register_id);
 1737|      0|        }
 1738|       |
 1739|       |        void JAL(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1740|       |                 const InstructionArg& arg3)
 1741|      0|        {
 1742|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::Label);
 1743|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1744|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1745|      0|
 1746|      0|            const auto& jump_label = arg1.AsLabel();
 1747|      0|
 1748|      0|            processor.IntRegisterSetUnsignedValue(
 1749|      0|                    IntRegisterID::R31,
 1750|      0|                    static_cast<std::uint32_t>(processor.m_NextProgramCounter.get()));
 1751|      0|
 1752|      0|            JumpToLabel(processor, jump_label.label_name);
 1753|      0|        }
 1754|       |
 1755|       |        void JALR(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1756|       |                  const InstructionArg& arg3)
 1757|      0|        {
 1758|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1759|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 1760|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1761|      0|
 1762|      0|            const auto& jump_register = arg1.AsRegisterInt();
 1763|      0|
 1764|      0|            processor.IntRegisterSetUnsignedValue(
 1765|      0|                    IntRegisterID::R31,
 1766|      0|                    static_cast<std::uint32_t>(processor.m_NextProgramCounter.get()));
 1767|      0|
 1768|      0|            JumpToRegister(processor, jump_register.register_id);
 1769|      0|        }
 1770|       |
 1771|       |        void LHI(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1772|       |                 const InstructionArg& arg3)
 1773|      0|        {
 1774|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1775|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::ImmediateInteger);
 1776|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1777|      0|
 1778|      0|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1779|      0|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.get();
 1780|      0|
 1781|      0|            imm_value = (imm_value << 16) & 0xFFFF0000;
 1782|      0|
 1783|      0|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1784|      0|        }
 1785|       |
 1786|       |        void LB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1787|       |                const InstructionArg& arg3)
 1788|      0|        {
 1789|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1790|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1791|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1792|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1793|      0|
 1794|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1795|      0|
 1796|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1797|      0|
 1798|      0|            if (!optional_address.has_value())
 1799|      0|            {
 1800|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1801|      0|                return;
 1802|      0|            }
 1803|      0|
 1804|      0|            phi::i32 address = optional_address.value();
 1805|      0|
 1806|      0|            auto optional_value =
 1807|      0|                    processor.m_MemoryBlock.LoadByte(static_cast<std::size_t>(address.get()));
 1808|      0|
 1809|      0|            if (!optional_value.has_value())
 1810|      0|            {
 1811|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1812|      0|                PHI_LOG_ERROR("Failed to load byte at address {}", address.get());
 1813|      0|                return;
 1814|      0|            }
 1815|      0|
 1816|      0|            phi::i32 value = optional_value.value();
 1817|      0|
 1818|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1819|      0|        }
 1820|       |
 1821|       |        void LBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1822|       |                 const InstructionArg& arg3)
 1823|      0|        {
 1824|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1825|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1826|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1827|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1828|      0|
 1829|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1830|      0|
 1831|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1832|      0|
 1833|      0|            if (!optional_address.has_value())
 1834|      0|            {
 1835|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1836|      0|                return;
 1837|      0|            }
 1838|      0|
 1839|      0|            phi::i32 address = optional_address.value();
 1840|      0|
 1841|      0|            auto optional_value = processor.m_MemoryBlock.LoadUnsignedByte(
 1842|      0|                    static_cast<std::size_t>(address.get()));
 1843|      0|
 1844|      0|            if (!optional_value.has_value())
 1845|      0|            {
 1846|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1847|      0|                PHI_LOG_ERROR("Failed to load unsigned byte at address {}", address.get());
 1848|      0|                return;
 1849|      0|            }
 1850|      0|
 1851|      0|            phi::i32 value = optional_value.value();
 1852|      0|
 1853|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1854|      0|        }
 1855|       |
 1856|       |        void LH(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1857|       |                const InstructionArg& arg3)
 1858|      0|        {
 1859|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1860|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1861|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1862|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1863|      0|
 1864|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1865|      0|
 1866|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1867|      0|
 1868|      0|            if (!optional_address.has_value())
 1869|      0|            {
 1870|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1871|      0|                return;
 1872|      0|            }
 1873|      0|
 1874|      0|            phi::i32 address = optional_address.value();
 1875|      0|
 1876|      0|            auto optional_value =
 1877|      0|                    processor.m_MemoryBlock.LoadHalfWord(static_cast<std::size_t>(address.get()));
 1878|      0|
 1879|      0|            if (!optional_value.has_value())
 1880|      0|            {
 1881|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1882|      0|                PHI_LOG_ERROR("Failed to load half byte at address {}", address.get());
 1883|      0|                return;
 1884|      0|            }
 1885|      0|
 1886|      0|            phi::i32 value = optional_value.value();
 1887|      0|
 1888|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1889|      0|        }
 1890|       |
 1891|       |        void LHU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1892|       |                 const InstructionArg& arg3)
 1893|      0|        {
 1894|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1895|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1896|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1897|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1898|      0|
 1899|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1900|      0|
 1901|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1902|      0|
 1903|      0|            if (!optional_address.has_value())
 1904|      0|            {
 1905|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1906|      0|                return;
 1907|      0|            }
 1908|      0|
 1909|      0|            phi::i32 address = optional_address.value();
 1910|      0|
 1911|      0|            auto optional_value = processor.m_MemoryBlock.LoadUnsignedHalfWord(
 1912|      0|                    static_cast<std::size_t>(address.get()));
 1913|      0|
 1914|      0|            if (!optional_value.has_value())
 1915|      0|            {
 1916|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1917|      0|                PHI_LOG_ERROR("Failed to load unsigned half byte at address {}", address.get());
 1918|      0|                return;
 1919|      0|            }
 1920|      0|
 1921|      0|            phi::i32 value = optional_value.value();
 1922|      0|
 1923|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1924|      0|        }
 1925|       |
 1926|       |        void LW(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1927|       |                const InstructionArg& arg3)
 1928|      0|        {
 1929|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1930|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1931|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1932|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1933|      0|
 1934|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1935|      0|
 1936|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1937|      0|
 1938|      0|            if (!optional_address.has_value())
 1939|      0|            {
 1940|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1941|      0|                return;
 1942|      0|            }
 1943|      0|
 1944|      0|            phi::i32 address = optional_address.value();
 1945|      0|
 1946|      0|            auto optional_value =
 1947|      0|                    processor.m_MemoryBlock.LoadWord(static_cast<std::size_t>(address.get()));
 1948|      0|
 1949|      0|            if (!optional_value.has_value())
 1950|      0|            {
 1951|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1952|      0|                PHI_LOG_ERROR("Failed to load word at address {}", address.get());
 1953|      0|                return;
 1954|      0|            }
 1955|      0|
 1956|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1957|      0|        }
 1958|       |
 1959|       |        void LWU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1960|       |                 const InstructionArg& arg3)
 1961|      0|        {
 1962|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 1963|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1964|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1965|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1966|      0|
 1967|      0|            const auto& dest_reg = arg1.AsRegisterInt();
 1968|      0|
 1969|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1970|      0|
 1971|      0|            if (!optional_address.has_value())
 1972|      0|            {
 1973|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1974|      0|                return;
 1975|      0|            }
 1976|      0|
 1977|      0|            phi::i32 address = optional_address.value();
 1978|      0|
 1979|      0|            auto optional_value = processor.m_MemoryBlock.LoadUnsignedWord(
 1980|      0|                    static_cast<std::size_t>(address.get()));
 1981|      0|
 1982|      0|            if (!optional_value.has_value())
 1983|      0|            {
 1984|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1985|      0|                PHI_LOG_ERROR("Failed to load unsigned word at address {}", address.get());
 1986|      0|                return;
 1987|      0|            }
 1988|      0|
 1989|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1990|      0|        }
 1991|       |
 1992|       |        void LF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 1993|       |                const InstructionArg& arg3)
 1994|      0|        {
 1995|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 1996|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 1997|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 1998|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 1999|      0|
 2000|      0|            const auto& dest_reg = arg1.AsRegisterFloat();
 2001|      0|
 2002|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 2003|      0|
 2004|      0|            if (!optional_address.has_value())
 2005|      0|            {
 2006|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2007|      0|                return;
 2008|      0|            }
 2009|      0|
 2010|      0|            phi::i32 address = optional_address.value();
 2011|      0|
 2012|      0|            auto optional_value =
 2013|      0|                    processor.m_MemoryBlock.LoadFloat(static_cast<std::size_t>(address.get()));
 2014|      0|
 2015|      0|            if (!optional_value.has_value())
 2016|      0|            {
 2017|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2018|      0|                PHI_LOG_ERROR("Failed to load float at address {}", address.get());
 2019|      0|                return;
 2020|      0|            }
 2021|      0|
 2022|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 2023|      0|        }
 2024|       |
 2025|       |        void LD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2026|       |                const InstructionArg& arg3)
 2027|      0|        {
 2028|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2029|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::AddressDisplacement ||
 2030|      0|                       arg2.GetType() == ArgumentType::ImmediateInteger);
 2031|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2032|      0|
 2033|      0|            const auto& dest_reg = arg1.AsRegisterFloat();
 2034|      0|
 2035|      0|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 2036|      0|
 2037|      0|            if (!optional_address.has_value())
 2038|      0|            {
 2039|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2040|      0|                return;
 2041|      0|            }
 2042|      0|
 2043|      0|            phi::i32 address = optional_address.value();
 2044|      0|
 2045|      0|            auto optional_value =
 2046|      0|                    processor.m_MemoryBlock.LoadDouble(static_cast<std::size_t>(address.get()));
 2047|      0|
 2048|      0|            if (!optional_value.has_value())
 2049|      0|            {
 2050|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2051|      0|                PHI_LOG_ERROR("Failed to load double at address {}", address.get());
 2052|      0|                return;
 2053|      0|            }
 2054|      0|
 2055|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 2056|      0|        }
 2057|       |
 2058|       |        void SB(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2059|       |                const InstructionArg& arg3)
 2060|      0|        {
 2061|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2062|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2063|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2064|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2065|      0|
 2066|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2067|      0|
 2068|      0|            if (!optional_address.has_value())
 2069|      0|            {
 2070|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2071|      0|                return;
 2072|      0|            }
 2073|      0|
 2074|      0|            phi::i32 address = optional_address.value();
 2075|      0|
 2076|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2077|      0|
 2078|      0|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 2079|      0|
 2080|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreByte(
 2081|      0|                    static_cast<std::size_t>(address.get()), static_cast<std::int8_t>(value.get()));
 2082|      0|
 2083|      0|            if (!success)
 2084|      0|            {
 2085|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2086|      0|                PHI_LOG_ERROR("Failed to store byte at address {}", address.get());
 2087|      0|            }
 2088|      0|        }
 2089|       |
 2090|       |        void SBU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2091|       |                 const InstructionArg& arg3)
 2092|      0|        {
 2093|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2094|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2095|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2096|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2097|      0|
 2098|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2099|      0|
 2100|      0|            if (!optional_address.has_value())
 2101|      0|            {
 2102|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2103|      0|                return;
 2104|      0|            }
 2105|      0|
 2106|      0|            phi::i32 address = optional_address.value();
 2107|      0|
 2108|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2109|      0|
 2110|      0|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2111|      0|
 2112|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreUnsignedByte(
 2113|      0|                    static_cast<std::size_t>(address.get()),
 2114|      0|                    static_cast<std::uint8_t>(value.get()));
 2115|      0|
 2116|      0|            if (!success)
 2117|      0|            {
 2118|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2119|      0|                PHI_LOG_ERROR("Failed to store unsigned byte at address {}", address.get());
 2120|      0|            }
 2121|      0|        }
 2122|       |
 2123|       |        void SH(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2124|       |                const InstructionArg& arg3)
 2125|      0|        {
 2126|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2127|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2128|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2129|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2130|      0|
 2131|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2132|      0|
 2133|      0|            if (!optional_address.has_value())
 2134|      0|            {
 2135|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2136|      0|                return;
 2137|      0|            }
 2138|      0|
 2139|      0|            phi::i32 address = optional_address.value();
 2140|      0|
 2141|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2142|      0|
 2143|      0|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 2144|      0|
 2145|      0|            phi::Boolean success =
 2146|      0|                    processor.m_MemoryBlock.StoreHalfWord(static_cast<std::size_t>(address.get()),
 2147|      0|                                                          static_cast<std::int16_t>(value.get()));
 2148|      0|
 2149|      0|            if (!success)
 2150|      0|            {
 2151|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2152|      0|                PHI_LOG_ERROR("Failed to store half word at address {}", address.get());
 2153|      0|            }
 2154|      0|        }
 2155|       |
 2156|       |        void SHU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2157|       |                 const InstructionArg& arg3)
 2158|      0|        {
 2159|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2160|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2161|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2162|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2163|      0|
 2164|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2165|      0|
 2166|      0|            if (!optional_address.has_value())
 2167|      0|            {
 2168|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2169|      0|                return;
 2170|      0|            }
 2171|      0|
 2172|      0|            phi::i32 address = optional_address.value();
 2173|      0|
 2174|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2175|      0|
 2176|      0|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2177|      0|
 2178|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreUnsignedHalfWord(
 2179|      0|                    static_cast<std::size_t>(address.get()),
 2180|      0|                    static_cast<std::uint16_t>(value.get()));
 2181|      0|
 2182|      0|            if (!success)
 2183|      0|            {
 2184|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2185|      0|                PHI_LOG_ERROR("Failed to store unsigned half word at address {}", address.get());
 2186|      0|            }
 2187|      0|        }
 2188|       |
 2189|       |        void SW(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2190|       |                const InstructionArg& arg3)
 2191|      0|        {
 2192|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2193|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2194|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2195|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2196|      0|
 2197|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2198|      0|
 2199|      0|            if (!optional_address.has_value())
 2200|      0|            {
 2201|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2202|      0|                return;
 2203|      0|            }
 2204|      0|
 2205|      0|            phi::i32 address = optional_address.value();
 2206|      0|
 2207|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2208|      0|
 2209|      0|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 2210|      0|
 2211|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreWord(
 2212|      0|                    static_cast<std::size_t>(address.get()), value);
 2213|      0|
 2214|      0|            if (!success)
 2215|      0|            {
 2216|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2217|      0|                PHI_LOG_ERROR("Failed to store word at address {}", address.get());
 2218|      0|            }
 2219|      0|        }
 2220|       |
 2221|       |        void SWU(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2222|       |                 const InstructionArg& arg3)
 2223|      0|        {
 2224|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2225|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2226|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2227|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2228|      0|
 2229|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2230|      0|
 2231|      0|            if (!optional_address.has_value())
 2232|      0|            {
 2233|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2234|      0|                return;
 2235|      0|            }
 2236|      0|
 2237|      0|            phi::i32 address = optional_address.value();
 2238|      0|
 2239|      0|            const auto& src_reg = arg2.AsRegisterInt();
 2240|      0|
 2241|      0|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 2242|      0|
 2243|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreUnsignedWord(
 2244|      0|                    static_cast<std::size_t>(address.get()), value);
 2245|      0|
 2246|      0|            if (!success)
 2247|      0|            {
 2248|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2249|      0|                PHI_LOG_ERROR("Failed to store unsigned word at address {}", address.get());
 2250|      0|            }
 2251|      0|        }
 2252|       |
 2253|       |        void SF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2254|       |                const InstructionArg& arg3)
 2255|      0|        {
 2256|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2257|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2258|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2259|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2260|      0|
 2261|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2262|      0|
 2263|      0|            if (!optional_address.has_value())
 2264|      0|            {
 2265|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2266|      0|                return;
 2267|      0|            }
 2268|      0|
 2269|      0|            phi::i32 address = optional_address.value();
 2270|      0|
 2271|      0|            const auto& src_reg = arg2.AsRegisterFloat();
 2272|      0|
 2273|      0|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 2274|      0|
 2275|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreFloat(
 2276|      0|                    static_cast<std::size_t>(address.get()), value);
 2277|      0|
 2278|      0|            if (!success)
 2279|      0|            {
 2280|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2281|      0|                PHI_LOG_ERROR("Failed to store float at address {}", address.get());
 2282|      0|            }
 2283|      0|        }
 2284|       |
 2285|       |        void SD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2286|       |                const InstructionArg& arg3)
 2287|      0|        {
 2288|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::AddressDisplacement ||
 2289|      0|                       arg1.GetType() == ArgumentType::ImmediateInteger);
 2290|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2291|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2292|      0|
 2293|      0|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 2294|      0|
 2295|      0|            if (!optional_address.has_value())
 2296|      0|            {
 2297|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2298|      0|                return;
 2299|      0|            }
 2300|      0|
 2301|      0|            phi::i32 address = optional_address.value();
 2302|      0|
 2303|      0|            const auto& src_reg = arg2.AsRegisterFloat();
 2304|      0|
 2305|      0|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 2306|      0|
 2307|      0|            phi::Boolean success = processor.m_MemoryBlock.StoreDouble(
 2308|      0|                    static_cast<std::size_t>(address.get()), value);
 2309|      0|
 2310|      0|            if (!success)
 2311|      0|            {
 2312|      0|                processor.Raise(Exception::AddressOutOfBounds);
 2313|      0|                PHI_LOG_ERROR("Failed to store float at address {}", address.get());
 2314|      0|            }
 2315|      0|        }
 2316|       |
 2317|       |        void MOVF(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2318|       |                  const InstructionArg& arg3)
 2319|      0|        {
 2320|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2321|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2322|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2323|      0|
 2324|      0|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 2325|      0|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 2326|      0|
 2327|      0|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 2328|      0|
 2329|      0|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 2330|      0|        }
 2331|       |
 2332|       |        void MOVD(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2333|       |                  const InstructionArg& arg3)
 2334|      0|        {
 2335|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2336|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2337|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2338|      0|
 2339|      0|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 2340|      0|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 2341|      0|
 2342|      0|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 2343|      0|
 2344|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 2345|      0|        }
 2346|       |
 2347|       |        void MOVFP2I(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2348|       |                     const InstructionArg& arg3)
 2349|      0|        {
 2350|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::IntRegister);
 2351|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2352|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2353|      0|
 2354|      0|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 2355|      0|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 2356|      0|
 2357|      0|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).get();
 2358|      0|
 2359|      0|            const std::uint32_t moved_value =
 2360|      0|                    *reinterpret_cast<const std::uint32_t*>(&source_value);
 2361|      0|
 2362|      0|            processor.IntRegisterSetUnsignedValue(dest_reg, moved_value);
 2363|      0|        }
 2364|       |
 2365|       |        void MOVI2FP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2366|       |                     const InstructionArg& arg3)
 2367|      0|        {
 2368|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2369|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::IntRegister);
 2370|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2371|      0|
 2372|      0|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 2373|      0|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 2374|      0|
 2375|      0|            const std::uint32_t source_value =
 2376|      0|                    processor.IntRegisterGetUnsignedValue(source_reg).get();
 2377|      0|
 2378|      0|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 2379|      0|
 2380|      0|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 2381|      0|        }
 2382|       |
 2383|       |        void CVTF2D(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2384|       |                    const InstructionArg& arg3)
 2385|      0|        {
 2386|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2387|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2388|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2389|      0|
 2390|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2391|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2392|      0|
 2393|      0|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 2394|      0|
 2395|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 2396|      0|        }
 2397|       |
 2398|       |        void CVTF2I(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2399|       |                    const InstructionArg& arg3)
 2400|      0|        {
 2401|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2402|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2403|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2404|      0|
 2405|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2406|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2407|      0|
 2408|      0|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).get();
 2409|      0|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2410|      0|            const float        converted_value_float =
 2411|      0|                    *reinterpret_cast<const float*>(&converted_value_int);
 2412|      0|
 2413|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2414|      0|        }
 2415|       |
 2416|       |        void CVTD2F(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2417|       |                    const InstructionArg& arg3)
 2418|      0|        {
 2419|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2420|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2421|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2422|      0|
 2423|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2424|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2425|      0|
 2426|      0|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).get();
 2427|      0|            const float  converted_value = static_cast<float>(src_value);
 2428|      0|
 2429|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2430|      0|        }
 2431|       |
 2432|       |        void CVTD2I(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2433|       |                    const InstructionArg& arg3)
 2434|      0|        {
 2435|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2436|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2437|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2438|      0|
 2439|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2440|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2441|      0|
 2442|      0|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).get();
 2443|      0|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2444|      0|            const float        converted_value_float =
 2445|      0|                    *reinterpret_cast<const float*>(&converted_value_int);
 2446|      0|
 2447|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2448|      0|        }
 2449|       |
 2450|       |        void CVTI2F(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2451|       |                    const InstructionArg& arg3)
 2452|      0|        {
 2453|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2454|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2455|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2456|      0|
 2457|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2458|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2459|      0|
 2460|      0|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).get();
 2461|      0|            const std::int32_t converted_value_int =
 2462|      0|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2463|      0|            const float converted_value_float = static_cast<float>(converted_value_int);
 2464|      0|
 2465|      0|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2466|      0|        }
 2467|       |
 2468|       |        void CVTI2D(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2469|       |                    const InstructionArg& arg3)
 2470|      0|        {
 2471|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::FloatRegister);
 2472|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::FloatRegister);
 2473|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2474|      0|
 2475|      0|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2476|      0|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2477|      0|
 2478|      0|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).get();
 2479|      0|            const std::int32_t converted_value_int =
 2480|      0|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2481|      0|            const double converted_value_double = static_cast<double>(converted_value_int);
 2482|      0|
 2483|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2484|      0|        }
 2485|       |
 2486|       |        void TRAP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2487|       |                  const InstructionArg& arg3)
 2488|      0|        {
 2489|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::ImmediateInteger);
 2490|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2491|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2492|      0|
 2493|      0|            processor.Raise(Exception::Trap);
 2494|      0|        }
 2495|       |
 2496|       |        void HALT(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2497|       |                  const InstructionArg& arg3)
 2498|      0|        {
 2499|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 2500|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2501|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2502|      0|
 2503|      0|            processor.Raise(Exception::Halt);
 2504|      0|        }
 2505|       |
 2506|       |        void NOP(Processor& processor, const InstructionArg& arg1, const InstructionArg& arg2,
 2507|       |                 const InstructionArg& arg3)
 2508|      0|        {
 2509|      0|            PHI_ASSERT(arg1.GetType() == ArgumentType::None);
 2510|      0|            PHI_ASSERT(arg2.GetType() == ArgumentType::None);
 2511|      0|            PHI_ASSERT(arg3.GetType() == ArgumentType::None);
 2512|      0|
 2513|      0|            /* Do nothing */
 2514|      0|        }
 2515|       |    } // namespace impl
 2516|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/FloatRegister.cpp:
    1|       |#include "DLX/FloatRegister.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    void FloatRegister::SetValue(const phi::f32 val)
    6|      0|    {
    7|      0|        m_Value = val;
    8|      0|    }
    9|       |
   10|       |    phi::f32 FloatRegister::GetValue() const
   11|      0|    {
   12|      0|        return m_Value;
   13|      0|    }
   14|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Token.cpp:
    1|       |#include "DLX/Token.hpp"
    2|       |
    3|       |#include <magic_enum.hpp>
    4|       |#include <string>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    Token::Token(Type type, std::string_view text, phi::u64 line_number, phi::u64 column)
    9|       |        : m_Type{type}
   10|       |        , m_Text{text}
   11|       |        , m_LineNumber{line_number}
   12|       |        , m_Column{column}
   13|   177k|    {}
   14|       |
   15|       |    Token::Type Token::GetType() const noexcept
   16|   232k|    {
   17|   232k|        return m_Type;
   18|   232k|    }
   19|       |
   20|       |    std::string_view Token::GetTypeName() const noexcept
   21|    453|    {
   22|    453|        return magic_enum::enum_name(m_Type);
   23|    453|    }
   24|       |
   25|       |    phi::u64 Token::GetLineNumber() const noexcept
   26|   172k|    {
   27|   172k|        return m_LineNumber;
   28|   172k|    }
   29|       |
   30|       |    phi::u64 Token::GetColumn() const noexcept
   31|   172k|    {
   32|   172k|        return m_Column;
   33|   172k|    }
   34|       |
   35|       |    phi::usize Token::GetLength() const noexcept
   36|      0|    {
   37|      0|        return m_Text.length();
   38|      0|    }
   39|       |
   40|       |    std::string_view Token::GetText() const noexcept
   41|   286k|    {
   42|   286k|        return m_Text;
   43|   286k|    }
   44|       |
   45|       |    std::string Token::GetTextString() const noexcept
   46|   212k|    {
   47|   212k|        return std::string(m_Text.data(), m_Text.length());
   48|   212k|    }
   49|       |
   50|       |    std::string Token::DebugInfo() const noexcept
   51|   172k|    {
   52|   172k|        std::string pos_info = "(" + std::to_string(GetLineNumber().get()) + ":" +
   53|   172k|                               std::to_string(GetColumn().get()) + ")";
   54|   172k|
   55|   172k|        switch (m_Type)
   56|   172k|        {
   57|  5.02k|            case Type::Colon:
   58|  5.02k|                return "Token[Colon]" + pos_info;
   59|  4.59k|            case Type::Comma:
   60|  4.59k|                return "Token[Comma]" + pos_info;
   61|  3.31k|            case Type::Comment:
   62|  3.31k|                return "Token[Comment]" + pos_info + ": '" + GetTextString() + "'";
   63|   111k|            case Type::Identifier:
   64|   111k|                return "Token[Identifier]" + pos_info + ": '" + GetTextString() + "'";
   65|  28.6k|            case Type::NewLine:
   66|  28.6k|                return "Token[NewLine]" + pos_info;
   67|  6.06k|            case Type::OpenBracket:
   68|  6.06k|                return "Token[OpenBracket]" + pos_info;
   69|  5.93k|            case Type::ClosingBracket:
   70|  5.93k|                return "Token[OpenBracket]" + pos_info;
   71|  1.73k|            case Type::IntegerLiteral:
   72|  1.73k|                return "Token[IntegerLiteral]" + pos_info + ": '" + GetTextString() + "'";
   73|  5.56k|            case Type::ImmediateInteger:
   74|  5.56k|                return "Token[ImmediateInteger]" + pos_info + ": " + GetTextString() + "'";
   75|      0|            case Type::Unknown:
   76|      0|                return "Token[Unknown]" + pos_info;
   77|      0|            default:
   78|      0|                PHI_ASSERT_NOT_REACHED();
   79|      0|                return "Token[NotFound]" + pos_info;
   80|   172k|        }
   81|   172k|    }
   82|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/MemoryBlock.cpp:
    1|       |#include "DLX/MemoryBlock.hpp"
    2|       |#include "Phi/Core/Boolean.hpp"
    3|       |#include "Phi/Core/Log.hpp"
    4|       |#include <cstdint>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    MemoryBlock::MemoryBlock(phi::usize start_address, phi::usize starting_size)
    9|       |        : m_StartingAddress(start_address)
   10|      0|    {
   11|      0|        m_Values.resize(starting_size.get());
   12|      0|    }
   13|       |
   14|       |    std::optional<phi::i8> MemoryBlock::LoadByte(phi::usize address) const
   15|      0|    {
   16|      0|        if (!IsAddressValid(address, 1u))
   17|      0|        {
   18|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   19|      0|            return {};
   20|      0|        }
   21|      0|
   22|      0|        return m_Values.at((address - m_StartingAddress).get()).signed_value;
   23|      0|    }
   24|       |
   25|       |    std::optional<phi::u8> MemoryBlock::LoadUnsignedByte(phi::usize address) const
   26|      0|    {
   27|      0|        if (!IsAddressValid(address, 1u))
   28|      0|        {
   29|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   30|      0|            return {};
   31|      0|        }
   32|      0|
   33|      0|        return m_Values.at((address - m_StartingAddress).get()).unsigned_value;
   34|      0|    }
   35|       |
   36|       |    std::optional<phi::i16> MemoryBlock::LoadHalfWord(phi::usize address) const
   37|      0|    {
   38|      0|        if (!IsAddressValid(address, 2u))
   39|      0|        {
   40|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   41|      0|            return {};
   42|      0|        }
   43|      0|
   44|      0|        phi::usize   start_address = address - m_StartingAddress;
   45|      0|        std::int8_t  first_byte    = m_Values.at(start_address.get()).signed_value;
   46|      0|        std::int8_t  second_byte   = m_Values.at((start_address + 1u).get()).signed_value;
   47|      0|        std::int16_t result        = first_byte << 8 | second_byte;
   48|      0|
   49|      0|        return result;
   50|      0|    }
   51|       |
   52|       |    std::optional<phi::u16> MemoryBlock::LoadUnsignedHalfWord(phi::usize address) const
   53|      0|    {
   54|      0|        if (!IsAddressValid(address, 2u))
   55|      0|        {
   56|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   57|      0|            return {};
   58|      0|        }
   59|      0|
   60|      0|        phi::usize    start_address = address - m_StartingAddress;
   61|      0|        std::uint8_t  first_byte    = m_Values.at(start_address.get()).unsigned_value;
   62|      0|        std::uint8_t  second_byte   = m_Values.at((start_address + 1u).get()).unsigned_value;
   63|      0|        std::uint16_t result        = first_byte << 8 | second_byte;
   64|      0|
   65|      0|        return result;
   66|      0|    }
   67|       |
   68|       |    std::optional<phi::i32> MemoryBlock::LoadWord(phi::usize address) const
   69|      0|    {
   70|      0|        if (!IsAddressValid(address, 4u))
   71|      0|        {
   72|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   73|      0|            return {};
   74|      0|        }
   75|      0|
   76|      0|        phi::usize   start_address = address - m_StartingAddress;
   77|      0|        std::int8_t  first_byte    = m_Values.at(start_address.get()).signed_value;
   78|      0|        std::int8_t  second_byte   = m_Values.at((start_address + 1u).get()).signed_value;
   79|      0|        std::int8_t  third_byte    = m_Values.at((start_address + 2u).get()).signed_value;
   80|      0|        std::int8_t  fourth_byte   = m_Values.at((start_address + 3u).get()).signed_value;
   81|      0|        std::int32_t result = first_byte << 24 | second_byte << 16 | third_byte << 8 | fourth_byte;
   82|      0|
   83|      0|        return result;
   84|      0|    }
   85|       |
   86|       |    std::optional<phi::u32> MemoryBlock::LoadUnsignedWord(phi::usize address) const
   87|      0|    {
   88|      0|        if (!IsAddressValid(address, 4u))
   89|      0|        {
   90|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
   91|      0|            return {};
   92|      0|        }
   93|      0|
   94|      0|        phi::usize    start_address = address - m_StartingAddress;
   95|      0|        std::uint8_t  first_byte    = m_Values.at(start_address.get()).unsigned_value;
   96|      0|        std::uint8_t  second_byte   = m_Values.at((start_address + 1u).get()).unsigned_value;
   97|      0|        std::uint8_t  third_byte    = m_Values.at((start_address + 2u).get()).unsigned_value;
   98|      0|        std::uint8_t  fourth_byte   = m_Values.at((start_address + 3u).get()).unsigned_value;
   99|      0|        std::uint32_t result = first_byte << 24 | second_byte << 16 | third_byte << 8 | fourth_byte;
  100|      0|
  101|      0|        return result;
  102|      0|    }
  103|       |
  104|       |    std::optional<phi::f32> MemoryBlock::LoadFloat(phi::usize address) const
  105|      0|    {
  106|      0|        if (!IsAddressValid(address, 4u))
  107|      0|        {
  108|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  109|      0|            return {};
  110|      0|        }
  111|      0|
  112|      0|        phi::usize    start_address = address - m_StartingAddress;
  113|      0|        std::uint8_t  first_byte    = m_Values.at(start_address.get()).unsigned_value;
  114|      0|        std::uint8_t  second_byte   = m_Values.at((start_address + 1u).get()).unsigned_value;
  115|      0|        std::uint8_t  third_byte    = m_Values.at((start_address + 2u).get()).unsigned_value;
  116|      0|        std::uint8_t  fourth_byte   = m_Values.at((start_address + 3u).get()).unsigned_value;
  117|      0|        std::uint32_t result = first_byte << 24 | second_byte << 16 | third_byte << 8 | fourth_byte;
  118|      0|
  119|      0|        return *reinterpret_cast<float*>(&result);
  120|      0|    }
  121|       |
  122|       |    std::optional<phi::f64> MemoryBlock::LoadDouble(phi::usize address) const
  123|      0|    {
  124|      0|        if (!IsAddressValid(address, 8u))
  125|      0|        {
  126|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  127|      0|            return {};
  128|      0|        }
  129|      0|
  130|      0|        phi::f32 first_value  = LoadFloat(address).value();
  131|      0|        phi::f32 second_value = LoadFloat(address + 4u).value();
  132|      0|
  133|      0|        std::uint32_t first_bits  = *reinterpret_cast<std::uint32_t*>(&first_value);
  134|      0|        std::uint32_t second_bits = *reinterpret_cast<std::uint32_t*>(&second_value);
  135|      0|
  136|      0|        std::uint64_t final_bits = (static_cast<std::uint64_t>(second_bits) << 32u) | first_bits;
  137|      0|
  138|      0|        return *reinterpret_cast<double*>(&final_bits);
  139|      0|    }
  140|       |
  141|       |    phi::Boolean MemoryBlock::StoreByte(phi::usize address, phi::i8 value)
  142|      0|    {
  143|      0|        if (!IsAddressValid(address, 1u))
  144|      0|        {
  145|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  146|      0|            return false;
  147|      0|        }
  148|      0|
  149|      0|        m_Values.at((address - m_StartingAddress).get()).signed_value = value.get();
  150|      0|        return true;
  151|      0|    }
  152|       |
  153|       |    phi::Boolean MemoryBlock::StoreUnsignedByte(phi::usize address, phi::u8 value)
  154|      0|    {
  155|      0|        if (!IsAddressValid(address, 1u))
  156|      0|        {
  157|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  158|      0|            return false;
  159|      0|        }
  160|      0|
  161|      0|        m_Values.at((address - m_StartingAddress).get()).unsigned_value = value.get();
  162|      0|        return true;
  163|      0|    }
  164|       |
  165|       |    phi::Boolean MemoryBlock::StoreHalfWord(phi::usize address, phi::i16 value)
  166|      0|    {
  167|      0|        if (!IsAddressValid(address, 2u))
  168|      0|        {
  169|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  170|      0|            return false;
  171|      0|        }
  172|      0|
  173|      0|        phi::usize  start_address = address - m_StartingAddress;
  174|      0|        std::int8_t first_byte    = (value.get() & 0b11111111'00000000) >> 8;
  175|      0|        std::int8_t second_byte   = value.get() & 0b00000000'11111111;
  176|      0|
  177|      0|        m_Values.at(start_address.get()).signed_value        = first_byte;
  178|      0|        m_Values.at((start_address + 1u).get()).signed_value = second_byte;
  179|      0|
  180|      0|        return true;
  181|      0|    }
  182|       |
  183|       |    phi::Boolean MemoryBlock::StoreUnsignedHalfWord(phi::usize address, phi::u16 value)
  184|      0|    {
  185|      0|        if (!IsAddressValid(address, 2u))
  186|      0|        {
  187|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  188|      0|            return false;
  189|      0|        }
  190|      0|
  191|      0|        phi::usize   start_address = address - m_StartingAddress;
  192|      0|        std::uint8_t first_byte    = (value.get() & 0b11111111'00000000) >> 8;
  193|      0|        std::uint8_t second_byte   = value.get() & 0b00000000'11111111;
  194|      0|
  195|      0|        m_Values.at(start_address.get()).unsigned_value        = first_byte;
  196|      0|        m_Values.at((start_address + 1u).get()).unsigned_value = second_byte;
  197|      0|
  198|      0|        return true;
  199|      0|    }
  200|       |
  201|       |    phi::Boolean MemoryBlock::StoreWord(phi::usize address, phi::i32 value)
  202|      0|    {
  203|      0|        if (!IsAddressValid(address, 4u))
  204|      0|        {
  205|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  206|      0|            return false;
  207|      0|        }
  208|      0|
  209|      0|        phi::usize  start_address = address - m_StartingAddress;
  210|      0|        std::int8_t first_byte    = (value.get() & 0b11111111'00000000'00000000'00000000) >> 24;
  211|      0|        std::int8_t second_byte   = (value.get() & 0b00000000'11111111'00000000'00000000) >> 16;
  212|      0|        std::int8_t third_byte    = (value.get() & 0b00000000'00000000'11111111'00000000) >> 8;
  213|      0|        std::int8_t fourth_byte   = value.get() & 0b00000000'00000000'00000000'11111111;
  214|      0|
  215|      0|        m_Values.at(start_address.get()).signed_value        = first_byte;
  216|      0|        m_Values.at((start_address + 1u).get()).signed_value = second_byte;
  217|      0|        m_Values.at((start_address + 2u).get()).signed_value = third_byte;
  218|      0|        m_Values.at((start_address + 3u).get()).signed_value = fourth_byte;
  219|      0|
  220|      0|        return true;
  221|      0|    }
  222|       |
  223|       |    phi::Boolean MemoryBlock::StoreUnsignedWord(phi::usize address, phi::u32 value)
  224|      0|    {
  225|      0|        if (!IsAddressValid(address, 4u))
  226|      0|        {
  227|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  228|      0|            return false;
  229|      0|        }
  230|      0|
  231|      0|        phi::usize   start_address = address - m_StartingAddress;
  232|      0|        std::uint8_t first_byte    = (value.get() & 0b11111111'00000000'00000000'00000000) >> 24;
  233|      0|        std::uint8_t second_byte   = (value.get() & 0b00000000'11111111'00000000'00000000) >> 16;
  234|      0|        std::uint8_t third_byte    = (value.get() & 0b00000000'00000000'11111111'00000000) >> 8;
  235|      0|        std::uint8_t fourth_byte   = value.get() & 0b00000000'00000000'00000000'11111111;
  236|      0|
  237|      0|        m_Values.at(start_address.get()).unsigned_value        = first_byte;
  238|      0|        m_Values.at((start_address + 1u).get()).unsigned_value = second_byte;
  239|      0|        m_Values.at((start_address + 2u).get()).unsigned_value = third_byte;
  240|      0|        m_Values.at((start_address + 3u).get()).unsigned_value = fourth_byte;
  241|      0|
  242|      0|        return true;
  243|      0|    }
  244|       |
  245|       |    phi::Boolean MemoryBlock::StoreFloat(phi::usize address, phi::f32 value)
  246|      0|    {
  247|      0|        if (!IsAddressValid(address, 4u))
  248|      0|        {
  249|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  250|      0|            return false;
  251|      0|        }
  252|      0|
  253|      0|        float         value_raw  = value.get();
  254|      0|        std::uint32_t value_bits = *reinterpret_cast<std::uint32_t*>(&value_raw);
  255|      0|
  256|      0|        phi::usize   start_address = address - m_StartingAddress;
  257|      0|        std::uint8_t first_byte    = (value_bits & 0b11111111'00000000'00000000'00000000) >> 24;
  258|      0|        std::uint8_t second_byte   = (value_bits & 0b00000000'11111111'00000000'00000000) >> 16;
  259|      0|        std::uint8_t third_byte    = (value_bits & 0b00000000'00000000'11111111'00000000) >> 8;
  260|      0|        std::uint8_t fourth_byte   = value_bits & 0b00000000'00000000'00000000'11111111;
  261|      0|
  262|      0|        m_Values.at(start_address.get()).unsigned_value        = first_byte;
  263|      0|        m_Values.at((start_address + 1u).get()).unsigned_value = second_byte;
  264|      0|        m_Values.at((start_address + 2u).get()).unsigned_value = third_byte;
  265|      0|        m_Values.at((start_address + 3u).get()).unsigned_value = fourth_byte;
  266|      0|
  267|      0|        return true;
  268|      0|    }
  269|       |
  270|       |    phi::Boolean MemoryBlock::StoreDouble(phi::usize address, phi::f64 value)
  271|      0|    {
  272|      0|        if (!IsAddressValid(address, 8u))
  273|      0|        {
  274|      0|            PHI_LOG_ERROR("Address {} is out of bounds", address.get());
  275|      0|            return false;
  276|      0|        }
  277|      0|
  278|      0|        double value_raw = value.get();
  279|      0|
  280|      0|        std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  281|      0|
  282|      0|        std::uint32_t first_bits = value_bits & 0xFFFFFFFF;
  283|      0|        std::uint32_t last_bits  = value_bits >> 32;
  284|      0|
  285|      0|        float first_value = *reinterpret_cast<float*>(&first_bits);
  286|      0|        float last_value  = *reinterpret_cast<float*>(&last_bits);
  287|      0|
  288|      0|        StoreFloat(address, first_value);
  289|      0|        StoreFloat(address + 4u, last_value);
  290|      0|
  291|      0|        return true;
  292|      0|    }
  293|       |
  294|       |    phi::Boolean MemoryBlock::IsAddressValid(phi::usize address, phi::usize size) const
  295|      0|    {
  296|      0|        return address >= m_StartingAddress &&
  297|      0|               (address + size) <= (m_StartingAddress + m_Values.size());
  298|      0|    }
  299|       |
  300|       |    void MemoryBlock::Clear()
  301|      0|    {
  302|      0|        for (auto& val : m_Values)
  303|      0|        {
  304|      0|            val.signed_value = 0;
  305|      0|        }
  306|      0|    }
  307|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Instruction.cpp:
    1|       |#include "DLX/Instruction.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include <Phi/Core/Assert.hpp>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    Instruction::Instruction(const InstructionInfo& info)
    9|       |        : m_Info(info)
   10|  10.8k|    {}
   11|       |
   12|       |    void Instruction::SetArgument(phi::u8 argument_number, InstructionArg argument)
   13|  26.8k|    {
   14|  26.8k|        PHI_ASSERT(argument_number < 3u);
   15|  26.8k|
   16|  26.8k|        switch (argument_number.get())
   17|  26.8k|        {
   18|  9.80k|            case 0u:
   19|  9.80k|                m_Arg1 = argument;
   20|  9.80k|                break;
   21|  9.61k|            case 1u:
   22|  9.61k|                m_Arg2 = argument;
   23|  9.61k|                break;
   24|  7.43k|            case 2u:
   25|  7.43k|                m_Arg3 = argument;
   26|  7.43k|                break;
   27|      0|            default:
   28|      0|                PHI_ASSERT_NOT_REACHED();
   29|  26.8k|        }
   30|  26.8k|    }
   31|       |
   32|       |    std::string Instruction::DebugInfo() const noexcept
   33|  4.81k|    {
   34|  4.81k|        return std::string("Instruction");
   35|  4.81k|    }
   36|       |
   37|       |    void Instruction::Execute(Processor& processor) const noexcept
   38|      0|    {
   39|      0|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   40|      0|    }
   41|       |
   42|       |    const InstructionInfo& Instruction::GetInfo() const
   43|      0|    {
   44|      0|        return m_Info;
   45|      0|    }
   46|       |
   47|       |    const InstructionArg& Instruction::GetArg1() const
   48|      0|    {
   49|      0|        return m_Arg1;
   50|      0|    }
   51|       |
   52|       |    const InstructionArg& Instruction::GetArg2() const
   53|      0|    {
   54|      0|        return m_Arg2;
   55|      0|    }
   56|       |
   57|       |    const InstructionArg& Instruction::GetArg3() const
   58|      0|    {
   59|      0|        return m_Arg3;
   60|      0|    }
   61|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/Parser.cpp:
    1|       |#include "DLX/Parser.hpp"
    2|       |
    3|       |#include "DLX/InstructionArg.hpp"
    4|       |#include "DLX/RegisterNames.hpp"
    5|       |#include "Phi/Core/Assert.hpp"
    6|       |#include <DLX/ParserUtils.hpp>
    7|       |#include <Phi/Config/FunctionLikeMacro.hpp>
    8|       |#include <Phi/Core/Conversion.hpp>
    9|       |#include <Phi/Core/Log.hpp>
   10|       |#include <magic_enum.hpp>
   11|       |#include <algorithm>
   12|       |#include <limits>
   13|       |#include <optional>
   14|       |#include <stdexcept>
   15|       |
   16|       |using namespace phi::literals;
   17|       |
   18|       |namespace dlx
   19|       |{
   20|       |    Token ParseToken(std::string_view token, phi::u64 line_number, phi::u64 column)
   21|   123k|    {
   22|   123k|        if (token.at(0) == '#' && token.size() > 1)
   23|  5.56k|        {
   24|  5.56k|            return Token(Token::Type::ImmediateInteger, token, line_number, column);
   25|  5.56k|        }
   26|   117k|
   27|   117k|        if (token.at(0) == '/' || token.at(0) == ';')
   28|  3.31k|        {
   29|  3.31k|            return Token(Token::Type::Comment, token, line_number, column);
   30|  3.31k|        }
   31|   114k|
   32|   114k|        if (ParseNumber(token).has_value())
   33|  1.73k|        {
   34|  1.73k|            return Token(Token::Type::IntegerLiteral, token, line_number, column);
   35|  1.73k|        }
   36|   112k|
   37|   112k|        return Token(Token::Type::Identifier, token, line_number, column);
   38|   112k|    }
   39|       |
   40|       |    std::vector<Token> Parser::Tokenize(std::string_view str)
   41|    754|    {
   42|    754|        std::vector<Token> tokens{};
   43|    754|        tokens.reserve(5);
   44|    754|
   45|    754|        std::string current_token;
   46|    754|        current_token.reserve(10);
   47|    754|
   48|    754|        phi::u64 current_line_number{1u};
   49|    754|        phi::u64 token_begin{0u};
   50|    754|
   51|    754|        phi::Boolean parsing_comment{false};
   52|    754|
   53|  3.22M|        for (phi::usize i{0u}; i < str.length(); ++i)
   54|  3.22M|        {
   55|  3.22M|            const char c{str.at(i.get())};
   56|  3.22M|
   57|  3.22M|            if (c == '\n')
   58|  28.6k|            {
   59|  28.6k|                if (current_token.empty())
   60|  4.96k|                {
   61|  4.96k|                    tokens.emplace_back(Token::Type::NewLine, str.substr(token_begin.get(), 1),
   62|  4.96k|                                        current_line_number, token_begin);
   63|  4.96k|                    // Skip empty lines
   64|  4.96k|                    continue;
   65|  4.96k|                }
   66|  23.7k|
   67|  23.7k|                // Otherwise a new line separates tokens
   68|  23.7k|                tokens.emplace_back(
   69|  23.7k|                        ParseToken(str.substr(token_begin.get(), current_token.length()),
   70|  23.7k|                                   current_line_number, token_begin));
   71|  23.7k|
   72|  23.7k|                token_begin = i;
   73|  23.7k|
   74|  23.7k|                tokens.emplace_back(Token::Type::NewLine, str.substr(token_begin.get(), 1),
   75|  23.7k|                                    current_line_number, token_begin);
   76|  23.7k|
   77|  23.7k|                current_token.clear();
   78|  23.7k|                parsing_comment = false;
   79|  23.7k|                current_line_number += 1u;
   80|  23.7k|            }
   81|  3.19M|            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
   82|  3.19M|            else if (c == '/' || c == ';')
   83|  98.3k|            {
   84|  98.3k|                if (current_token.empty())
   85|  3.31k|                {
   86|  3.31k|                    token_begin = i;
   87|  3.31k|                }
   88|  98.3k|
   89|  98.3k|                parsing_comment = true;
   90|  98.3k|                current_token.push_back(c);
   91|  98.3k|            }
   92|  3.09M|            else if (parsing_comment)
   93|  2.20M|            {
   94|  2.20M|                // simply append the character
   95|  2.20M|                current_token.push_back(c);
   96|  2.20M|            }
   97|   884k|            else
   98|   884k|            {
   99|   884k|                // Not parsing a comment
  100|   884k|
  101|   884k|                switch (c)
  102|   884k|                {
  103|   246k|                    case ' ':
  104|   246k|                    case '\t':
  105|   246k|                    case '\v':
  106|   246k|                        if (current_token.empty())
  107|   185k|                        {
  108|   185k|                            // We haven't found any usable character for the current token so just skip the whitespace.
  109|   185k|                            continue;
  110|   185k|                        }
  111|  60.8k|
  112|  60.8k|                        // Otherwise a whitespace separates tokens
  113|  60.8k|                        tokens.push_back(
  114|  60.8k|                                ParseToken(str.substr(token_begin.get(), current_token.length()),
  115|  60.8k|                                           current_line_number, token_begin));
  116|  60.8k|                        current_token.clear();
  117|  60.8k|                        break;
  118|  60.8k|                    case ':':
  119|  26.8k|                        // Need to parse label names together with their colon
  120|  26.8k|                        if (!current_token.empty())
  121|  21.7k|                        {
  122|  21.7k|                            current_token.push_back(c);
  123|  21.7k|                            tokens.emplace_back(ParseToken(
  124|  21.7k|                                    str.substr(token_begin.get(), current_token.length()),
  125|  21.7k|                                    current_line_number, token_begin));
  126|  21.7k|
  127|  21.7k|                            current_token.clear();
  128|  21.7k|                        }
  129|  5.02k|                        else
  130|  5.02k|                        {
  131|  5.02k|                            // Orphan colon
  132|  5.02k|                            token_begin = i;
  133|  5.02k|
  134|  5.02k|                            tokens.emplace_back(Token::Type::Colon,
  135|  5.02k|                                                str.substr(token_begin.get(), 1),
  136|  5.02k|                                                current_line_number, token_begin);
  137|  5.02k|                            break;
  138|  5.02k|                        }
  139|  21.7k|                        break;
  140|  21.7k|                    case ',':
  141|  20.6k|                    case '(':
  142|  20.6k|                    case ')':
  143|  20.6k|                        if (!current_token.empty())
  144|  16.4k|                        {
  145|  16.4k|                            tokens.emplace_back(ParseToken(
  146|  16.4k|                                    str.substr(token_begin.get(), current_token.length()),
  147|  16.4k|                                    current_line_number, token_begin));
  148|  16.4k|
  149|  16.4k|                            current_token.clear();
  150|  16.4k|                        }
  151|  20.6k|
  152|  20.6k|                        Token::Type type;
  153|  20.6k|                        switch (c)
  154|  20.6k|                        {
  155|  6.68k|                            case ',':
  156|  6.68k|                                type = Token::Type::Comma;
  157|  6.68k|                                break;
  158|  7.04k|                            case '(':
  159|  7.04k|                                type = Token::Type::OpenBracket;
  160|  7.04k|                                break;
  161|  6.90k|                            case ')':
  162|  6.90k|                                type = Token::Type::ClosingBracket;
  163|  6.90k|                                break;
  164|      0|                            default:
  165|      0|                                PHI_ASSERT_NOT_REACHED();
  166|      0|                                break;
  167|  20.6k|                        }
  168|  20.6k|
  169|  20.6k|                        token_begin = i;
  170|  20.6k|
  171|  20.6k|                        tokens.emplace_back(type, str.substr(token_begin.get(), 1),
  172|  20.6k|                                            current_line_number, token_begin);
  173|  20.6k|                        break;
  174|  20.6k|
  175|   590k|                    default:
  176|   590k|                        if (current_token.empty())
  177|   119k|                        {
  178|   119k|                            token_begin = i;
  179|   119k|                        }
  180|   590k|
  181|   590k|                        // simply append the character
  182|   590k|                        current_token.push_back(c);
  183|   884k|                }
  184|   884k|            }
  185|  3.22M|        }
  186|    754|
  187|    754|        // Checked the entire string. Parse whats left if anything
  188|    754|        if (!current_token.empty())
  189|    436|        {
  190|    436|            tokens.emplace_back(ParseToken(str.substr(token_begin.get(), current_token.length()),
  191|    436|                                           current_line_number, token_begin));
  192|    436|        }
  193|    754|
  194|    754|        return tokens;
  195|    754|    }
  196|       |
  197|       |    static phi::Boolean has_x_more_tokens(const std::vector<Token>& tokens, phi::usize index,
  198|       |                                          phi::u64 x)
  199|  31.0k|    {
  200|  31.0k|        return index + x <= tokens.size();
  201|  31.0k|    }
  202|       |
  203|       |    static phi::Boolean has_one_more_token(const std::vector<Token>& tokens, phi::usize index)
  204|  30.0k|    {
  205|  30.0k|        return has_x_more_tokens(tokens, index, 1u);
  206|  30.0k|    }
  207|       |
  208|       |    static phi::Boolean next_token_is(const std::vector<Token>& tokens, phi::usize index,
  209|       |                                      Token::Type token_type)
  210|      0|    {
  211|      0|        PHI_ASSERT(has_one_more_token(tokens, index));
  212|      0|
  213|      0|        const auto& next_token = tokens.at((index + 1u).get());
  214|      0|
  215|      0|        return next_token.GetType() == token_type;
  216|      0|    }
  217|       |
  218|       |    static phi::Boolean has_one_more_token_of_type(const std::vector<Token>& tokens,
  219|       |                                                   phi::usize index, Token::Type token_type)
  220|      0|    {
  221|      0|        if (!has_one_more_token(tokens, index))
  222|      0|        {
  223|      0|            return false;
  224|      0|        }
  225|      0|
  226|      0|        return (next_token_is(tokens, index, token_type));
  227|      0|    }
  228|       |
  229|       |    static void AddParseError(ParsedProgram& program, const std::string& message)
  230|  82.5k|    {
  231|  82.5k|        ParseError err;
  232|  82.5k|        err.message = message;
  233|  82.5k|
  234|  82.5k|        PHI_LOG_ERROR("Parsing error: {}", message);
  235|  82.5k|
  236|  82.5k|        program.m_ParseErrors.emplace_back(err);
  237|  82.5k|    }
  238|       |
  239|       |    static std::optional<InstructionArg> parse_instruction_argument(
  240|       |            const Token& token, ArgumentType expected_argument_type,
  241|       |            const std::vector<Token>& tokens, phi::usize& index, ParsedProgram& program)
  242|  27.8k|    {
  243|  27.8k|        PHI_LOG_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
  244|  27.8k|                     magic_enum::enum_name(expected_argument_type));
  245|  27.8k|
  246|  27.8k|        switch (token.GetType())
  247|  27.8k|        {
  248|    990|            case Token::Type::IntegerLiteral: {
  249|    990|                if (!ArgumentTypeIncludes(expected_argument_type,
  250|    990|                                          ArgumentType::AddressDisplacement))
  251|     11|                {
  252|     11|                    AddParseError(program,
  253|     11|                                  fmt::format("Expected {} but got address displacement",
  254|     11|                                              magic_enum::enum_name(expected_argument_type)));
  255|     11|                    return {};
  256|     11|                }
  257|    979|
  258|    979|                // Parse address displacement
  259|    979|                auto displacement_value = ParseNumber(token.GetText());
  260|    979|                if (!displacement_value)
  261|      0|                {
  262|      0|                    AddParseError(program,
  263|      0|                                  "Failed to parse displacement value for Address displacement");
  264|      0|                    return {};
  265|      0|                }
  266|    979|                std::int16_t value = displacement_value.value().get();
  267|    979|
  268|    979|                if (!has_x_more_tokens(tokens, index, 3u))
  269|      2|                {
  270|      2|                    AddParseError(program,
  271|      2|                                  "Not enough arguments left to parse address displacement");
  272|      2|                    return {};
  273|      2|                }
  274|    977|
  275|    977|                const Token& first_token  = tokens.at(index.get());
  276|    977|                const Token& second_token = tokens.at((index + 1u).get());
  277|    977|                const Token& third_token  = tokens.at((index + 2u).get());
  278|    977|
  279|    977|                if (first_token.GetType() != Token::Type::OpenBracket)
  280|      0|                {
  281|      0|                    AddParseError(program, "Expected open bracket");
  282|      0|                    return {};
  283|      0|                }
  284|    977|
  285|    977|                // Second token is the address
  286|    977|                IntRegisterID reg_id = StringToIntRegister(
  287|    977|                        {second_token.GetText().data(), second_token.GetText().size()});
  288|    977|
  289|    977|                if (reg_id == IntRegisterID::None)
  290|      0|                {
  291|      0|                    AddParseError(program, "Expected IntRegister");
  292|      0|                    return {};
  293|      0|                }
  294|    977|
  295|    977|                if (third_token.GetType() != Token::Type::ClosingBracket)
  296|      1|                {
  297|      1|                    AddParseError(program, "Expected closing bracket");
  298|      1|                    return {};
  299|      1|                }
  300|    976|
  301|    976|                index += 3u;
  302|    976|
  303|    976|                PHI_LOG_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
  304|    976|                             value, magic_enum::enum_name(reg_id));
  305|    976|
  306|    976|                return ConstructInstructionArgAddressDisplacement(reg_id, value);
  307|    976|            }
  308|  21.7k|            case Token::Type::Identifier: {
  309|  21.7k|                IntRegisterID reg_id = StringToIntRegister(token.GetTextString());
  310|  21.7k|
  311|  21.7k|                if (reg_id != IntRegisterID::None)
  312|  21.0k|                {
  313|  21.0k|                    if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  314|     18|                    {
  315|     18|                        AddParseError(program,
  316|     18|                                      fmt::format("Got IntRegister but expected '{}'",
  317|     18|                                                  magic_enum::enum_name(expected_argument_type)));
  318|     18|                        return {};
  319|     18|                    }
  320|  21.0k|
  321|  21.0k|                    PHI_LOG_INFO("Parsed identifier as int register {}",
  322|  21.0k|                                 magic_enum::enum_name(reg_id));
  323|  21.0k|
  324|  21.0k|                    return ConstructInstructionArgRegisterInt(reg_id);
  325|  21.0k|                }
  326|    626|
  327|    626|                // Try parsing as FloatRegister
  328|    626|                FloatRegisterID float_reg_id = StringToFloatRegister(token.GetTextString());
  329|    626|
  330|    626|                if (float_reg_id != FloatRegisterID::None)
  331|      0|                {
  332|      0|                    if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  333|      0|                    {
  334|      0|                        AddParseError(program,
  335|      0|                                      fmt::format("Got FloatRegister but expected '{}'",
  336|      0|                                                  magic_enum::enum_name(expected_argument_type)));
  337|      0|                        return {};
  338|      0|                    }
  339|      0|
  340|      0|                    PHI_LOG_INFO("Parsed identifier as float register {}",
  341|      0|                                 magic_enum::enum_name(float_reg_id));
  342|      0|
  343|      0|                    return ConstructInstructionArgRegisterFloat(float_reg_id);
  344|      0|                }
  345|    626|
  346|    626|                // Parse as Label
  347|    626|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  348|    431|                {
  349|    431|                    AddParseError(program,
  350|    431|                                  fmt::format("Got Label but expected '{}'",
  351|    431|                                              magic_enum::enum_name(expected_argument_type)));
  352|    431|                    return {};
  353|    431|                }
  354|    195|
  355|    195|                if (!IsValidIdentifier(token.GetText()))
  356|     11|                {
  357|     11|                    AddParseError(program, fmt::format("Invalid label identifier found {}",
  358|     11|                                                       token.GetText()));
  359|     11|                    return {};
  360|     11|                }
  361|    184|
  362|    184|                PHI_LOG_INFO("Parsed Label identifier as '{}'", token.GetText());
  363|    184|
  364|    184|                return ConstructInstructionArgLabel(token.GetText());
  365|    184|            }
  366|  4.73k|            case Token::Type::ImmediateInteger: {
  367|  4.73k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  368|      9|                {
  369|      9|                    AddParseError(program,
  370|      9|                                  fmt::format("Got ImmediateInteger but expected '{}'",
  371|      9|                                              magic_enum::enum_name(expected_argument_type)));
  372|      9|                    return {};
  373|      9|                }
  374|  4.72k|
  375|  4.72k|                auto parsed_value = ParseNumber(token.GetText().substr(1));
  376|  4.72k|                if (!parsed_value)
  377|    108|                {
  378|    108|                    AddParseError(program, "Failed to parse immediate Integer value");
  379|    108|                    return {};
  380|    108|                }
  381|  4.61k|
  382|  4.61k|                PHI_LOG_INFO("Parsed Immediate Integer with value {}", parsed_value.value().get());
  383|  4.61k|
  384|  4.61k|                return ConstructInstructionArgImmediateValue(parsed_value.value().get());
  385|  4.61k|            }
  386|  4.61k|            default:
  387|    453|                AddParseError(program,
  388|    453|                              fmt::format("Unexpected token of type '{}'", token.GetTypeName()));
  389|    453|                return {};
  390|  27.8k|        }
  391|  27.8k|    }
  392|       |
  393|       |    static void consume_x_tokens(phi::usize& index, phi::usize x)
  394|   174k|    {
  395|   174k|        index += x;
  396|   174k|    }
  397|       |
  398|       |    static void consume_current_token(phi::usize& index)
  399|   174k|    {
  400|   174k|        consume_x_tokens(index, 1u);
  401|   174k|    }
  402|       |
  403|       |    ParsedProgram Parser::Parse(const InstructionLibrary& lib, std::vector<Token>& tokens)
  404|    754|    {
  405|    754|        ParsedProgram program;
  406|    754|
  407|    754|        phi::Boolean line_has_instruction{false};
  408|    754|
  409|   145k|        for (phi::usize index{0u}; index < tokens.size();)
  410|   144k|        {
  411|   144k|            Token& current_token = tokens.at(index.get());
  412|   144k|
  413|   144k|            consume_current_token(index);
  414|   144k|
  415|   144k|            PHI_LOG_INFO("Parsing '{}'", current_token.DebugInfo());
  416|   144k|
  417|   144k|            switch (current_token.GetType())
  418|   144k|            {
  419|      0|                // Ignore comments
  420|  3.31k|                case Token::Type::Comment:
  421|  3.31k|                    PHI_LOG_DEBUG("Ignoring comment");
  422|  3.31k|                    break;
  423|  28.6k|                case Token::Type::NewLine:
  424|  28.6k|                    PHI_LOG_DEBUG("Ignoring newline");
  425|  28.6k|                    line_has_instruction = false;
  426|  28.6k|                    break;
  427|  89.9k|                case Token::Type::Identifier: {
  428|  89.9k|                    if (line_has_instruction)
  429|    618|                    {
  430|    618|                        AddParseError(program, "Expected new line but got identifer");
  431|    618|                        break;
  432|    618|                    }
  433|  89.2k|
  434|  89.2k|                    // Handle jump labels
  435|  89.2k|                    // Check if the last character of the identifier is a colon
  436|  89.2k|                    if (current_token.GetText().at(current_token.GetText().size() - 1) == ':')
  437|  21.3k|                    {
  438|  21.3k|                        std::string_view label_name = current_token.GetText().substr(
  439|  21.3k|                                0, current_token.GetText().size() - 1);
  440|  21.3k|
  441|  21.3k|                        program.m_JumpData[label_name] =
  442|  21.3k|                                static_cast<std::uint32_t>(program.m_Instructions.size());
  443|  21.3k|
  444|  21.3k|                        PHI_LOG_INFO("Added jump label {} -> {}", label_name,
  445|  21.3k|                                     program.m_Instructions.size());
  446|  21.3k|                        break;
  447|  21.3k|                    }
  448|  67.9k|
  449|  67.9k|                    // Handle normal instructions
  450|  67.9k|                    // First we need to parse the instruction itself so we know how many arguments it expects
  451|  67.9k|                    OpCode opcode = StringToOpCode(current_token.GetTextString());
  452|  67.9k|
  453|  67.9k|                    if (opcode == OpCode::NONE)
  454|  57.0k|                    {
  455|  57.0k|                        AddParseError(program,
  456|  57.0k|                                      fmt::format("Failed to parse instruction '{}' not found.",
  457|  57.0k|                                                  current_token.GetText()));
  458|  57.0k|                        break;
  459|  57.0k|                    }
  460|  10.8k|
  461|  10.8k|                    PHI_LOG_INFO("Instruction opcode: {}", magic_enum::enum_name(opcode));
  462|  10.8k|
  463|  10.8k|                    const InstructionInfo& info = lib.LookUp(opcode);
  464|  10.8k|
  465|  10.8k|                    // Make sure we got no problems here
  466|  10.8k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  467|  10.8k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  468|  10.8k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  469|  10.8k|                    PHI_ASSERT(info.GetExecutor());
  470|  10.8k|
  471|  10.8k|                    phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  472|  10.8k|                    PHI_LOG_INFO("Instruction requires {} arguments",
  473|  10.8k|                                 number_of_argument_required.get());
  474|  10.8k|
  475|  10.8k|                    // Create instruction
  476|  10.8k|                    Instruction instruction(info);
  477|  10.8k|
  478|  10.8k|                    // Parse arguments
  479|  39.7k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  480|  30.0k|                    {
  481|  30.0k|                        // Get next token
  482|  30.0k|                        if (!has_one_more_token(tokens, index))
  483|     30|                        {
  484|     30|                            AddParseError(
  485|     30|                                    program,
  486|     30|                                    fmt::format("Missing {} arguments for instruction {}",
  487|     30|                                                (number_of_argument_required - argument_num).get(),
  488|     30|                                                magic_enum::enum_name(opcode)));
  489|     30|                            break;
  490|     30|                        }
  491|  30.0k|
  492|  30.0k|                        current_token = tokens.at(index.get());
  493|  30.0k|                        consume_current_token(index);
  494|  30.0k|
  495|  30.0k|                        // Skip commas
  496|  30.0k|                        if (current_token.GetType() == Token::Type::Comma)
  497|  2.09k|                        {
  498|  2.09k|                            PHI_LOG_DEBUG("Skipping comma");
  499|  2.09k|                            continue;
  500|  2.09k|                        }
  501|  27.9k|
  502|  27.9k|                        if (current_token.GetType() == Token::Type::NewLine)
  503|     41|                        {
  504|     41|                            AddParseError(program, "Unexpected end of line");
  505|     41|                            break;
  506|     41|                        }
  507|  27.8k|
  508|  27.8k|                        std::optional<InstructionArg> optional_parsed_argument =
  509|  27.8k|                                parse_instruction_argument(current_token,
  510|  27.8k|                                                           info.GetArgumentType(argument_num),
  511|  27.8k|                                                           tokens, index, program);
  512|  27.8k|                        if (!optional_parsed_argument.has_value())
  513|  1.04k|                        {
  514|  1.04k|                            AddParseError(program, fmt::format("Failed to parse argument number {}",
  515|  1.04k|                                                               argument_num.get()));
  516|  1.04k|                            break;
  517|  1.04k|                        }
  518|  26.8k|
  519|  26.8k|                        // Successfully parsed one argument
  520|  26.8k|                        InstructionArg parsed_argument = optional_parsed_argument.value();
  521|  26.8k|
  522|  26.8k|                        instruction.SetArgument(argument_num, parsed_argument);
  523|  26.8k|                        argument_num++;
  524|  26.8k|
  525|  26.8k|                        PHI_LOG_INFO("Successfully parsed argument {}", argument_num.get());
  526|  26.8k|                    }
  527|  10.8k|
  528|  10.8k|                    // Only add the instruction if we got no parsing errors
  529|  10.8k|                    if (program.m_ParseErrors.empty())
  530|  4.81k|                    {
  531|  4.81k|                        PHI_LOG_INFO("Successfully parsed instruction '{}'",
  532|  4.81k|                                     instruction.DebugInfo());
  533|  4.81k|                        program.m_Instructions.emplace_back(std::move(instruction));
  534|  4.81k|                        line_has_instruction = true;
  535|  4.81k|                    }
  536|  10.8k|                    break;
  537|  10.8k|                }
  538|  10.8k|
  539|  22.7k|                default:
  540|  22.7k|                    AddParseError(program, "Unexpected token");
  541|  22.7k|                    break;
  542|   144k|            }
  543|   144k|        }
  544|    754|
  545|    754|        return program;
  546|    754|    }
  547|       |
  548|       |    ParsedProgram Parser::Parse(const InstructionLibrary& lib, std::string_view source)
  549|    754|    {
  550|    754|        std::vector<Token> tokens = Tokenize(source);
  551|    754|        return Parse(lib, tokens);
  552|    754|    }
  553|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/OpCode.cpp:
    1|       |#include "DLX/OpCode.hpp"
    2|       |
    3|       |#include <magic_enum.hpp>
    4|       |#include <algorithm>
    5|       |
    6|       |namespace dlx
    7|       |{
    8|       |    OpCode StringToOpCode(std::string token)
    9|  67.9k|    {
   10|  67.9k|        std::transform(token.begin(), token.end(), token.begin(), ::toupper);
   11|  67.9k|        std::optional<OpCode> opcode_casted = magic_enum::enum_cast<OpCode>(token);
   12|  67.9k|        if (opcode_casted.has_value())
   13|  11.1k|        {
   14|  11.1k|            // TODO: Bit of a hacky way around magic_enum begin able to cast every member...
   15|  11.1k|            if (opcode_casted.value() == OpCode::NUMBER_OF_ELEMENTS)
   16|      2|            {
   17|      2|                return OpCode::NONE;
   18|      2|            }
   19|  11.1k|            return opcode_casted.value();
   20|  11.1k|        }
   21|  56.7k|
   22|  56.7k|        // None found
   23|  56.7k|        return OpCode::NONE;
   24|  56.7k|    }
   25|       |} // namespace dlx

/home/runner/work/DLXEmu/DLXEmu/DLXEmu-App/DLXLib/src/InstructionArg.cpp:
    1|       |#include "DLX/InstructionArg.hpp"
    2|       |
    3|       |namespace dlx
    4|       |{
    5|       |    InstructionArg::InstructionArg()
    6|       |        : m_Type(ArgumentType::None)
    7|       |        , address_displacement()
    8|  59.3k|    {}
    9|       |
   10|       |    ArgumentType InstructionArg::GetType() const
   11|      0|    {
   12|      0|        return m_Type;
   13|      0|    }
   14|       |
   15|       |    std::string InstructionArg::DebugInfo() const
   16|      0|    {
   17|      0|        return "InstructionArgument";
   18|      0|    }
   19|       |
   20|       |    const InstructionArg::RegisterInt& InstructionArg::AsRegisterInt() const
   21|      0|    {
   22|      0|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   23|      0|
   24|      0|        return register_int;
   25|      0|    }
   26|       |
   27|       |    const InstructionArg::RegisterFloat& InstructionArg::AsRegisterFloat() const
   28|      0|    {
   29|      0|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   30|      0|
   31|      0|        return register_float;
   32|      0|    }
   33|       |
   34|       |    const InstructionArg::ImmediateValue& InstructionArg::AsImmediateValue() const
   35|      0|    {
   36|      0|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   37|      0|
   38|      0|        return immediate_value;
   39|      0|    }
   40|       |
   41|       |    const InstructionArg::AddressDisplacement& InstructionArg::AsAddressDisplacement() const
   42|      0|    {
   43|      0|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
   44|      0|
   45|      0|        return address_displacement;
   46|      0|    }
   47|       |
   48|       |    const InstructionArg::Label& InstructionArg::AsLabel() const
   49|      0|    {
   50|      0|        PHI_ASSERT(m_Type == ArgumentType::Label);
   51|      0|
   52|      0|        return label;
   53|      0|    }
   54|       |
   55|       |    phi::Boolean operator==(const InstructionArg& lhs, const InstructionArg& rhs)
   56|      0|    {
   57|      0|        if (lhs.GetType() != rhs.GetType())
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|      0|
   62|      0|        switch (lhs.GetType())
   63|      0|        {
   64|      0|            case ArgumentType::AddressDisplacement:
   65|      0|                return (lhs.AsAddressDisplacement().displacement ==
   66|      0|                        rhs.AsAddressDisplacement().displacement) &&
   67|      0|                       (lhs.AsAddressDisplacement().register_id ==
   68|      0|                        rhs.AsAddressDisplacement().register_id);
   69|      0|            case ArgumentType::ImmediateInteger:
   70|      0|                return lhs.AsImmediateValue().signed_value == rhs.AsImmediateValue().signed_value;
   71|      0|            case ArgumentType::IntRegister:
   72|      0|                return lhs.AsRegisterInt().register_id == rhs.AsRegisterInt().register_id;
   73|      0|            case ArgumentType::FloatRegister:
   74|      0|                return lhs.AsRegisterFloat().register_id == rhs.AsRegisterFloat().register_id;
   75|      0|            case ArgumentType::Label:
   76|      0|                return lhs.AsLabel().label_name == rhs.AsLabel().label_name;
   77|      0|            case ArgumentType::None:
   78|      0|                return true;
   79|      0|            default:
   80|      0|                PHI_ASSERT_NOT_REACHED();
   81|      0|                break;
   82|      0|        }
   83|      0|
   84|      0|        PHI_ASSERT_NOT_REACHED();
   85|      0|        return false;
   86|      0|    }
   87|       |
   88|       |    phi::Boolean operator!=(const InstructionArg& lhs, const InstructionArg& rhs)
   89|      0|    {
   90|      0|        return !(lhs == rhs);
   91|      0|    }
   92|       |
   93|       |    InstructionArg ConstructInstructionArgRegisterInt(IntRegisterID id)
   94|  21.0k|    {
   95|  21.0k|        InstructionArg arg;
   96|  21.0k|        arg.m_Type                   = ArgumentType::IntRegister;
   97|  21.0k|        arg.register_int.register_id = id;
   98|  21.0k|        return arg;
   99|  21.0k|    }
  100|       |
  101|       |    InstructionArg ConstructInstructionArgRegisterFloat(FloatRegisterID id)
  102|      0|    {
  103|      0|        InstructionArg arg;
  104|      0|        arg.m_Type                     = ArgumentType::FloatRegister;
  105|      0|        arg.register_float.register_id = id;
  106|      0|        return arg;
  107|      0|    }
  108|       |
  109|       |    InstructionArg ConstructInstructionArgImmediateValue(std::int16_t value)
  110|  4.61k|    {
  111|  4.61k|        InstructionArg arg;
  112|  4.61k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  113|  4.61k|        arg.immediate_value.signed_value = value;
  114|  4.61k|        return arg;
  115|  4.61k|    }
  116|       |
  117|       |    InstructionArg ConstructInstructionArgAddressDisplacement(IntRegisterID id,
  118|       |                                                              phi::i32      displacement)
  119|    976|    {
  120|    976|        InstructionArg arg;
  121|    976|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  122|    976|        arg.address_displacement.register_id  = id;
  123|    976|        arg.address_displacement.displacement = displacement;
  124|    976|        return arg;
  125|    976|    }
  126|       |
  127|       |    InstructionArg ConstructInstructionArgLabel(std::string_view label_name)
  128|    184|    {
  129|    184|        InstructionArg arg;
  130|    184|        arg.m_Type           = ArgumentType::Label;
  131|    184|        arg.label.label_name = label_name;
  132|    184|        return arg;
  133|    184|    }
  134|       |} // namespace dlx

